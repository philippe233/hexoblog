{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1522292909536},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1522292909537},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1522292909551},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1522292909572},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1522292909572},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1522292909572},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1522292909572},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1522292909572},{"_id":"themes/next/ANN.txt","hash":"e7707f410b707da8a47d482754356ac70248664f","modified":1527240307113},{"_id":"themes/next/Amy.txt","hash":"4c08774013ce0a310877e04d99be9b124fa7b157","modified":1527350737669},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1522292909573},{"_id":"themes/next/IRVING.txt","hash":"4c463da5a475c275a5c13fca5b7a4595879ac863","modified":1527240307582},{"_id":"themes/next/Bernadette.txt","hash":"8a799e2880d6af426f0a2d1d8fc785a9d1e30553","modified":1527351584886},{"_id":"themes/next/JOE.txt","hash":"9054f3fe52fbcd9b80c6f7d9bc7911718e8c4889","modified":1527240306339},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1522292909573},{"_id":"themes/next/Penny.txt","hash":"b0efc14b58c17fd6b20fd8b45ba5c8caab272034","modified":1527350728118},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1522292909574},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1522292909574},{"_id":"themes/next/Summer team all script.txt","hash":"d68d1d39e4090ac595fb83c37c684c7b4091334d","modified":1527348884146},{"_id":"themes/next/_config.yml","hash":"a329e99845a10d1efda48d8a0e7d8e09670f108f","modified":1522939835299},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1522292909575},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1522292909576},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1522292909754},{"_id":"source/_images/bigface.png","hash":"fb93ee5938ebb0f32e76ec1b9f52e8a6187cf06d","modified":1522634480939},{"_id":"source/_images/download.jpg","hash":"e93c8e4de6a23324907019ada1dd24472a1baa8c","modified":1522634480939},{"_id":"source/_images/glass.jpg","hash":"69545fd06bfe5c027c631c234c410c9e6d1c9495","modified":1522634480940},{"_id":"source/_images/sister.jpg","hash":"bae3415c53703d655f0ba7ed7fa483fe92de4408","modified":1522634480941},{"_id":"source/categories/index.md","hash":"16333c1a6dff96a3d076e19ef1bffe3ccea20c3e","modified":1522924564353},{"_id":"source/tags/index.md","hash":"14d6f853920b63d38d971783f9a84817ead19cc4","modified":1522924564354},{"_id":"source/_posts/Git-Learning.md","hash":"73bac36d9e14f1ec641837adaf8ee162cbc625d4","modified":1522924564348},{"_id":"source/_posts/Hexo-Learning.md","hash":"b0f4753b0137112ba6518be5091d90746b97fb57","modified":1522940602166},{"_id":"source/_posts/ICMP-Redirect-Attack.md","hash":"2f2cff6ce67ab0eb5736cd2913ffe834f00b3607","modified":1523591691182},{"_id":"source/_posts/Linux-look-for-route-table.md","hash":"9abd4bb6d6a6542bca0f9ccbeb5305111a2f0046","modified":1523423364478},{"_id":"source/_posts/Over-The-Great-Wall.md","hash":"8af43cd56cabe1ec6f2fce6ea451430413dc2b43","modified":1525772256915},{"_id":"source/_posts/VMware-security.md","hash":"0d127d2d5ddab8ef9b858e393587206126d4b936","modified":1525251445241},{"_id":"source/_posts/arp-protocol.md","hash":"40f1bef5d8f79a695e1e8e58f12ffb5867c481f0","modified":1525762965998},{"_id":"source/_posts/base64.md","hash":"32ade50c50e40276727eec04f807f13505506a6d","modified":1524894670191},{"_id":"source/_posts/boyhood.md","hash":"65fa61dd7e97e246bbaf12c2263cf8e6e8c06fbb","modified":1522924564349},{"_id":"source/_posts/dns-tunnel.md","hash":"9321219182a41dbcad41ebefb50dc45f4232d445","modified":1526961921014},{"_id":"source/_posts/encoding.md","hash":"8ae87593d0f2428b8cef2cd6b30306c385b3354c","modified":1524468691873},{"_id":"source/_posts/hello-world.md","hash":"8caba70c5d9936c1f6d4bc705e3e4c90b4876f30","modified":1522924564350},{"_id":"source/_posts/markdown.md","hash":"6bb471ff38a439ccac26ad4e0628848a49aa891e","modified":1522924564351},{"_id":"source/_posts/post-picture.md","hash":"44641e48de9e9156186979579946dfe24d0dd424","modified":1522924564352},{"_id":"source/_posts/tech-blog.md","hash":"190ac806dde6beb75c334c7dad8beb87f73b51ed","modified":1522924564352},{"_id":"source/_posts/training-skill.md","hash":"4631d7d7add3cdb728cf0b6189512a023082a630","modified":1527733094788},{"_id":"source/_posts/web-cache-basic-kb.md","hash":"b86cb13b80bbe4795a17111059c9c27e12113b49","modified":1523423215237},{"_id":"source/_posts/web-security-learning.md","hash":"869c2959c2fc85d57c7bfaac3dbc51ffdee1550d","modified":1525420304204},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1522292909381},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1522292909389},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1522292889393},{"_id":"themes/next/.git/index","hash":"267671d6c4bee43b8e40d4d2f9166148da36d371","modified":1522633766560},{"_id":"themes/next/.git/packed-refs","hash":"2594e2dfee3c8fa3d1c6c8551abbc863c07687f1","modified":1522292909372},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1522292909555},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1522292909562},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1522292909555},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1522292909571},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1522292909576},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1522292909577},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1522292909577},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1522292909577},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1522292909578},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1522292909586},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1522292909586},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1522292909587},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1522292909587},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1522292909587},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1522292909588},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1522292909588},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1522292909589},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1522292909589},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1522292909590},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1522292909590},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1522292909592},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1522292909751},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1522292909751},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1522292909751},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1522292909752},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1522292909752},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1522292909753},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1522292909753},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1522292909754},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1522292909755},{"_id":"themes/next/source/404.html","hash":"3dd6ca92a4fedcdcffd4a4bd4a573d39338724cc","modified":1522295981991},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1522292910359},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1522292910369},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1522292910359},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522292910014},{"_id":"source/_posts/web-cache-basic-kb/CacheCategory.png","hash":"f4b161b630e6459a6693799c5e0b24faccad8233","modified":1523354320149},{"_id":"source/_posts/web-cache-basic-kb/RequestCacheFlow.png","hash":"0f471929b52bb025498ffaed9c214db2961bb400","modified":1523354440861},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1522292889394},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1522292889394},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1522292889404},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1522292889410},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1522292889417},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1522292889438},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1522292889449},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1522292889443},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1522292889457},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1522292889456},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1522292889456},{"_id":"themes/next/.git/logs/HEAD","hash":"4d994c30cdeb710159891479d5a8a02ccc6b74b5","modified":1522292909383},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1522292889457},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1522292909591},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1522292909592},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1522292909593},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1522292909594},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1522292909605},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1522292909593},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1522292909605},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1522292909606},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1522292909606},{"_id":"themes/next/layout/_partials/footer.swig","hash":"00e8b3eee5e32cc71ba9fecfed2051843edc409b","modified":1522308893340},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1522292909624},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1522292909625},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1522292909626},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1522292909626},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1522292909626},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1522292909643},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1522292909643},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1522292909646},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1522292909720},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1522292909721},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1522292909722},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1522292909721},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1522292909722},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1522292909722},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1522292909720},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1522292909756},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1522292909756},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1522292909756},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1522292909757},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1522292909769},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1522292909778},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1522292909779},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1522292909780},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1522292909780},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1522292910013},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1522292910020},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1522292910021},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1522292910021},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1522292910052},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1522292910067},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1522292910071},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1522292910075},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1522292910075},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1522292910076},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1522292910076},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1522292910076},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1522292910077},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522292910077},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1522292910077},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1522292910077},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1522292910088},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1522292910082},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1522292910089},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522292909645},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522292909645},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522292909921},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522292909920},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522292909925},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522292909977},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1522292909999},{"_id":"source/_posts/web-cache-basic-kb/HTTPCachtType.png","hash":"0bb90efd6d78c036127e79ae3801c0626ff3b69e","modified":1523341996422},{"_id":"source/_posts/web-cache-basic-kb/HTTPVary.png","hash":"4846b6c7f3f0e847ebbfa4faf194c79f1b21dad2","modified":1523342020756},{"_id":"themes/next/.git/refs/heads/master","hash":"8d68aab3ed0ae7f4d76d6a1708ac38ba9c2e121d","modified":1522292909383},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1522292909625},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1522292909625},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1522292909626},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1522292909627},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1522292909627},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1522292909629},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1522292909629},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1522292909630},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1522292909641},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1522292909645},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1522292909645},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1522292909644},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1522292909647},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1522292909647},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1522292909654},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1522292909657},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1522292909658},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1522292909658},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1522292909658},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1522292909661},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1522292909661},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1522292909662},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1522292909662},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1522292909662},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1522292909663},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1522292909663},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1522292909664},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1522292909665},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1522292909689},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1522292909701},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1522292909706},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1522292909707},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1522292909708},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1522292909708},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1522292909724},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1522292909725},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1522292909743},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1522292909750},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1522292909920},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1522292909920},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1522292909924},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1522292909924},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1522292909976},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1522292909991},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1522292909977},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1522292909997},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1522292910090},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1522292910090},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1522292910091},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1522292910091},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1522292910096},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1522292910096},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1522292910097},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1522292910097},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1522292910098},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1522292910099},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1522292910099},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1522292910124},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1522292910130},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1522292910139},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1522292910140},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1522292910141},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1522292910178},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1522292910179},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1522292910184},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1522292910179},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1522292910186},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1522292910186},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1522292910207},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1522292910208},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1522292910209},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1522292910251},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1522292910253},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1522292910253},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1522292910253},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1522292910264},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1522292910265},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1522292910264},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1522292910266},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1522292910266},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1522292910282},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1522292910285},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1522292910285},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1522292910300},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1522292910301},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1522292910301},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1522292910301},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1522292910302},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1522292910302},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1522292910302},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1522292910302},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1522292910307},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1522292910308},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1522292910309},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1522292910310},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1522292910311},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1522292910311},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1522292910312},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1522292910338},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1522292910338},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1522292910348},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1522292910349},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1522292910350},{"_id":"source/_posts/web-cache-basic-kb/HTTPStaleness.png","hash":"8e3019d086fe9f0c873ffaa88c294294faa66966","modified":1523341914742},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1522292910252},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"4d994c30cdeb710159891479d5a8a02ccc6b74b5","modified":1522292909384},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1522292909380},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1522292909723},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1522292909724},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1522292909781},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1522292909781},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1522292909791},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1522292909791},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1522292909791},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1522292909832},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1522292909874},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1522292909895},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1522292909896},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1522292909896},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1522292909910},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1522292909918},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1522292909918},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1522292909918},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1522292909926},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1522292909926},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1522292909926},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1522292909927},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1522292909928},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1522292909928},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1522292909928},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1522292909928},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1522292909930},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1522292909930},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1522292909940},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1522292909930},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1522292909941},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1522292909943},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1522292909942},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1522292909943},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1522292909975},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1522292909976},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1522292909975},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1522292910098},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1522292910111},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1522292910114},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1522292910123},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1522292910142},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1522292910142},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1522292910143},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1522292910163},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1522292910164},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1522292910164},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1522292910176},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1522292910177},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1522292910178},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1522292910185},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1522292910185},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1522292910211},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1522292910221},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1522292910213},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1522292910337},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1522292910337},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1522292910113},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1522292910249},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1522292910250},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1522292910341},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"4d994c30cdeb710159891479d5a8a02ccc6b74b5","modified":1522292909380},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1522292909792},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1522292909792},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1522292909792},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1522292909792},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1522292909814},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1522292909813},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1522292909814},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1522292909815},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1522292909824},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1522292909824},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1522292909825},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1522292909825},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1522292909831},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1522292909832},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1522292909833},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1522292909833},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1522292909843},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1522292909847},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1522292909849},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1522292909850},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1522292909850},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1522292909851},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1522292909851},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1522292909851},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1522292909851},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1522292909852},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1522292909852},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1522292909853},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1522292909853},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1522292909854},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1522292909855},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1522292909870},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1522292909871},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1522292909871},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1522292909871},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1522292909872},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1522292909872},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1522292909873},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1522292909873},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1522292909874},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1522292909874},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1522292909875},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1522292909883},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1522292909883},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1522292909884},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1522292909884},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1522292909884},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1522292909885},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1522292909885},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1522292909886},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1522292909892},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1522292909893},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1522292909894},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1522292909894},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1522292909894},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1522292909894},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1522292909895},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1522292909895},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1522292909929},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1522292909929},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1522292909942},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1522292910101},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1522292910101},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1522292910102},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1522292910109},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1522292910110},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1522292910166},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1522292910174},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1522292910166},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1522292910175},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1522292910175},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1522292910176},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1522292910224},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1522292910227},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1522292910248},{"_id":"themes/next/.git/objects/pack/pack-51967753317bedea8461bdedf22fa18c2e29e9b6.idx","hash":"dd84de0e53b0a8ebe508be9cdf4189ba70edd49a","modified":1522292907911},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1522292910129},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1522292910336},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1522292910245},{"_id":"source/_images/avatar.png","hash":"79785761095ba09c54f66ba48022ab508f6df468","modified":1522924564322},{"_id":"themes/next/source/images/avatar.png","hash":"79785761095ba09c54f66ba48022ab508f6df468","modified":1522638514943},{"_id":"themes/next/source/uploads/avatar.png","hash":"79785761095ba09c54f66ba48022ab508f6df468","modified":1522638514943},{"_id":"themes/next/.git/objects/pack/pack-51967753317bedea8461bdedf22fa18c2e29e9b6.pack","hash":"b5c2beff558f49522189b3384d4a61c015da542b","modified":1522292909061},{"_id":"public/atom.xml","hash":"95fd9bd228c4d9276a0bb48fdc26cbd37e1dc8b2","modified":1527733412441},{"_id":"public/search.xml","hash":"697bf0d85c7257ba0acde43251e6af23d2ae6584","modified":1527733412470},{"_id":"public/sitemap.xml","hash":"023083e520b013539563591b521664f234c4b6c9","modified":1527733412472},{"_id":"public/categories/index.html","hash":"38451d2e5060b1b0b9ba5834cb53238f789db0be","modified":1527733412705},{"_id":"public/tags/index.html","hash":"fd07521d0b3c76d12519ea60f676feb2e85139f7","modified":1527733412707},{"_id":"public/2018/05/14/dns-tunnel/index.html","hash":"48ab1b7dc48b6fad35db4e2be8c96c5b476703e1","modified":1527733412707},{"_id":"public/2018/05/08/arp-protocol/index.html","hash":"718b7ccba621495c340c3e34e92674864d05aadd","modified":1527733412707},{"_id":"public/2018/05/02/web-security-learning/index.html","hash":"f1b94b84678747d178fd9e0509404ef465d2260e","modified":1527733412707},{"_id":"public/2018/05/02/VMware-security/index.html","hash":"b5f6f899e116a738ca95c37f3e9947d3fa6ce823","modified":1527733412707},{"_id":"public/2018/04/28/Over-The-Great-Wall/index.html","hash":"92b307b41636dda8fea2774f718ba99f4f8a77b2","modified":1527733412707},{"_id":"public/2018/04/24/base64/index.html","hash":"99fa712464eadfbc7ff9c99d5a3a34340e91a8ce","modified":1527733412707},{"_id":"public/2018/04/23/encoding/index.html","hash":"7662bcd95b54a165130f280402a828831d468898","modified":1527733412707},{"_id":"public/2018/04/12/ICMP-Redirect-Attack/index.html","hash":"bcbadc00cc61dee116ff9ab004724be13f119dca","modified":1527733412708},{"_id":"public/2018/04/10/web-cache-basic-kb/index.html","hash":"fe83871dd26e06c7057972e2135bc4e0229920f2","modified":1527733412708},{"_id":"public/2018/04/05/Hexo-Learning/index.html","hash":"7b15242a1b59d7158e23492a0f2f16eb2accafe6","modified":1527733412708},{"_id":"public/2018/04/05/Git-Learning/index.html","hash":"ca8e5c2b35a600a3027233f2c96d3d17558c2a7c","modified":1527733412708},{"_id":"public/2018/03/30/tech-blog/index.html","hash":"cc645914d46c5098186085249f523802cc5bf1d3","modified":1527733412708},{"_id":"public/2018/03/27/post-picture/index.html","hash":"a156a4106d09c73a89cfd8c7474c8d52b4e194ab","modified":1527733412708},{"_id":"public/2018/03/29/markdown/index.html","hash":"73ca2fb7ab3c7d70521a3d5c998f13cba52ca575","modified":1527733412708},{"_id":"public/2018/03/15/boyhood/index.html","hash":"afc1e58c0e3dbf90679bdb00d444847a301cacbc","modified":1527733412708},{"_id":"public/2018/03/15/hello-world/index.html","hash":"808dcb2412daf2eed39bc45d61dc451f28a9a728","modified":1527733412709},{"_id":"public/categories/blog/index.html","hash":"0341335430233a1df0f948bd596c8e2fae56e589","modified":1527733412710},{"_id":"public/categories/security/index.html","hash":"96cc62032b121713870154ffb4ab73c28ed3b925","modified":1527733412711},{"_id":"public/categories/linux/index.html","hash":"bf474dd9e03dbb0c4446ca94190d3c6d873dd20d","modified":1527733412711},{"_id":"public/categories/tool/index.html","hash":"9b4fa6963e2ee112993835ec013d89d3bcc88045","modified":1527733412711},{"_id":"public/categories/security/linux/index.html","hash":"4a480a01b3f031f50f3f668de1c1fd6d531c0d3d","modified":1527733412711},{"_id":"public/categories/network/index.html","hash":"17e6cbcedc370592cd6f700d21fa5d24f1700c80","modified":1527733412711},{"_id":"public/categories/encode/index.html","hash":"3efb52192973f52fd23a13d229fe0440821bdd02","modified":1527733412711},{"_id":"public/categories/security/network/index.html","hash":"fb16f0823b287390d9ead3e4c35e98d6436038fc","modified":1527733412711},{"_id":"public/categories/film/index.html","hash":"fda2753fe63c9b2fba8dc0af4e6c65d3598bff67","modified":1527733412711},{"_id":"public/categories/linux/command/index.html","hash":"64229684d46f4e86705e52b2993f32fd39b2b58c","modified":1527733412712},{"_id":"public/categories/security/vmware/index.html","hash":"e70808fce5d534ef84b20c135dc20e267d1c3b42","modified":1527733412712},{"_id":"public/categories/web/index.html","hash":"60eca0eecbea35615db5e7e2ff951f3dbe9affa7","modified":1527733412712},{"_id":"public/archives/index.html","hash":"34654bdff7310dd6263bac97378a17ece1c9c8a8","modified":1527733412709},{"_id":"public/archives/page/3/index.html","hash":"5089a1e0ad22f271bb78aaee058c76d09635a366","modified":1527733412709},{"_id":"public/archives/page/2/index.html","hash":"774f45b45ac803eaf8f5fedd6321e3834dd97b88","modified":1527733412709},{"_id":"public/archives/2018/index.html","hash":"66314fb63671537da99059986f5ae98a84a7ca1f","modified":1527733412709},{"_id":"public/archives/page/4/index.html","hash":"8d2ad135d579b2fc0baadbb0702d8a51c96efcac","modified":1527733412709},{"_id":"public/archives/2018/page/2/index.html","hash":"b4fa9a2925276fcf22357261bf60c2e490fa3aa5","modified":1527733412709},{"_id":"public/archives/2018/page/3/index.html","hash":"79662120be527ce0832a9b152cb0a3cd8d3f5def","modified":1527733412709},{"_id":"public/archives/2018/page/4/index.html","hash":"e3b77052ee5f6f77ec1f13997981822ea3d60173","modified":1527733412709},{"_id":"public/archives/2018/03/index.html","hash":"c2bb433b9aa56a68f03aa8d2663b6fc528ee095f","modified":1527733412710},{"_id":"public/archives/2018/04/index.html","hash":"72e80b473e3d904233aff4914b442574528bf3e6","modified":1527733412710},{"_id":"public/archives/2018/04/page/2/index.html","hash":"da9805542e7b8cbcda75d20ccda6689c0ca64f26","modified":1527733412710},{"_id":"public/index.html","hash":"f62641fe18b56ddacf67507e0d0d5238498ffc96","modified":1527733412712},{"_id":"public/archives/2018/05/index.html","hash":"1dd4bbbd0071400a08e103f6de741525106aa6ea","modified":1527733412710},{"_id":"public/page/2/index.html","hash":"4c75b85fabb7dbcc4237aebf2f452b8bd4801118","modified":1527733412712},{"_id":"public/page/3/index.html","hash":"761f3da63be3a8766dfe965545d20d34980845ca","modified":1527733412712},{"_id":"public/tags/blog/index.html","hash":"696c27c12ba5466abe9cc808861fcb0c4c58b136","modified":1527733412713},{"_id":"public/tags/linux/index.html","hash":"74f47196a1926a1ee0f3b5034ddbc11f84b09ad8","modified":1527733412713},{"_id":"public/tags/git/index.html","hash":"df8a86ea1df752aa426dd1e5acbbdbf0c838912d","modified":1527733412713},{"_id":"public/tags/route/index.html","hash":"f64fff5002311902b96d03f0819bda418515737a","modified":1527733412713},{"_id":"public/tags/security/index.html","hash":"09125cf670570f6456f5f64bebddff8ef05cd79e","modified":1527733412713},{"_id":"public/tags/hexo/index.html","hash":"7039a4e781f01c6d18bd3de8191396ffeeb6c97a","modified":1527733412713},{"_id":"public/tags/vmware/index.html","hash":"1974dd99399b4a645f5157dcb8ce6ebfbe767011","modified":1527733412713},{"_id":"public/tags/tool/index.html","hash":"9d0e8d0b6f3fb80b81b1e3cdabbfb1a12cf2d6c4","modified":1527733412713},{"_id":"public/tags/network/index.html","hash":"b32b69f01f8ef1e029ff13d77fcced3736969549","modified":1527733412714},{"_id":"public/tags/encode/index.html","hash":"f72a7f6817c86c5f2889a5178c74ed43d3d7708c","modified":1527733412714},{"_id":"public/tags/dns/index.html","hash":"4eccd6af258998fcd46d7d60d74c11aeef3582c8","modified":1527733412714},{"_id":"public/tags/film/index.html","hash":"ca699fcbd7ddec751c955bc37bd26f6407166a5e","modified":1527733412714},{"_id":"public/tags/HTML/index.html","hash":"b5733d612cb6ef245a0f99ce12a1ce567d4cbf10","modified":1527733412714},{"_id":"public/tags/markdown/index.html","hash":"98383d8120b36a791116a1feca3b2cba2ca2fc53","modified":1527733412714},{"_id":"public/tags/github/index.html","hash":"29cb442746f800b19e1aa2f10af7410cf4c88c26","modified":1527733412714},{"_id":"public/tags/web/index.html","hash":"545026a9aa36f1ee5fe1f1047d84281e8363a7ec","modified":1527733412715},{"_id":"public/tags/cache/index.html","hash":"f6ce676876e40a37957143672a76bba76770bb80","modified":1527733412715},{"_id":"public/2018/05/31/training-skill/index.html","hash":"285ff41d4f488b549cc0a9dcdacbdef72bee992c","modified":1527732842034},{"_id":"public/tags/HTTP/index.html","hash":"6cc69d624a38f944a4657361b997514b9d9cd0b9","modified":1527733412715},{"_id":"public/2018/04/11/Linux-look-for-route-table/index.html","hash":"38df82ce7619d9389141103daf89b52f71465ba2","modified":1527733412708},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1527732842049},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1527732842049},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1527732842050},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1527732842050},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1527732842050},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1527732842050},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1527732842050},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1527732842050},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1527732842050},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1527732842050},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1527732842050},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527732842050},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1527732842051},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1527732842051},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1527732842051},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527732842051},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1527732842051},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1527732842051},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1527732842051},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1527732842051},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1527732842051},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1527732842052},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1527732842052},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1527732842052},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1527732842052},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1527732842052},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1527732842052},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1527732842052},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1527732842053},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1527732842053},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1527732842053},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1527732842053},{"_id":"public/2018/04/10/web-cache-basic-kb/CacheCategory.png","hash":"f4b161b630e6459a6693799c5e0b24faccad8233","modified":1527732842053},{"_id":"public/2018/04/10/web-cache-basic-kb/RequestCacheFlow.png","hash":"0f471929b52bb025498ffaed9c214db2961bb400","modified":1527732842053},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1527732842054},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1527732842978},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1527732842993},{"_id":"public/404.html","hash":"11e8e62c08c2c7350c81e96c1bd0db05718970af","modified":1527732843022},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1527732843022},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1527732843022},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1527732843022},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1527732843022},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1527732843022},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1527732843023},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1527732843023},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1527732843023},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1527732843023},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1527732843023},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1527732843023},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1527732843023},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1527732843023},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1527732843024},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1527732843024},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1527732843024},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1527732843024},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1527732843024},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1527732843024},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1527732843024},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1527732843024},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1527732843024},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1527732843025},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1527732843025},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1527732843025},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1527732843025},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1527732843025},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1527732843025},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1527732843025},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1527732843025},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1527732843026},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1527732843026},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1527732843026},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1527732843026},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1527732843026},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1527732843026},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1527732843026},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1527732843026},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1527732843026},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1527732843027},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1527732843027},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1527732843027},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1527732843027},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1527732843027},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1527732843027},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1527732843027},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1527732843027},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1527732843027},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1527732843028},{"_id":"public/css/main.css","hash":"98222828e9d51cc6abfdce1cd9c0d394f28c80e2","modified":1527732843028},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1527732843028},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1527732843028},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1527732843028},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1527732843028},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1527732843028},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1527732843028},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1527732843028},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1527732843029},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1527732843029},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1527732843029},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1527732843029},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1527732843029},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1527732843029},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1527732843030},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1527732843030},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1527732843030},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1527732843030},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1527732843030},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1527732843031},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1527732843031},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1527732843031},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1527732843032},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1527732843032},{"_id":"public/2018/04/10/web-cache-basic-kb/HTTPVary.png","hash":"4846b6c7f3f0e847ebbfa4faf194c79f1b21dad2","modified":1527732843032},{"_id":"public/2018/04/10/web-cache-basic-kb/HTTPCachtType.png","hash":"0bb90efd6d78c036127e79ae3801c0626ff3b69e","modified":1527732843033},{"_id":"public/2018/04/10/web-cache-basic-kb/HTTPStaleness.png","hash":"8e3019d086fe9f0c873ffaa88c294294faa66966","modified":1527732843041},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1527732843084},{"_id":"public/images/avatar.png","hash":"79785761095ba09c54f66ba48022ab508f6df468","modified":1527732843103},{"_id":"public/uploads/avatar.png","hash":"79785761095ba09c54f66ba48022ab508f6df468","modified":1527732843106},{"_id":"public/2018/05/22/training-skill/index.html","hash":"d0300595b52fc0d535ffc59ab6e1156bcc79681b","modified":1527733412716},{"_id":"public/categories/training/index.html","hash":"1fcf7e37d787c6837b9fe0ded9cf11db84c865b2","modified":1527733412716},{"_id":"public/tags/training/index.html","hash":"a769ffe3ff14d19f75f20ed664aab1fce1ab033f","modified":1527733412717}],"Category":[{"name":"blog","_id":"cjhtwonsg0004wgl1edc553kx"},{"name":"security","_id":"cjhtwonsr0009wgl1ysffuq3y"},{"name":"linux","_id":"cjhtwonte000kwgl12woeatnc"},{"name":"tool","_id":"cjhtwontt000twgl19t9uju3h"},{"name":"linux","parent":"cjhtwonsr0009wgl1ysffuq3y","_id":"cjhtwonu0000zwgl1n016owhm"},{"name":"network","_id":"cjhtwonu80019wgl1n43hgj9f"},{"name":"encode","_id":"cjhtwonuf001fwgl1lhqef33j"},{"name":"network","parent":"cjhtwonsr0009wgl1ysffuq3y","_id":"cjhtwonui001kwgl1ezqlfi8m"},{"name":"film","_id":"cjhtwonul001pwgl1sgqe5gsw"},{"name":"command","parent":"cjhtwonte000kwgl12woeatnc","_id":"cjhtwonun001swgl1gfmqcqyb"},{"name":"vmware","parent":"cjhtwonsr0009wgl1ysffuq3y","_id":"cjhtwonus0021wgl1v2ldyxx2"},{"name":"web","_id":"cjhtwonuw002awgl1iivsw12d"},{"name":"training","_id":"cjhtx0wbt000060l1rnbjxdu2"}],"Data":[],"Page":[{"title":"categories","date":"2018-04-03T07:47:45.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-04-03 15:47:45\ntype: \"categories\"\n---\n","updated":"2018-04-05T10:36:04.353Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjhtwonrx0000wgl12ysnoayr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-04-03T07:41:50.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-04-03 15:41:50\ntype: \"tags\"\n---\n","updated":"2018-04-05T10:36:04.354Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjhtwons80002wgl14d6fx3mr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git Learning","date":"2018-04-05T08:46:15.000Z","_content":"\n### reopsitory\n库，最基本的概念,需要做版本控制的目录或文件的集合都会保存在一个Repo中，通过Git命令可以看到每一个之前修改过的版本。\n\nlocal Repo与Remote Repo可以建立映射关系\nlocal repository <<====>> remote repository\n\n目录c:/user/admin/git/下文件加入到Repo后后，local file可以与remote file可以形成相互备份关系。 \nlocal directory(c:/user/admin/git/*) <<====>> https://github.com/username/repository  \n\n\n### Branch\n分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。\n\n如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！\n{% img \"multiple world\" /2018/04/05/Git-Learning/multiple-world.png %}\n\n### Github\n\n{% img \"diagram of Repository\" /2018/04/05/Git-Learning/repository.png %}\n\n### Useful Command\n#### 初始化 repo\n    admin@admin-PC MINGW64 ~   \n    $ mkdir git  \n    $ cd git  \n    $ pwd  \n    /c/Users/admin/git  \n    $ git init   \n\n#### 添加到版本控制\n\t$ git add README.txt  \n\t$ git commit -m \"discript what have done in files\" //提交确认修改`\n\n为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件\n{% img \"work around\" /2018/04/05/Git-Learning/workround.png %}\n\n#### 查看git状态\n\t$ git status \n\n#### 查看修改的内容\n\t$ git diff file \n\n\n#### 查看commit log\n\t$ git log \t\t\n很明显这查看表示历史修改版本记录，最主要是看commit id。\n\n#### reset到指定的版本\n\t$ git reset --hard HEAD^ \n表示回退， 至于HEAD主要是与commit id映射，HEAD^表示上一个版本，HEAD~100，表示上100版本！这个鬼记得往上100个版本做了什么... 当然也可以直接写commit id， 更深的理解，commit id保存所有历史版本，**HEAD只是一个指针**。\n\n\n#### reform log\n\t$ git reflog \n这个做什么呢，记录commit id - HEAD - actions的映射关系。方便吃后悔药。\n\n\t$ git reflog\n\ta944eee (HEAD -> master) HEAD@{0}: commit: vertion 2: added time.\n\tbe90283 HEAD@{1}: commit (initial): edit the readme file\n\n#### checkout\n\t$ git checkout -- file   \n只要没有把版本推送到远程库，一切误操作都可以清除。包括是git reset HEAD file。\n\n####remove file\n\n\t$ git rm file \n删除文件，误删除怎么办，上一步刚说过，checkout\n\n#### remote repository\nGit的天敌是SVN，不过SVN已经在沙滩上了，Git是怎么做到的？ K.O技能：remote repository。 Now，请注册一个Github账号---完全免费共享的remote repository。如果有秘密项目，那么可以自己搭建一个git server。\n\n\t$ git remote add origin git@github.com:username/repository   //添加remote git库\n\t$ git remote add origin  https://github.com/username/repositor \t//另一种方式添加remote repo\n\n#### push\n\t$ git push -u origin master \t//将本地库推送到remote\n\n#### clone\n\t$ git clone git@github.com:username/repository \t\t//同步remote库到本地，通过SSH协议\n\t$ git clone https://github.com/username/repository \t\t//通过https协议\n\n#### swich branch\n\t$ git checkout -b branchname \t\t\n创建并切换分支。相当于\n\t$ git branch branchname\n\t$ git checkout branchname\n\n#### check branch\n\t$ git branch\n#### merge branch\n\t$ git merge branchname (--no-ff)\n合并branch，no off 表示关闭fast forward模式，将命令中的branch merge到当前workaround的branch。\n\n#### delete branch\n\t$ git branch -d branchname\n\n### Git learning review\n廖雪峰最简单易懂Git学习[Git Learning](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)\n","source":"_posts/Git-Learning.md","raw":"---\ntitle: Git Learning\ndate: 2018-04-05 16:46:15\ntags:\n\t- blog\n\t- git\ncategory:\n\t- blog\n---\n\n### reopsitory\n库，最基本的概念,需要做版本控制的目录或文件的集合都会保存在一个Repo中，通过Git命令可以看到每一个之前修改过的版本。\n\nlocal Repo与Remote Repo可以建立映射关系\nlocal repository <<====>> remote repository\n\n目录c:/user/admin/git/下文件加入到Repo后后，local file可以与remote file可以形成相互备份关系。 \nlocal directory(c:/user/admin/git/*) <<====>> https://github.com/username/repository  \n\n\n### Branch\n分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。\n\n如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！\n{% img \"multiple world\" /2018/04/05/Git-Learning/multiple-world.png %}\n\n### Github\n\n{% img \"diagram of Repository\" /2018/04/05/Git-Learning/repository.png %}\n\n### Useful Command\n#### 初始化 repo\n    admin@admin-PC MINGW64 ~   \n    $ mkdir git  \n    $ cd git  \n    $ pwd  \n    /c/Users/admin/git  \n    $ git init   \n\n#### 添加到版本控制\n\t$ git add README.txt  \n\t$ git commit -m \"discript what have done in files\" //提交确认修改`\n\n为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件\n{% img \"work around\" /2018/04/05/Git-Learning/workround.png %}\n\n#### 查看git状态\n\t$ git status \n\n#### 查看修改的内容\n\t$ git diff file \n\n\n#### 查看commit log\n\t$ git log \t\t\n很明显这查看表示历史修改版本记录，最主要是看commit id。\n\n#### reset到指定的版本\n\t$ git reset --hard HEAD^ \n表示回退， 至于HEAD主要是与commit id映射，HEAD^表示上一个版本，HEAD~100，表示上100版本！这个鬼记得往上100个版本做了什么... 当然也可以直接写commit id， 更深的理解，commit id保存所有历史版本，**HEAD只是一个指针**。\n\n\n#### reform log\n\t$ git reflog \n这个做什么呢，记录commit id - HEAD - actions的映射关系。方便吃后悔药。\n\n\t$ git reflog\n\ta944eee (HEAD -> master) HEAD@{0}: commit: vertion 2: added time.\n\tbe90283 HEAD@{1}: commit (initial): edit the readme file\n\n#### checkout\n\t$ git checkout -- file   \n只要没有把版本推送到远程库，一切误操作都可以清除。包括是git reset HEAD file。\n\n####remove file\n\n\t$ git rm file \n删除文件，误删除怎么办，上一步刚说过，checkout\n\n#### remote repository\nGit的天敌是SVN，不过SVN已经在沙滩上了，Git是怎么做到的？ K.O技能：remote repository。 Now，请注册一个Github账号---完全免费共享的remote repository。如果有秘密项目，那么可以自己搭建一个git server。\n\n\t$ git remote add origin git@github.com:username/repository   //添加remote git库\n\t$ git remote add origin  https://github.com/username/repositor \t//另一种方式添加remote repo\n\n#### push\n\t$ git push -u origin master \t//将本地库推送到remote\n\n#### clone\n\t$ git clone git@github.com:username/repository \t\t//同步remote库到本地，通过SSH协议\n\t$ git clone https://github.com/username/repository \t\t//通过https协议\n\n#### swich branch\n\t$ git checkout -b branchname \t\t\n创建并切换分支。相当于\n\t$ git branch branchname\n\t$ git checkout branchname\n\n#### check branch\n\t$ git branch\n#### merge branch\n\t$ git merge branchname (--no-ff)\n合并branch，no off 表示关闭fast forward模式，将命令中的branch merge到当前workaround的branch。\n\n#### delete branch\n\t$ git branch -d branchname\n\n### Git learning review\n廖雪峰最简单易懂Git学习[Git Learning](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)\n","slug":"Git-Learning","published":1,"updated":"2018-04-05T10:36:04.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwons10001wgl1yzojyaz1","content":"<h3 id=\"reopsitory\"><a href=\"#reopsitory\" class=\"headerlink\" title=\"reopsitory\"></a>reopsitory</h3><p>库，最基本的概念,需要做版本控制的目录或文件的集合都会保存在一个Repo中，通过Git命令可以看到每一个之前修改过的版本。</p>\n<p>local Repo与Remote Repo可以建立映射关系<br>local repository &lt;&lt;====&gt;&gt; remote repository</p>\n<p>目录c:/user/admin/git/下文件加入到Repo后后，local file可以与remote file可以形成相互备份关系。<br>local directory(c:/user/admin/git/*) &lt;&lt;====&gt;&gt; <a href=\"https://github.com/username/repository\" target=\"_blank\" rel=\"noopener\">https://github.com/username/repository</a>  </p>\n<h3 id=\"Branch\"><a href=\"#Branch\" class=\"headerlink\" title=\"Branch\"></a>Branch</h3><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p>\n<p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！<br><img src=\"/2018/04/05/Git-Learning/multiple-world.png\" class=\"multiple world\"></p>\n<h3 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h3><img src=\"/2018/04/05/Git-Learning/repository.png\" class=\"diagram of Repository\">\n<h3 id=\"Useful-Command\"><a href=\"#Useful-Command\" class=\"headerlink\" title=\"Useful Command\"></a>Useful Command</h3><h4 id=\"初始化-repo\"><a href=\"#初始化-repo\" class=\"headerlink\" title=\"初始化 repo\"></a>初始化 repo</h4><pre><code>admin@admin-PC MINGW64 ~   \n$ mkdir git  \n$ cd git  \n$ pwd  \n/c/Users/admin/git  \n$ git init   \n</code></pre><h4 id=\"添加到版本控制\"><a href=\"#添加到版本控制\" class=\"headerlink\" title=\"添加到版本控制\"></a>添加到版本控制</h4><pre><code>$ git add README.txt  \n$ git commit -m &quot;discript what have done in files&quot; //提交确认修改`\n</code></pre><p>为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件<br><img src=\"/2018/04/05/Git-Learning/workround.png\" class=\"work around\"></p>\n<h4 id=\"查看git状态\"><a href=\"#查看git状态\" class=\"headerlink\" title=\"查看git状态\"></a>查看git状态</h4><pre><code>$ git status \n</code></pre><h4 id=\"查看修改的内容\"><a href=\"#查看修改的内容\" class=\"headerlink\" title=\"查看修改的内容\"></a>查看修改的内容</h4><pre><code>$ git diff file \n</code></pre><h4 id=\"查看commit-log\"><a href=\"#查看commit-log\" class=\"headerlink\" title=\"查看commit log\"></a>查看commit log</h4><pre><code>$ git log         \n</code></pre><p>很明显这查看表示历史修改版本记录，最主要是看commit id。</p>\n<h4 id=\"reset到指定的版本\"><a href=\"#reset到指定的版本\" class=\"headerlink\" title=\"reset到指定的版本\"></a>reset到指定的版本</h4><pre><code>$ git reset --hard HEAD^ \n</code></pre><p>表示回退， 至于HEAD主要是与commit id映射，HEAD^表示上一个版本，HEAD~100，表示上100版本！这个鬼记得往上100个版本做了什么… 当然也可以直接写commit id， 更深的理解，commit id保存所有历史版本，<strong>HEAD只是一个指针</strong>。</p>\n<h4 id=\"reform-log\"><a href=\"#reform-log\" class=\"headerlink\" title=\"reform log\"></a>reform log</h4><pre><code>$ git reflog \n</code></pre><p>这个做什么呢，记录commit id - HEAD - actions的映射关系。方便吃后悔药。</p>\n<pre><code>$ git reflog\na944eee (HEAD -&gt; master) HEAD@{0}: commit: vertion 2: added time.\nbe90283 HEAD@{1}: commit (initial): edit the readme file\n</code></pre><h4 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h4><pre><code>$ git checkout -- file   \n</code></pre><p>只要没有把版本推送到远程库，一切误操作都可以清除。包括是git reset HEAD file。</p>\n<p>####remove file</p>\n<pre><code>$ git rm file \n</code></pre><p>删除文件，误删除怎么办，上一步刚说过，checkout</p>\n<h4 id=\"remote-repository\"><a href=\"#remote-repository\" class=\"headerlink\" title=\"remote repository\"></a>remote repository</h4><p>Git的天敌是SVN，不过SVN已经在沙滩上了，Git是怎么做到的？ K.O技能：remote repository。 Now，请注册一个Github账号—完全免费共享的remote repository。如果有秘密项目，那么可以自己搭建一个git server。</p>\n<pre><code>$ git remote add origin git@github.com:username/repository   //添加remote git库\n$ git remote add origin  https://github.com/username/repositor     //另一种方式添加remote repo\n</code></pre><h4 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h4><pre><code>$ git push -u origin master     //将本地库推送到remote\n</code></pre><h4 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a>clone</h4><pre><code>$ git clone git@github.com:username/repository         //同步remote库到本地，通过SSH协议\n$ git clone https://github.com/username/repository         //通过https协议\n</code></pre><h4 id=\"swich-branch\"><a href=\"#swich-branch\" class=\"headerlink\" title=\"swich branch\"></a>swich branch</h4><pre><code>$ git checkout -b branchname         \n</code></pre><p>创建并切换分支。相当于<br>    $ git branch branchname<br>    $ git checkout branchname</p>\n<h4 id=\"check-branch\"><a href=\"#check-branch\" class=\"headerlink\" title=\"check branch\"></a>check branch</h4><pre><code>$ git branch\n</code></pre><h4 id=\"merge-branch\"><a href=\"#merge-branch\" class=\"headerlink\" title=\"merge branch\"></a>merge branch</h4><pre><code>$ git merge branchname (--no-ff)\n</code></pre><p>合并branch，no off 表示关闭fast forward模式，将命令中的branch merge到当前workaround的branch。</p>\n<h4 id=\"delete-branch\"><a href=\"#delete-branch\" class=\"headerlink\" title=\"delete branch\"></a>delete branch</h4><pre><code>$ git branch -d branchname\n</code></pre><h3 id=\"Git-learning-review\"><a href=\"#Git-learning-review\" class=\"headerlink\" title=\"Git learning review\"></a>Git learning review</h3><p>廖雪峰最简单易懂Git学习<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/\" target=\"_blank\" rel=\"noopener\">Git Learning</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"reopsitory\"><a href=\"#reopsitory\" class=\"headerlink\" title=\"reopsitory\"></a>reopsitory</h3><p>库，最基本的概念,需要做版本控制的目录或文件的集合都会保存在一个Repo中，通过Git命令可以看到每一个之前修改过的版本。</p>\n<p>local Repo与Remote Repo可以建立映射关系<br>local repository &lt;&lt;====&gt;&gt; remote repository</p>\n<p>目录c:/user/admin/git/下文件加入到Repo后后，local file可以与remote file可以形成相互备份关系。<br>local directory(c:/user/admin/git/*) &lt;&lt;====&gt;&gt; <a href=\"https://github.com/username/repository\" target=\"_blank\" rel=\"noopener\">https://github.com/username/repository</a>  </p>\n<h3 id=\"Branch\"><a href=\"#Branch\" class=\"headerlink\" title=\"Branch\"></a>Branch</h3><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。</p>\n<p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN！<br><img src=\"/2018/04/05/Git-Learning/multiple-world.png\" class=\"multiple world\"></p>\n<h3 id=\"Github\"><a href=\"#Github\" class=\"headerlink\" title=\"Github\"></a>Github</h3><img src=\"/2018/04/05/Git-Learning/repository.png\" class=\"diagram of Repository\">\n<h3 id=\"Useful-Command\"><a href=\"#Useful-Command\" class=\"headerlink\" title=\"Useful Command\"></a>Useful Command</h3><h4 id=\"初始化-repo\"><a href=\"#初始化-repo\" class=\"headerlink\" title=\"初始化 repo\"></a>初始化 repo</h4><pre><code>admin@admin-PC MINGW64 ~   \n$ mkdir git  \n$ cd git  \n$ pwd  \n/c/Users/admin/git  \n$ git init   \n</code></pre><h4 id=\"添加到版本控制\"><a href=\"#添加到版本控制\" class=\"headerlink\" title=\"添加到版本控制\"></a>添加到版本控制</h4><pre><code>$ git add README.txt  \n$ git commit -m &quot;discript what have done in files&quot; //提交确认修改`\n</code></pre><p>为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件<br><img src=\"/2018/04/05/Git-Learning/workround.png\" class=\"work around\"></p>\n<h4 id=\"查看git状态\"><a href=\"#查看git状态\" class=\"headerlink\" title=\"查看git状态\"></a>查看git状态</h4><pre><code>$ git status \n</code></pre><h4 id=\"查看修改的内容\"><a href=\"#查看修改的内容\" class=\"headerlink\" title=\"查看修改的内容\"></a>查看修改的内容</h4><pre><code>$ git diff file \n</code></pre><h4 id=\"查看commit-log\"><a href=\"#查看commit-log\" class=\"headerlink\" title=\"查看commit log\"></a>查看commit log</h4><pre><code>$ git log         \n</code></pre><p>很明显这查看表示历史修改版本记录，最主要是看commit id。</p>\n<h4 id=\"reset到指定的版本\"><a href=\"#reset到指定的版本\" class=\"headerlink\" title=\"reset到指定的版本\"></a>reset到指定的版本</h4><pre><code>$ git reset --hard HEAD^ \n</code></pre><p>表示回退， 至于HEAD主要是与commit id映射，HEAD^表示上一个版本，HEAD~100，表示上100版本！这个鬼记得往上100个版本做了什么… 当然也可以直接写commit id， 更深的理解，commit id保存所有历史版本，<strong>HEAD只是一个指针</strong>。</p>\n<h4 id=\"reform-log\"><a href=\"#reform-log\" class=\"headerlink\" title=\"reform log\"></a>reform log</h4><pre><code>$ git reflog \n</code></pre><p>这个做什么呢，记录commit id - HEAD - actions的映射关系。方便吃后悔药。</p>\n<pre><code>$ git reflog\na944eee (HEAD -&gt; master) HEAD@{0}: commit: vertion 2: added time.\nbe90283 HEAD@{1}: commit (initial): edit the readme file\n</code></pre><h4 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h4><pre><code>$ git checkout -- file   \n</code></pre><p>只要没有把版本推送到远程库，一切误操作都可以清除。包括是git reset HEAD file。</p>\n<p>####remove file</p>\n<pre><code>$ git rm file \n</code></pre><p>删除文件，误删除怎么办，上一步刚说过，checkout</p>\n<h4 id=\"remote-repository\"><a href=\"#remote-repository\" class=\"headerlink\" title=\"remote repository\"></a>remote repository</h4><p>Git的天敌是SVN，不过SVN已经在沙滩上了，Git是怎么做到的？ K.O技能：remote repository。 Now，请注册一个Github账号—完全免费共享的remote repository。如果有秘密项目，那么可以自己搭建一个git server。</p>\n<pre><code>$ git remote add origin git@github.com:username/repository   //添加remote git库\n$ git remote add origin  https://github.com/username/repositor     //另一种方式添加remote repo\n</code></pre><h4 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h4><pre><code>$ git push -u origin master     //将本地库推送到remote\n</code></pre><h4 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a>clone</h4><pre><code>$ git clone git@github.com:username/repository         //同步remote库到本地，通过SSH协议\n$ git clone https://github.com/username/repository         //通过https协议\n</code></pre><h4 id=\"swich-branch\"><a href=\"#swich-branch\" class=\"headerlink\" title=\"swich branch\"></a>swich branch</h4><pre><code>$ git checkout -b branchname         \n</code></pre><p>创建并切换分支。相当于<br>    $ git branch branchname<br>    $ git checkout branchname</p>\n<h4 id=\"check-branch\"><a href=\"#check-branch\" class=\"headerlink\" title=\"check branch\"></a>check branch</h4><pre><code>$ git branch\n</code></pre><h4 id=\"merge-branch\"><a href=\"#merge-branch\" class=\"headerlink\" title=\"merge branch\"></a>merge branch</h4><pre><code>$ git merge branchname (--no-ff)\n</code></pre><p>合并branch，no off 表示关闭fast forward模式，将命令中的branch merge到当前workaround的branch。</p>\n<h4 id=\"delete-branch\"><a href=\"#delete-branch\" class=\"headerlink\" title=\"delete branch\"></a>delete branch</h4><pre><code>$ git branch -d branchname\n</code></pre><h3 id=\"Git-learning-review\"><a href=\"#Git-learning-review\" class=\"headerlink\" title=\"Git learning review\"></a>Git learning review</h3><p>廖雪峰最简单易懂Git学习<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/\" target=\"_blank\" rel=\"noopener\">Git Learning</a></p>\n"},{"title":"ICMP Redirect Attack","date":"2018-04-12T06:57:47.000Z","_content":"\n### 原理分析\nICMP协议的redirect,在某些特定的环境下,还是有些用处的。具体的可以参看:\n[When Are ICMP Redirects Sent](http://www.cisco.com/en/US/tech/tk365/technologies_tech_note09186a0080094702.shtml)\n[Explanation of ICMP Redirect Behavior](http://support.microsoft.com/kb/195686/en-us/)\n\n由于ICMP redirect可以动态的更改host的路由,从安全角度考虑,允许accept ICMP redirect的信息话带来的弊大于利。因此在*系统加固*的手册中,往往都建议将icmp redirect丢弃掉。\n\n我想知道的是,在系统默认的配置下。通过构造特定ICMP redirect的数据包,被攻击者是否真的会受到影响；以及需要满足什么样的条件?\n\n#### icmp redirect packet\n一个标准的icmp redirect packet 如下所示:\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| Type | Code | Checksum |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| Gateway Internet Address |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| Internet Header + 64 bits of Original Data Datagram |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n**TYPE**为5,表示为一个icmp redirect类数据；\n**Code**有4类:\n>0 = Redirect datagrams for the Network.\n1 = Redirect datagrams for the Host.\n2 = Redirect datagrams for the Type of Service and Network.\n3 = Redirect datagrams for the Type of Service and Host.\n\n其中Code为0的这类,在microsoft网站的文档中显示已经被废除掉了；我通过测试发现,Code设置为0和1是没有什么区别。\n\n#### icmp redirect processes\n一个正常的icmp redirect过程是这样的,host_A希望访问remote_A的tcp 123端口,当数据包发送到gateway_A,gateway_A发现到remote_A的路由应该走和host_A同网段的host_B,因此就会发 送一个icmp redirect信息,告诉你要访问remote_A的路由应该是走host_B,因此host_A就临时修改路由表,将访问remote_A的路由指向 host_B。\n\n其实,操作系统设计人员,已经考虑到了可能会受到的攻击,因此当host_A收到icmp redirect数据时,会对该数据包进行验证,通过后才会修改自己的路由表。一下是我在freebsd6.2-7.2和linux center-os 5.2下测试的结果:\nfreebsd：\n1.\ticmp redirect数据包的的源ip地址必须是主机的default gateway;\n2.\tremote_A必须和自己不是同一个网段;\nlinux: \n1.\ticmp redirect数据包的的源ip地址必须是主机的default gateway;\n2.\tremote_A必须和自己不是同一个网段;\n3.\t先前有发送访问remote_A的数据包，但是并不验证协议和端口号是否和icmp redirect回应的数据包相符。\n4.host_B是存活的——可以通过arp学到host_B的mac地址。\n\n从 以上这些限制中,可以看出linux比freebsd在icmp redirect这块儿是要严格一些。但是依然可以通过发送伪造的icmp redirect数据包,恶意修改被攻击者的路由表,修改被攻击者和特定ip之间的网络路径;实现流量劫持或者DoS的目的。更重要的是经过验证,该攻击 是可以跨网段的。\n\n### 攻击实例\n假设一台放在IDC内的服务器,操作系统为freebsd,ip地址为1.1.1.5。我们通过扫描,能够猜测到网关为1.1.1.1。这样我们可以从一台直接连接到互联网上的机器发起攻击(直接连接互联网的原因是为了避免SNAT)。使用[SING](http://sourceforge.net/projects/sing/)伪造ICMP攻击数据包:\n\n\t./sing -red -gw 1.1.1.4 -dest x.x.x.x -S 1.1.1.1 -x host -prot tcp -psrc 123 -pdst 123 1.1.1.5\n\n这样,当freebsd接受到该icmp redirect数据包后,就会在路由表中添加一条到x.x.x.x的路由,该路由gw为1.1.1.4,可以通过netstat -rn查看。\n\t\n\tDestination Gateway Flags Refs Use Netif Expire\n\tdefault 1.1.1.1 UGS 0 11164121 em1\n\tx.x.x.x 1.1.1.4 UGHD3 0 0 em1 3600\n......\n过期时间为3600秒。如果1.1.1.4是不存在的ip或者没有转发功能,那么这台机器到x.x.x.x的网络将会中断。\n\n如果针对linux的话,可能会有些限制。针对上个例子,就要求1.1.1.4这台机器是存活的同网段主机,不过这里机器应该不难找。\n\n### 危害分析\n这 类攻击有一个很大的限制,就是一个icmp redirect只能影响受攻击者和单独一个ip地址之间的正常通信;无法造成受攻击者完全被DoS。但是在具体的应用环境中,可以对一些关键设备实施攻 击,从而造成比较大的影响;毕竟对攻击者来说,发送几个icmp数据包的成本还是比较低的。例如:针对DNS服务器,可以将从A-M的的几个root server的ip地址通过icmp redirect,那么应该会造成影响(当然也要看具体DNS服务器的服务类型)。\n\n### 修复建议\n找到system内核参数配置文件/etc/sysctl.conf：\n\n修改：\n\n\t###################################################################\n\t# Additional settings - these settings can improve the network\n\t# security of the host and prevent against some network attacks\n\t# including spoofing attacks and man in the middle attacks through\n\t# redirection. Some network environments, however, require that these\n\t# settings are disabled so review and enable them as needed.\n\t#\n\t# Do not accept ICMP redirects (prevent MITM attacks)\n\t#net.ipv4.conf.all.accept_redirects = 0\n\t#net.ipv6.conf.all.accept_redirects = 0\n\t# _or_\n\t# Accept ICMP redirects only for gateways listed in our default\n\t# gateway list (enabled by default)\n\t# net.ipv4.conf.all.secure_redirects = 1\n\t#\n\t# Do not send ICMP redirects (we are not a router)\n\t#net.ipv4.conf.all.send_redirects = 0`\n\n为\n\n\t###################################################################\n\t# Additional settings - these settings can improve the network\n\t# security of the host and prevent against some network attacks\n\t# including spoofing attacks and man in the middle attacks through\n\t# redirection. Some network environments, however, require that these\n\t# settings are disabled so review and enable them as needed.\n\t#\n\t# Do not accept ICMP redirects (prevent MITM attacks)\n\tnet.ipv4.conf.all.accept_redirects = 0\n\tnet.ipv6.conf.all.accept_redirects = 0\n\t# _or_\n\t# Accept ICMP redirects only for gateways listed in our default\n\t# gateway list (enabled by default)\n\t# net.ipv4.conf.all.secure_redirects = 1\n\t#\n\t# Do not send ICMP redirects (we are not a router)\n\tnet.ipv4.conf.all.send_redirects = 0\n\n然后应用内核参数配置\n\n\t$ sudo sysctl -p\n\n全部相关参数：\n\n\tnet.ipv4.conf.all.accept_redirects = 0\n\tnet.ipv6.conf.all.accept_redirects = 0\n\tnet.ipv4.conf.all.send_redirects = 0\n\t\n\tnet.ipv4.conf.default.accept_redirects = 0\n\tnet.ipv6.conf.default.accept_redirects = 0\n\tnet.ipv4.conf.default.send_redirects = 0\n\n\n\n**reference**  \n<http://www.cymru.com/gillsr/documents/icmp-redirects-are-bad.pdf>  \n<http://sourceforge.net/projects/sing/>  \n<http://tools.ietf.org/html/rfc792>","source":"_posts/ICMP-Redirect-Attack.md","raw":"---\ntitle: ICMP Redirect Attack\ndate: 2018-04-12 14:57:47\ntags:\n\t- linux\n\t- route\n\t- security\ncategory:\n\t- security\t\n\t- linux\n---\n\n### 原理分析\nICMP协议的redirect,在某些特定的环境下,还是有些用处的。具体的可以参看:\n[When Are ICMP Redirects Sent](http://www.cisco.com/en/US/tech/tk365/technologies_tech_note09186a0080094702.shtml)\n[Explanation of ICMP Redirect Behavior](http://support.microsoft.com/kb/195686/en-us/)\n\n由于ICMP redirect可以动态的更改host的路由,从安全角度考虑,允许accept ICMP redirect的信息话带来的弊大于利。因此在*系统加固*的手册中,往往都建议将icmp redirect丢弃掉。\n\n我想知道的是,在系统默认的配置下。通过构造特定ICMP redirect的数据包,被攻击者是否真的会受到影响；以及需要满足什么样的条件?\n\n#### icmp redirect packet\n一个标准的icmp redirect packet 如下所示:\n0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| Type | Code | Checksum |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| Gateway Internet Address |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n| Internet Header + 64 bits of Original Data Datagram |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n**TYPE**为5,表示为一个icmp redirect类数据；\n**Code**有4类:\n>0 = Redirect datagrams for the Network.\n1 = Redirect datagrams for the Host.\n2 = Redirect datagrams for the Type of Service and Network.\n3 = Redirect datagrams for the Type of Service and Host.\n\n其中Code为0的这类,在microsoft网站的文档中显示已经被废除掉了；我通过测试发现,Code设置为0和1是没有什么区别。\n\n#### icmp redirect processes\n一个正常的icmp redirect过程是这样的,host_A希望访问remote_A的tcp 123端口,当数据包发送到gateway_A,gateway_A发现到remote_A的路由应该走和host_A同网段的host_B,因此就会发 送一个icmp redirect信息,告诉你要访问remote_A的路由应该是走host_B,因此host_A就临时修改路由表,将访问remote_A的路由指向 host_B。\n\n其实,操作系统设计人员,已经考虑到了可能会受到的攻击,因此当host_A收到icmp redirect数据时,会对该数据包进行验证,通过后才会修改自己的路由表。一下是我在freebsd6.2-7.2和linux center-os 5.2下测试的结果:\nfreebsd：\n1.\ticmp redirect数据包的的源ip地址必须是主机的default gateway;\n2.\tremote_A必须和自己不是同一个网段;\nlinux: \n1.\ticmp redirect数据包的的源ip地址必须是主机的default gateway;\n2.\tremote_A必须和自己不是同一个网段;\n3.\t先前有发送访问remote_A的数据包，但是并不验证协议和端口号是否和icmp redirect回应的数据包相符。\n4.host_B是存活的——可以通过arp学到host_B的mac地址。\n\n从 以上这些限制中,可以看出linux比freebsd在icmp redirect这块儿是要严格一些。但是依然可以通过发送伪造的icmp redirect数据包,恶意修改被攻击者的路由表,修改被攻击者和特定ip之间的网络路径;实现流量劫持或者DoS的目的。更重要的是经过验证,该攻击 是可以跨网段的。\n\n### 攻击实例\n假设一台放在IDC内的服务器,操作系统为freebsd,ip地址为1.1.1.5。我们通过扫描,能够猜测到网关为1.1.1.1。这样我们可以从一台直接连接到互联网上的机器发起攻击(直接连接互联网的原因是为了避免SNAT)。使用[SING](http://sourceforge.net/projects/sing/)伪造ICMP攻击数据包:\n\n\t./sing -red -gw 1.1.1.4 -dest x.x.x.x -S 1.1.1.1 -x host -prot tcp -psrc 123 -pdst 123 1.1.1.5\n\n这样,当freebsd接受到该icmp redirect数据包后,就会在路由表中添加一条到x.x.x.x的路由,该路由gw为1.1.1.4,可以通过netstat -rn查看。\n\t\n\tDestination Gateway Flags Refs Use Netif Expire\n\tdefault 1.1.1.1 UGS 0 11164121 em1\n\tx.x.x.x 1.1.1.4 UGHD3 0 0 em1 3600\n......\n过期时间为3600秒。如果1.1.1.4是不存在的ip或者没有转发功能,那么这台机器到x.x.x.x的网络将会中断。\n\n如果针对linux的话,可能会有些限制。针对上个例子,就要求1.1.1.4这台机器是存活的同网段主机,不过这里机器应该不难找。\n\n### 危害分析\n这 类攻击有一个很大的限制,就是一个icmp redirect只能影响受攻击者和单独一个ip地址之间的正常通信;无法造成受攻击者完全被DoS。但是在具体的应用环境中,可以对一些关键设备实施攻 击,从而造成比较大的影响;毕竟对攻击者来说,发送几个icmp数据包的成本还是比较低的。例如:针对DNS服务器,可以将从A-M的的几个root server的ip地址通过icmp redirect,那么应该会造成影响(当然也要看具体DNS服务器的服务类型)。\n\n### 修复建议\n找到system内核参数配置文件/etc/sysctl.conf：\n\n修改：\n\n\t###################################################################\n\t# Additional settings - these settings can improve the network\n\t# security of the host and prevent against some network attacks\n\t# including spoofing attacks and man in the middle attacks through\n\t# redirection. Some network environments, however, require that these\n\t# settings are disabled so review and enable them as needed.\n\t#\n\t# Do not accept ICMP redirects (prevent MITM attacks)\n\t#net.ipv4.conf.all.accept_redirects = 0\n\t#net.ipv6.conf.all.accept_redirects = 0\n\t# _or_\n\t# Accept ICMP redirects only for gateways listed in our default\n\t# gateway list (enabled by default)\n\t# net.ipv4.conf.all.secure_redirects = 1\n\t#\n\t# Do not send ICMP redirects (we are not a router)\n\t#net.ipv4.conf.all.send_redirects = 0`\n\n为\n\n\t###################################################################\n\t# Additional settings - these settings can improve the network\n\t# security of the host and prevent against some network attacks\n\t# including spoofing attacks and man in the middle attacks through\n\t# redirection. Some network environments, however, require that these\n\t# settings are disabled so review and enable them as needed.\n\t#\n\t# Do not accept ICMP redirects (prevent MITM attacks)\n\tnet.ipv4.conf.all.accept_redirects = 0\n\tnet.ipv6.conf.all.accept_redirects = 0\n\t# _or_\n\t# Accept ICMP redirects only for gateways listed in our default\n\t# gateway list (enabled by default)\n\t# net.ipv4.conf.all.secure_redirects = 1\n\t#\n\t# Do not send ICMP redirects (we are not a router)\n\tnet.ipv4.conf.all.send_redirects = 0\n\n然后应用内核参数配置\n\n\t$ sudo sysctl -p\n\n全部相关参数：\n\n\tnet.ipv4.conf.all.accept_redirects = 0\n\tnet.ipv6.conf.all.accept_redirects = 0\n\tnet.ipv4.conf.all.send_redirects = 0\n\t\n\tnet.ipv4.conf.default.accept_redirects = 0\n\tnet.ipv6.conf.default.accept_redirects = 0\n\tnet.ipv4.conf.default.send_redirects = 0\n\n\n\n**reference**  \n<http://www.cymru.com/gillsr/documents/icmp-redirects-are-bad.pdf>  \n<http://sourceforge.net/projects/sing/>  \n<http://tools.ietf.org/html/rfc792>","slug":"ICMP-Redirect-Attack","published":1,"updated":"2018-04-13T03:54:51.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwonsa0003wgl1m8rlet82","content":"<h3 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h3><p>ICMP协议的redirect,在某些特定的环境下,还是有些用处的。具体的可以参看:<br><a href=\"http://www.cisco.com/en/US/tech/tk365/technologies_tech_note09186a0080094702.shtml\" target=\"_blank\" rel=\"noopener\">When Are ICMP Redirects Sent</a><br><a href=\"http://support.microsoft.com/kb/195686/en-us/\" target=\"_blank\" rel=\"noopener\">Explanation of ICMP Redirect Behavior</a></p>\n<p>由于ICMP redirect可以动态的更改host的路由,从安全角度考虑,允许accept ICMP redirect的信息话带来的弊大于利。因此在<em>系统加固</em>的手册中,往往都建议将icmp redirect丢弃掉。</p>\n<p>我想知道的是,在系统默认的配置下。通过构造特定ICMP redirect的数据包,被攻击者是否真的会受到影响；以及需要满足什么样的条件?</p>\n<h4 id=\"icmp-redirect-packet\"><a href=\"#icmp-redirect-packet\" class=\"headerlink\" title=\"icmp redirect packet\"></a>icmp redirect packet</h4><p>一个标准的icmp redirect packet 如下所示:<br>0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Type | Code | Checksum |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Gateway Internet Address |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Internet Header + 64 bits of Original Data Datagram |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br><strong>TYPE</strong>为5,表示为一个icmp redirect类数据；<br><strong>Code</strong>有4类:</p>\n<blockquote>\n<p>0 = Redirect datagrams for the Network.<br>1 = Redirect datagrams for the Host.<br>2 = Redirect datagrams for the Type of Service and Network.<br>3 = Redirect datagrams for the Type of Service and Host.</p>\n</blockquote>\n<p>其中Code为0的这类,在microsoft网站的文档中显示已经被废除掉了；我通过测试发现,Code设置为0和1是没有什么区别。</p>\n<h4 id=\"icmp-redirect-processes\"><a href=\"#icmp-redirect-processes\" class=\"headerlink\" title=\"icmp redirect processes\"></a>icmp redirect processes</h4><p>一个正常的icmp redirect过程是这样的,host_A希望访问remote_A的tcp 123端口,当数据包发送到gateway_A,gateway_A发现到remote_A的路由应该走和host_A同网段的host_B,因此就会发 送一个icmp redirect信息,告诉你要访问remote_A的路由应该是走host_B,因此host_A就临时修改路由表,将访问remote_A的路由指向 host_B。</p>\n<p>其实,操作系统设计人员,已经考虑到了可能会受到的攻击,因此当host_A收到icmp redirect数据时,会对该数据包进行验证,通过后才会修改自己的路由表。一下是我在freebsd6.2-7.2和linux center-os 5.2下测试的结果:<br>freebsd：</p>\n<ol>\n<li>icmp redirect数据包的的源ip地址必须是主机的default gateway;</li>\n<li>remote_A必须和自己不是同一个网段;<br>linux: </li>\n<li>icmp redirect数据包的的源ip地址必须是主机的default gateway;</li>\n<li>remote_A必须和自己不是同一个网段;</li>\n<li>先前有发送访问remote_A的数据包，但是并不验证协议和端口号是否和icmp redirect回应的数据包相符。<br>4.host_B是存活的——可以通过arp学到host_B的mac地址。</li>\n</ol>\n<p>从 以上这些限制中,可以看出linux比freebsd在icmp redirect这块儿是要严格一些。但是依然可以通过发送伪造的icmp redirect数据包,恶意修改被攻击者的路由表,修改被攻击者和特定ip之间的网络路径;实现流量劫持或者DoS的目的。更重要的是经过验证,该攻击 是可以跨网段的。</p>\n<h3 id=\"攻击实例\"><a href=\"#攻击实例\" class=\"headerlink\" title=\"攻击实例\"></a>攻击实例</h3><p>假设一台放在IDC内的服务器,操作系统为freebsd,ip地址为1.1.1.5。我们通过扫描,能够猜测到网关为1.1.1.1。这样我们可以从一台直接连接到互联网上的机器发起攻击(直接连接互联网的原因是为了避免SNAT)。使用<a href=\"http://sourceforge.net/projects/sing/\" target=\"_blank\" rel=\"noopener\">SING</a>伪造ICMP攻击数据包:</p>\n<pre><code>./sing -red -gw 1.1.1.4 -dest x.x.x.x -S 1.1.1.1 -x host -prot tcp -psrc 123 -pdst 123 1.1.1.5\n</code></pre><p>这样,当freebsd接受到该icmp redirect数据包后,就会在路由表中添加一条到x.x.x.x的路由,该路由gw为1.1.1.4,可以通过netstat -rn查看。</p>\n<pre><code>Destination Gateway Flags Refs Use Netif Expire\ndefault 1.1.1.1 UGS 0 11164121 em1\nx.x.x.x 1.1.1.4 UGHD3 0 0 em1 3600\n</code></pre><p>……<br>过期时间为3600秒。如果1.1.1.4是不存在的ip或者没有转发功能,那么这台机器到x.x.x.x的网络将会中断。</p>\n<p>如果针对linux的话,可能会有些限制。针对上个例子,就要求1.1.1.4这台机器是存活的同网段主机,不过这里机器应该不难找。</p>\n<h3 id=\"危害分析\"><a href=\"#危害分析\" class=\"headerlink\" title=\"危害分析\"></a>危害分析</h3><p>这 类攻击有一个很大的限制,就是一个icmp redirect只能影响受攻击者和单独一个ip地址之间的正常通信;无法造成受攻击者完全被DoS。但是在具体的应用环境中,可以对一些关键设备实施攻 击,从而造成比较大的影响;毕竟对攻击者来说,发送几个icmp数据包的成本还是比较低的。例如:针对DNS服务器,可以将从A-M的的几个root server的ip地址通过icmp redirect,那么应该会造成影响(当然也要看具体DNS服务器的服务类型)。</p>\n<h3 id=\"修复建议\"><a href=\"#修复建议\" class=\"headerlink\" title=\"修复建议\"></a>修复建议</h3><p>找到system内核参数配置文件/etc/sysctl.conf：</p>\n<p>修改：</p>\n<pre><code>###################################################################\n# Additional settings - these settings can improve the network\n# security of the host and prevent against some network attacks\n# including spoofing attacks and man in the middle attacks through\n# redirection. Some network environments, however, require that these\n# settings are disabled so review and enable them as needed.\n#\n# Do not accept ICMP redirects (prevent MITM attacks)\n#net.ipv4.conf.all.accept_redirects = 0\n#net.ipv6.conf.all.accept_redirects = 0\n# _or_\n# Accept ICMP redirects only for gateways listed in our default\n# gateway list (enabled by default)\n# net.ipv4.conf.all.secure_redirects = 1\n#\n# Do not send ICMP redirects (we are not a router)\n#net.ipv4.conf.all.send_redirects = 0`\n</code></pre><p>为</p>\n<pre><code>###################################################################\n# Additional settings - these settings can improve the network\n# security of the host and prevent against some network attacks\n# including spoofing attacks and man in the middle attacks through\n# redirection. Some network environments, however, require that these\n# settings are disabled so review and enable them as needed.\n#\n# Do not accept ICMP redirects (prevent MITM attacks)\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv6.conf.all.accept_redirects = 0\n# _or_\n# Accept ICMP redirects only for gateways listed in our default\n# gateway list (enabled by default)\n# net.ipv4.conf.all.secure_redirects = 1\n#\n# Do not send ICMP redirects (we are not a router)\nnet.ipv4.conf.all.send_redirects = 0\n</code></pre><p>然后应用内核参数配置</p>\n<pre><code>$ sudo sysctl -p\n</code></pre><p>全部相关参数：</p>\n<pre><code>net.ipv4.conf.all.accept_redirects = 0\nnet.ipv6.conf.all.accept_redirects = 0\nnet.ipv4.conf.all.send_redirects = 0\n\nnet.ipv4.conf.default.accept_redirects = 0\nnet.ipv6.conf.default.accept_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\n</code></pre><p><strong>reference</strong><br><a href=\"http://www.cymru.com/gillsr/documents/icmp-redirects-are-bad.pdf\" target=\"_blank\" rel=\"noopener\">http://www.cymru.com/gillsr/documents/icmp-redirects-are-bad.pdf</a><br><a href=\"http://sourceforge.net/projects/sing/\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/projects/sing/</a><br><a href=\"http://tools.ietf.org/html/rfc792\" target=\"_blank\" rel=\"noopener\">http://tools.ietf.org/html/rfc792</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"原理分析\"><a href=\"#原理分析\" class=\"headerlink\" title=\"原理分析\"></a>原理分析</h3><p>ICMP协议的redirect,在某些特定的环境下,还是有些用处的。具体的可以参看:<br><a href=\"http://www.cisco.com/en/US/tech/tk365/technologies_tech_note09186a0080094702.shtml\" target=\"_blank\" rel=\"noopener\">When Are ICMP Redirects Sent</a><br><a href=\"http://support.microsoft.com/kb/195686/en-us/\" target=\"_blank\" rel=\"noopener\">Explanation of ICMP Redirect Behavior</a></p>\n<p>由于ICMP redirect可以动态的更改host的路由,从安全角度考虑,允许accept ICMP redirect的信息话带来的弊大于利。因此在<em>系统加固</em>的手册中,往往都建议将icmp redirect丢弃掉。</p>\n<p>我想知道的是,在系统默认的配置下。通过构造特定ICMP redirect的数据包,被攻击者是否真的会受到影响；以及需要满足什么样的条件?</p>\n<h4 id=\"icmp-redirect-packet\"><a href=\"#icmp-redirect-packet\" class=\"headerlink\" title=\"icmp redirect packet\"></a>icmp redirect packet</h4><p>一个标准的icmp redirect packet 如下所示:<br>0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Type | Code | Checksum |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Gateway Internet Address |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br>| Internet Header + 64 bits of Original Data Datagram |<br>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<br><strong>TYPE</strong>为5,表示为一个icmp redirect类数据；<br><strong>Code</strong>有4类:</p>\n<blockquote>\n<p>0 = Redirect datagrams for the Network.<br>1 = Redirect datagrams for the Host.<br>2 = Redirect datagrams for the Type of Service and Network.<br>3 = Redirect datagrams for the Type of Service and Host.</p>\n</blockquote>\n<p>其中Code为0的这类,在microsoft网站的文档中显示已经被废除掉了；我通过测试发现,Code设置为0和1是没有什么区别。</p>\n<h4 id=\"icmp-redirect-processes\"><a href=\"#icmp-redirect-processes\" class=\"headerlink\" title=\"icmp redirect processes\"></a>icmp redirect processes</h4><p>一个正常的icmp redirect过程是这样的,host_A希望访问remote_A的tcp 123端口,当数据包发送到gateway_A,gateway_A发现到remote_A的路由应该走和host_A同网段的host_B,因此就会发 送一个icmp redirect信息,告诉你要访问remote_A的路由应该是走host_B,因此host_A就临时修改路由表,将访问remote_A的路由指向 host_B。</p>\n<p>其实,操作系统设计人员,已经考虑到了可能会受到的攻击,因此当host_A收到icmp redirect数据时,会对该数据包进行验证,通过后才会修改自己的路由表。一下是我在freebsd6.2-7.2和linux center-os 5.2下测试的结果:<br>freebsd：</p>\n<ol>\n<li>icmp redirect数据包的的源ip地址必须是主机的default gateway;</li>\n<li>remote_A必须和自己不是同一个网段;<br>linux: </li>\n<li>icmp redirect数据包的的源ip地址必须是主机的default gateway;</li>\n<li>remote_A必须和自己不是同一个网段;</li>\n<li>先前有发送访问remote_A的数据包，但是并不验证协议和端口号是否和icmp redirect回应的数据包相符。<br>4.host_B是存活的——可以通过arp学到host_B的mac地址。</li>\n</ol>\n<p>从 以上这些限制中,可以看出linux比freebsd在icmp redirect这块儿是要严格一些。但是依然可以通过发送伪造的icmp redirect数据包,恶意修改被攻击者的路由表,修改被攻击者和特定ip之间的网络路径;实现流量劫持或者DoS的目的。更重要的是经过验证,该攻击 是可以跨网段的。</p>\n<h3 id=\"攻击实例\"><a href=\"#攻击实例\" class=\"headerlink\" title=\"攻击实例\"></a>攻击实例</h3><p>假设一台放在IDC内的服务器,操作系统为freebsd,ip地址为1.1.1.5。我们通过扫描,能够猜测到网关为1.1.1.1。这样我们可以从一台直接连接到互联网上的机器发起攻击(直接连接互联网的原因是为了避免SNAT)。使用<a href=\"http://sourceforge.net/projects/sing/\" target=\"_blank\" rel=\"noopener\">SING</a>伪造ICMP攻击数据包:</p>\n<pre><code>./sing -red -gw 1.1.1.4 -dest x.x.x.x -S 1.1.1.1 -x host -prot tcp -psrc 123 -pdst 123 1.1.1.5\n</code></pre><p>这样,当freebsd接受到该icmp redirect数据包后,就会在路由表中添加一条到x.x.x.x的路由,该路由gw为1.1.1.4,可以通过netstat -rn查看。</p>\n<pre><code>Destination Gateway Flags Refs Use Netif Expire\ndefault 1.1.1.1 UGS 0 11164121 em1\nx.x.x.x 1.1.1.4 UGHD3 0 0 em1 3600\n</code></pre><p>……<br>过期时间为3600秒。如果1.1.1.4是不存在的ip或者没有转发功能,那么这台机器到x.x.x.x的网络将会中断。</p>\n<p>如果针对linux的话,可能会有些限制。针对上个例子,就要求1.1.1.4这台机器是存活的同网段主机,不过这里机器应该不难找。</p>\n<h3 id=\"危害分析\"><a href=\"#危害分析\" class=\"headerlink\" title=\"危害分析\"></a>危害分析</h3><p>这 类攻击有一个很大的限制,就是一个icmp redirect只能影响受攻击者和单独一个ip地址之间的正常通信;无法造成受攻击者完全被DoS。但是在具体的应用环境中,可以对一些关键设备实施攻 击,从而造成比较大的影响;毕竟对攻击者来说,发送几个icmp数据包的成本还是比较低的。例如:针对DNS服务器,可以将从A-M的的几个root server的ip地址通过icmp redirect,那么应该会造成影响(当然也要看具体DNS服务器的服务类型)。</p>\n<h3 id=\"修复建议\"><a href=\"#修复建议\" class=\"headerlink\" title=\"修复建议\"></a>修复建议</h3><p>找到system内核参数配置文件/etc/sysctl.conf：</p>\n<p>修改：</p>\n<pre><code>###################################################################\n# Additional settings - these settings can improve the network\n# security of the host and prevent against some network attacks\n# including spoofing attacks and man in the middle attacks through\n# redirection. Some network environments, however, require that these\n# settings are disabled so review and enable them as needed.\n#\n# Do not accept ICMP redirects (prevent MITM attacks)\n#net.ipv4.conf.all.accept_redirects = 0\n#net.ipv6.conf.all.accept_redirects = 0\n# _or_\n# Accept ICMP redirects only for gateways listed in our default\n# gateway list (enabled by default)\n# net.ipv4.conf.all.secure_redirects = 1\n#\n# Do not send ICMP redirects (we are not a router)\n#net.ipv4.conf.all.send_redirects = 0`\n</code></pre><p>为</p>\n<pre><code>###################################################################\n# Additional settings - these settings can improve the network\n# security of the host and prevent against some network attacks\n# including spoofing attacks and man in the middle attacks through\n# redirection. Some network environments, however, require that these\n# settings are disabled so review and enable them as needed.\n#\n# Do not accept ICMP redirects (prevent MITM attacks)\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv6.conf.all.accept_redirects = 0\n# _or_\n# Accept ICMP redirects only for gateways listed in our default\n# gateway list (enabled by default)\n# net.ipv4.conf.all.secure_redirects = 1\n#\n# Do not send ICMP redirects (we are not a router)\nnet.ipv4.conf.all.send_redirects = 0\n</code></pre><p>然后应用内核参数配置</p>\n<pre><code>$ sudo sysctl -p\n</code></pre><p>全部相关参数：</p>\n<pre><code>net.ipv4.conf.all.accept_redirects = 0\nnet.ipv6.conf.all.accept_redirects = 0\nnet.ipv4.conf.all.send_redirects = 0\n\nnet.ipv4.conf.default.accept_redirects = 0\nnet.ipv6.conf.default.accept_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\n</code></pre><p><strong>reference</strong><br><a href=\"http://www.cymru.com/gillsr/documents/icmp-redirects-are-bad.pdf\" target=\"_blank\" rel=\"noopener\">http://www.cymru.com/gillsr/documents/icmp-redirects-are-bad.pdf</a><br><a href=\"http://sourceforge.net/projects/sing/\" target=\"_blank\" rel=\"noopener\">http://sourceforge.net/projects/sing/</a><br><a href=\"http://tools.ietf.org/html/rfc792\" target=\"_blank\" rel=\"noopener\">http://tools.ietf.org/html/rfc792</a></p>\n"},{"title":"Hexo Learning","date":"2018-04-05T13:56:48.000Z","_content":"_作为搭建个人blog最为重要的组件，Hexo可以说是最核心的部分，不仅是因为它提供了基本的框架，而且还有丰富的扩展包，自定义主题格式等丰富功能，最重要的是作为新手来说简洁易懂。_\n\n### what is Hexo?\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 安装 Hexo\n安装前提\n在安装前，已安装下列应用程序：\nNode.js\nGit\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n\t$ npm install -g hexo-cli\n\n### 建站（本地）\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。\n\n\t$ hexo init <folder>\n\t$ cd <folder>\n\t$ npm install\n\n新建完成后，指定文件夹的目录如下：  \n>.\n>├── _config.yml\n>├── package.json\n>├── scaffolds\n>├── source\n>|     ├── _drafts\n>|     └── _posts\n>└── themes\n\n\n### 文件和目录\n**_config.yml** -- 网站的 配置 信息，您可以在此配置大部分的参数。\n**package.json** -- 应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。  \n  \n{% codeblock package.json [lang:json] %}\n{\n  \"name\": \"hexo-site\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"hexo\": {\n    \"version\": \"\"\n  },\n  \"dependencies\": {\n    \"hexo\": \"^3.0.0\",\n    \"hexo-generator-archive\": \"^0.1.0\",\n    \"hexo-generator-category\": \"^0.1.0\",\n    \"hexo-generator-index\": \"^0.1.0\",\n    \"hexo-generator-tag\": \"^0.1.0\",\n    \"hexo-renderer-ejs\": \"^0.1.0\",\n    \"hexo-renderer-stylus\": \"^0.2.0\",\n    \"hexo-renderer-marked\": \"^0.2.4\",\n    \"hexo-server\": \"^0.1.2\"\n  }\n}\n{% endcodeblock %}\n\n**scaffolds** -- 模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\nHexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。\n\n**source** -- 资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n**themes** -- 主题 文件夹。Hexo 会根据主题来生成静态页面。\n\n### Tag Plugins\n**Quota**\n\n\t{% blockquote [author[, source]] [link] [source_link_title] %}\n\tcontent\n\t{% endblockquote %}\n\n**Code**\n  \n\t{% codeblock [title] [lang:language] [url] [link text] %}\n\tcode snippet\n\t{% endcodeblock %}\n\n**Image**\n\n\t{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}\n*path start with the public folder*\n\n### Hexo extension packages\n**deploy to git website**  \n\n\t$ npm install hexo-deployer-git --save\n\t$ hexo d -g\n**enable search feature**\n  \n\t$ npm install hexo-generator-search  --save\n**enable acticle wordcount**\n\n\t$ npm install hexo-wordcount --save\n**enable generate tag feature and pages**\n\n\t$ npm install hexo-generator-tag --save\n**enable website search feature**\n\n\t$ npm install hexo-generator-searchdb --save\n\n### Hexo documentation\n想要学习更详细的Hexo，[传送门](https://hexo.io/docs/index.html)\n","source":"_posts/Hexo-Learning.md","raw":"---\ntitle: Hexo Learning\ndate: 2018-04-05 21:56:48\ntags:\n\t- blog\n\t- hexo\ncategory:\n\t- blog\n---\n_作为搭建个人blog最为重要的组件，Hexo可以说是最核心的部分，不仅是因为它提供了基本的框架，而且还有丰富的扩展包，自定义主题格式等丰富功能，最重要的是作为新手来说简洁易懂。_\n\n### what is Hexo?\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n### 安装 Hexo\n安装前提\n在安装前，已安装下列应用程序：\nNode.js\nGit\n\n所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n\n\t$ npm install -g hexo-cli\n\n### 建站（本地）\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。\n\n\t$ hexo init <folder>\n\t$ cd <folder>\n\t$ npm install\n\n新建完成后，指定文件夹的目录如下：  \n>.\n>├── _config.yml\n>├── package.json\n>├── scaffolds\n>├── source\n>|     ├── _drafts\n>|     └── _posts\n>└── themes\n\n\n### 文件和目录\n**_config.yml** -- 网站的 配置 信息，您可以在此配置大部分的参数。\n**package.json** -- 应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。  \n  \n{% codeblock package.json [lang:json] %}\n{\n  \"name\": \"hexo-site\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"hexo\": {\n    \"version\": \"\"\n  },\n  \"dependencies\": {\n    \"hexo\": \"^3.0.0\",\n    \"hexo-generator-archive\": \"^0.1.0\",\n    \"hexo-generator-category\": \"^0.1.0\",\n    \"hexo-generator-index\": \"^0.1.0\",\n    \"hexo-generator-tag\": \"^0.1.0\",\n    \"hexo-renderer-ejs\": \"^0.1.0\",\n    \"hexo-renderer-stylus\": \"^0.2.0\",\n    \"hexo-renderer-marked\": \"^0.2.4\",\n    \"hexo-server\": \"^0.1.2\"\n  }\n}\n{% endcodeblock %}\n\n**scaffolds** -- 模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。\nHexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。\n\n**source** -- 资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。\n**themes** -- 主题 文件夹。Hexo 会根据主题来生成静态页面。\n\n### Tag Plugins\n**Quota**\n\n\t{% blockquote [author[, source]] [link] [source_link_title] %}\n\tcontent\n\t{% endblockquote %}\n\n**Code**\n  \n\t{% codeblock [title] [lang:language] [url] [link text] %}\n\tcode snippet\n\t{% endcodeblock %}\n\n**Image**\n\n\t{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}\n*path start with the public folder*\n\n### Hexo extension packages\n**deploy to git website**  \n\n\t$ npm install hexo-deployer-git --save\n\t$ hexo d -g\n**enable search feature**\n  \n\t$ npm install hexo-generator-search  --save\n**enable acticle wordcount**\n\n\t$ npm install hexo-wordcount --save\n**enable generate tag feature and pages**\n\n\t$ npm install hexo-generator-tag --save\n**enable website search feature**\n\n\t$ npm install hexo-generator-searchdb --save\n\n### Hexo documentation\n想要学习更详细的Hexo，[传送门](https://hexo.io/docs/index.html)\n","slug":"Hexo-Learning","published":1,"updated":"2018-04-05T15:03:22.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwonsk0006wgl1424ug0mw","content":"<p><em>作为搭建个人blog最为重要的组件，Hexo可以说是最核心的部分，不仅是因为它提供了基本的框架，而且还有丰富的扩展包，自定义主题格式等丰富功能，最重要的是作为新手来说简洁易懂。</em></p>\n<h3 id=\"what-is-Hexo\"><a href=\"#what-is-Hexo\" class=\"headerlink\" title=\"what is Hexo?\"></a>what is Hexo?</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>安装前提<br>在安装前，已安装下列应用程序：<br>Node.js<br>Git</p>\n<p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<pre><code>$ npm install -g hexo-cli\n</code></pre><h3 id=\"建站（本地）\"><a href=\"#建站（本地）\" class=\"headerlink\" title=\"建站（本地）\"></a>建站（本地）</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<pre><code>$ hexo init &lt;folder&gt;\n$ cd &lt;folder&gt;\n$ npm install\n</code></pre><p>新建完成后，指定文件夹的目录如下：  </p>\n<blockquote>\n<p>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|     ├── _drafts<br>|     └── _posts<br>└── themes</p>\n</blockquote>\n<h3 id=\"文件和目录\"><a href=\"#文件和目录\" class=\"headerlink\" title=\"文件和目录\"></a>文件和目录</h3><p><strong>_config.yml</strong> – 网站的 配置 信息，您可以在此配置大部分的参数。<br><strong>package.json</strong> – 应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。  </p>\n<pre><code>{\n  &quot;name&quot;: &quot;hexo-site&quot;,\n  &quot;version&quot;: &quot;0.0.0&quot;,\n  &quot;private&quot;: true,\n  &quot;hexo&quot;: {\n    &quot;version&quot;: &quot;&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;hexo&quot;: &quot;^3.0.0&quot;,\n    &quot;hexo-generator-archive&quot;: &quot;^0.1.0&quot;,\n    &quot;hexo-generator-category&quot;: &quot;^0.1.0&quot;,\n    &quot;hexo-generator-index&quot;: &quot;^0.1.0&quot;,\n    &quot;hexo-generator-tag&quot;: &quot;^0.1.0&quot;,\n    &quot;hexo-renderer-ejs&quot;: &quot;^0.1.0&quot;,\n    &quot;hexo-renderer-stylus&quot;: &quot;^0.2.0&quot;,\n    &quot;hexo-renderer-marked&quot;: &quot;^0.2.4&quot;,\n    &quot;hexo-server&quot;: &quot;^0.1.2&quot;\n  }\n}</code></pre>\n<p><strong>scaffolds</strong> – 模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>\n<p><strong>source</strong> – 资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。<br><strong>themes</strong> – 主题 文件夹。Hexo 会根据主题来生成静态页面。</p>\n<h3 id=\"Tag-Plugins\"><a href=\"#Tag-Plugins\" class=\"headerlink\" title=\"Tag Plugins\"></a>Tag Plugins</h3><p><strong>Quota</strong></p>\n<pre><code>{% blockquote [author[, source]] [link] [source_link_title] %}\n\tcontent\n\t{% endblockquote %}\n</code></pre><p><strong>Code</strong></p>\n<pre><code>{% codeblock [title] [lang:language] [url] [link text] %}\n\tcode snippet\n\t{% endcodeblock %}\n</code></pre><p><strong>Image</strong></p>\n<pre><code>{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}\n</code></pre><p><em>path start with the public folder</em></p>\n<h3 id=\"Hexo-extension-packages\"><a href=\"#Hexo-extension-packages\" class=\"headerlink\" title=\"Hexo extension packages\"></a>Hexo extension packages</h3><p><strong>deploy to git website</strong>  </p>\n<pre><code>$ npm install hexo-deployer-git --save\n$ hexo d -g\n</code></pre><p><strong>enable search feature</strong></p>\n<pre><code>$ npm install hexo-generator-search  --save\n</code></pre><p><strong>enable acticle wordcount</strong></p>\n<pre><code>$ npm install hexo-wordcount --save\n</code></pre><p><strong>enable generate tag feature and pages</strong></p>\n<pre><code>$ npm install hexo-generator-tag --save\n</code></pre><p><strong>enable website search feature</strong></p>\n<pre><code>$ npm install hexo-generator-searchdb --save\n</code></pre><h3 id=\"Hexo-documentation\"><a href=\"#Hexo-documentation\" class=\"headerlink\" title=\"Hexo documentation\"></a>Hexo documentation</h3><p>想要学习更详细的Hexo，<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>作为搭建个人blog最为重要的组件，Hexo可以说是最核心的部分，不仅是因为它提供了基本的框架，而且还有丰富的扩展包，自定义主题格式等丰富功能，最重要的是作为新手来说简洁易懂。</em></p>\n<h3 id=\"what-is-Hexo\"><a href=\"#what-is-Hexo\" class=\"headerlink\" title=\"what is Hexo?\"></a>what is Hexo?</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>安装前提<br>在安装前，已安装下列应用程序：<br>Node.js<br>Git</p>\n<p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>\n<pre><code>$ npm install -g hexo-cli\n</code></pre><h3 id=\"建站（本地）\"><a href=\"#建站（本地）\" class=\"headerlink\" title=\"建站（本地）\"></a>建站（本地）</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<pre><code>$ hexo init &lt;folder&gt;\n$ cd &lt;folder&gt;\n$ npm install\n</code></pre><p>新建完成后，指定文件夹的目录如下：  </p>\n<blockquote>\n<p>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|     ├── _drafts<br>|     └── _posts<br>└── themes</p>\n</blockquote>\n<h3 id=\"文件和目录\"><a href=\"#文件和目录\" class=\"headerlink\" title=\"文件和目录\"></a>文件和目录</h3><p><strong>_config.yml</strong> – 网站的 配置 信息，您可以在此配置大部分的参数。<br><strong>package.json</strong> – 应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。  </p>\n<pre><code>{\n  &quot;name&quot;: &quot;hexo-site&quot;,\n  &quot;version&quot;: &quot;0.0.0&quot;,\n  &quot;private&quot;: true,\n  &quot;hexo&quot;: {\n    &quot;version&quot;: &quot;&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;hexo&quot;: &quot;^3.0.0&quot;,\n    &quot;hexo-generator-archive&quot;: &quot;^0.1.0&quot;,\n    &quot;hexo-generator-category&quot;: &quot;^0.1.0&quot;,\n    &quot;hexo-generator-index&quot;: &quot;^0.1.0&quot;,\n    &quot;hexo-generator-tag&quot;: &quot;^0.1.0&quot;,\n    &quot;hexo-renderer-ejs&quot;: &quot;^0.1.0&quot;,\n    &quot;hexo-renderer-stylus&quot;: &quot;^0.2.0&quot;,\n    &quot;hexo-renderer-marked&quot;: &quot;^0.2.4&quot;,\n    &quot;hexo-server&quot;: &quot;^0.1.2&quot;\n  }\n}</code></pre>\n<p><strong>scaffolds</strong> – 模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>\n<p><strong>source</strong> – 资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。<br><strong>themes</strong> – 主题 文件夹。Hexo 会根据主题来生成静态页面。</p>\n<h3 id=\"Tag-Plugins\"><a href=\"#Tag-Plugins\" class=\"headerlink\" title=\"Tag Plugins\"></a>Tag Plugins</h3><p><strong>Quota</strong></p>\n<pre><code>{% blockquote [author[, source]] [link] [source_link_title] %}\n\tcontent\n\t{% endblockquote %}\n</code></pre><p><strong>Code</strong></p>\n<pre><code>{% codeblock [title] [lang:language] [url] [link text] %}\n\tcode snippet\n\t{% endcodeblock %}\n</code></pre><p><strong>Image</strong></p>\n<pre><code>{% img [class names] /path/to/image [width] [height] [title text [alt text]] %}\n</code></pre><p><em>path start with the public folder</em></p>\n<h3 id=\"Hexo-extension-packages\"><a href=\"#Hexo-extension-packages\" class=\"headerlink\" title=\"Hexo extension packages\"></a>Hexo extension packages</h3><p><strong>deploy to git website</strong>  </p>\n<pre><code>$ npm install hexo-deployer-git --save\n$ hexo d -g\n</code></pre><p><strong>enable search feature</strong></p>\n<pre><code>$ npm install hexo-generator-search  --save\n</code></pre><p><strong>enable acticle wordcount</strong></p>\n<pre><code>$ npm install hexo-wordcount --save\n</code></pre><p><strong>enable generate tag feature and pages</strong></p>\n<pre><code>$ npm install hexo-generator-tag --save\n</code></pre><p><strong>enable website search feature</strong></p>\n<pre><code>$ npm install hexo-generator-searchdb --save\n</code></pre><h3 id=\"Hexo-documentation\"><a href=\"#Hexo-documentation\" class=\"headerlink\" title=\"Hexo documentation\"></a>Hexo documentation</h3><p>想要学习更详细的Hexo，<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"noopener\">传送门</a></p>\n"},{"title":"Linux look up route","date":"2018-04-11T03:56:01.000Z","_content":"\n本文介绍几种获取linux当前系统路由表的命令\n### route\n\t[root@localhost ~]# route\n\tKernel IP routing table\n\tDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n\tdefault         192.168.150.1   0.0.0.0         UG    1024   0        0 eno16780032\n\t192.168.150.0   0.0.0.0         255.255.255.0   U     0      0        0 eno16780032\n\n### ip rule\n\t[root@localhost ~]# ip rule\n\t0:\tfrom all lookup local \n\t32766:\tfrom all lookup main \n\t32767:\tfrom all lookup default\n\n### ip route list table\n    [root@localhost ~]# ip route list table all\n    default via 192.168.150.1 dev eno16780032  proto static  metric 1024 \n    192.168.150.0/24 dev eno16780032  proto kernel  scope link  src 192.168.150.151 \n    broadcast 127.0.0.0 dev lo  table local  proto kernel  scope link  src 127.0.0.1 \n    local 127.0.0.0/8 dev lo  table local  proto kernel  scope host  src 127.0.0.1 \n    local 127.0.0.1 dev lo  table local  proto kernel  scope host  src 127.0.0.1 \n    broadcast 127.255.255.255 dev lo  table local  proto kernel  scope link  src 127.0.0.1 \n    broadcast 192.168.150.0 dev eno16780032  table local  proto kernel  scope link  src 192.168.150.151 \n    local 192.168.150.151 dev eno16780032  table local  proto kernel  scope host  src 192.168.150.151 \n    broadcast 192.168.150.255 dev eno16780032  table local  proto kernel  scope link  src 192.168.150.151 \n    local ::1 dev lo  proto kernel  metric 256 \n    unreachable ::/96 dev lo  metric 1024  error -101\n    unreachable ::ffff:0.0.0.0/96 dev lo  metric 1024  error -101\n    unreachable 2002:a00::/24 dev lo  metric 1024  error -101\n    unreachable 2002:7f00::/24 dev lo  metric 1024  error -101\n    unreachable 2002:a9fe::/32 dev lo  metric 1024  error -101\n    unreachable 2002:ac10::/28 dev lo  metric 1024  error -101\n    unreachable 2002:c0a8::/32 dev lo  metric 1024  error -101\n    unreachable 2002:e000::/19 dev lo  metric 1024  error -101\n    unreachable 3ffe:ffff::/32 dev lo  metric 1024  error -101\n    fe80::/64 dev eno16780032  proto kernel  metric 256 \n    unreachable default dev lo  table unspec  proto kernel  metric 4294967295  error -101\n    local ::1 dev lo  table local  proto none  metric 0 \n    local fe80::20c:29ff:fe9f:7ea6 dev lo  table local  proto none  metric 0 \n    ff00::/8 dev eno16780032  table local  metric 256 \n    unreachable default dev lo  table unspec  proto kernel  metric 4294967295  error -101\n\n### ip route get\n\t[root@localhost ~]# ip route get 114.114.114.114\n\t114.114.114.114 via 192.168.150.1 dev eno16780032  src 192.168.150.151 \n\n\n","source":"_posts/Linux-look-for-route-table.md","raw":"---\ntitle: Linux look up route\ndate: 2018-04-11 11:56:01\ntags:\n\t- linux\n\t- route\ncategory:\n\t- linux\n\t- command\n---\n\n本文介绍几种获取linux当前系统路由表的命令\n### route\n\t[root@localhost ~]# route\n\tKernel IP routing table\n\tDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n\tdefault         192.168.150.1   0.0.0.0         UG    1024   0        0 eno16780032\n\t192.168.150.0   0.0.0.0         255.255.255.0   U     0      0        0 eno16780032\n\n### ip rule\n\t[root@localhost ~]# ip rule\n\t0:\tfrom all lookup local \n\t32766:\tfrom all lookup main \n\t32767:\tfrom all lookup default\n\n### ip route list table\n    [root@localhost ~]# ip route list table all\n    default via 192.168.150.1 dev eno16780032  proto static  metric 1024 \n    192.168.150.0/24 dev eno16780032  proto kernel  scope link  src 192.168.150.151 \n    broadcast 127.0.0.0 dev lo  table local  proto kernel  scope link  src 127.0.0.1 \n    local 127.0.0.0/8 dev lo  table local  proto kernel  scope host  src 127.0.0.1 \n    local 127.0.0.1 dev lo  table local  proto kernel  scope host  src 127.0.0.1 \n    broadcast 127.255.255.255 dev lo  table local  proto kernel  scope link  src 127.0.0.1 \n    broadcast 192.168.150.0 dev eno16780032  table local  proto kernel  scope link  src 192.168.150.151 \n    local 192.168.150.151 dev eno16780032  table local  proto kernel  scope host  src 192.168.150.151 \n    broadcast 192.168.150.255 dev eno16780032  table local  proto kernel  scope link  src 192.168.150.151 \n    local ::1 dev lo  proto kernel  metric 256 \n    unreachable ::/96 dev lo  metric 1024  error -101\n    unreachable ::ffff:0.0.0.0/96 dev lo  metric 1024  error -101\n    unreachable 2002:a00::/24 dev lo  metric 1024  error -101\n    unreachable 2002:7f00::/24 dev lo  metric 1024  error -101\n    unreachable 2002:a9fe::/32 dev lo  metric 1024  error -101\n    unreachable 2002:ac10::/28 dev lo  metric 1024  error -101\n    unreachable 2002:c0a8::/32 dev lo  metric 1024  error -101\n    unreachable 2002:e000::/19 dev lo  metric 1024  error -101\n    unreachable 3ffe:ffff::/32 dev lo  metric 1024  error -101\n    fe80::/64 dev eno16780032  proto kernel  metric 256 \n    unreachable default dev lo  table unspec  proto kernel  metric 4294967295  error -101\n    local ::1 dev lo  table local  proto none  metric 0 \n    local fe80::20c:29ff:fe9f:7ea6 dev lo  table local  proto none  metric 0 \n    ff00::/8 dev eno16780032  table local  metric 256 \n    unreachable default dev lo  table unspec  proto kernel  metric 4294967295  error -101\n\n### ip route get\n\t[root@localhost ~]# ip route get 114.114.114.114\n\t114.114.114.114 via 192.168.150.1 dev eno16780032  src 192.168.150.151 \n\n\n","slug":"Linux-look-for-route-table","published":1,"updated":"2018-04-11T05:09:24.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwonsn0007wgl1ktkwrfjc","content":"<p>本文介绍几种获取linux当前系统路由表的命令</p>\n<h3 id=\"route\"><a href=\"#route\" class=\"headerlink\" title=\"route\"></a>route</h3><pre><code>[root@localhost ~]# route\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\ndefault         192.168.150.1   0.0.0.0         UG    1024   0        0 eno16780032\n192.168.150.0   0.0.0.0         255.255.255.0   U     0      0        0 eno16780032\n</code></pre><h3 id=\"ip-rule\"><a href=\"#ip-rule\" class=\"headerlink\" title=\"ip rule\"></a>ip rule</h3><pre><code>[root@localhost ~]# ip rule\n0:    from all lookup local \n32766:    from all lookup main \n32767:    from all lookup default\n</code></pre><h3 id=\"ip-route-list-table\"><a href=\"#ip-route-list-table\" class=\"headerlink\" title=\"ip route list table\"></a>ip route list table</h3><pre><code>[root@localhost ~]# ip route list table all\ndefault via 192.168.150.1 dev eno16780032  proto static  metric 1024 \n192.168.150.0/24 dev eno16780032  proto kernel  scope link  src 192.168.150.151 \nbroadcast 127.0.0.0 dev lo  table local  proto kernel  scope link  src 127.0.0.1 \nlocal 127.0.0.0/8 dev lo  table local  proto kernel  scope host  src 127.0.0.1 \nlocal 127.0.0.1 dev lo  table local  proto kernel  scope host  src 127.0.0.1 \nbroadcast 127.255.255.255 dev lo  table local  proto kernel  scope link  src 127.0.0.1 \nbroadcast 192.168.150.0 dev eno16780032  table local  proto kernel  scope link  src 192.168.150.151 \nlocal 192.168.150.151 dev eno16780032  table local  proto kernel  scope host  src 192.168.150.151 \nbroadcast 192.168.150.255 dev eno16780032  table local  proto kernel  scope link  src 192.168.150.151 \nlocal ::1 dev lo  proto kernel  metric 256 \nunreachable ::/96 dev lo  metric 1024  error -101\nunreachable ::ffff:0.0.0.0/96 dev lo  metric 1024  error -101\nunreachable 2002:a00::/24 dev lo  metric 1024  error -101\nunreachable 2002:7f00::/24 dev lo  metric 1024  error -101\nunreachable 2002:a9fe::/32 dev lo  metric 1024  error -101\nunreachable 2002:ac10::/28 dev lo  metric 1024  error -101\nunreachable 2002:c0a8::/32 dev lo  metric 1024  error -101\nunreachable 2002:e000::/19 dev lo  metric 1024  error -101\nunreachable 3ffe:ffff::/32 dev lo  metric 1024  error -101\nfe80::/64 dev eno16780032  proto kernel  metric 256 \nunreachable default dev lo  table unspec  proto kernel  metric 4294967295  error -101\nlocal ::1 dev lo  table local  proto none  metric 0 \nlocal fe80::20c:29ff:fe9f:7ea6 dev lo  table local  proto none  metric 0 \nff00::/8 dev eno16780032  table local  metric 256 \nunreachable default dev lo  table unspec  proto kernel  metric 4294967295  error -101\n</code></pre><h3 id=\"ip-route-get\"><a href=\"#ip-route-get\" class=\"headerlink\" title=\"ip route get\"></a>ip route get</h3><pre><code>[root@localhost ~]# ip route get 114.114.114.114\n114.114.114.114 via 192.168.150.1 dev eno16780032  src 192.168.150.151 \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>本文介绍几种获取linux当前系统路由表的命令</p>\n<h3 id=\"route\"><a href=\"#route\" class=\"headerlink\" title=\"route\"></a>route</h3><pre><code>[root@localhost ~]# route\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\ndefault         192.168.150.1   0.0.0.0         UG    1024   0        0 eno16780032\n192.168.150.0   0.0.0.0         255.255.255.0   U     0      0        0 eno16780032\n</code></pre><h3 id=\"ip-rule\"><a href=\"#ip-rule\" class=\"headerlink\" title=\"ip rule\"></a>ip rule</h3><pre><code>[root@localhost ~]# ip rule\n0:    from all lookup local \n32766:    from all lookup main \n32767:    from all lookup default\n</code></pre><h3 id=\"ip-route-list-table\"><a href=\"#ip-route-list-table\" class=\"headerlink\" title=\"ip route list table\"></a>ip route list table</h3><pre><code>[root@localhost ~]# ip route list table all\ndefault via 192.168.150.1 dev eno16780032  proto static  metric 1024 \n192.168.150.0/24 dev eno16780032  proto kernel  scope link  src 192.168.150.151 \nbroadcast 127.0.0.0 dev lo  table local  proto kernel  scope link  src 127.0.0.1 \nlocal 127.0.0.0/8 dev lo  table local  proto kernel  scope host  src 127.0.0.1 \nlocal 127.0.0.1 dev lo  table local  proto kernel  scope host  src 127.0.0.1 \nbroadcast 127.255.255.255 dev lo  table local  proto kernel  scope link  src 127.0.0.1 \nbroadcast 192.168.150.0 dev eno16780032  table local  proto kernel  scope link  src 192.168.150.151 \nlocal 192.168.150.151 dev eno16780032  table local  proto kernel  scope host  src 192.168.150.151 \nbroadcast 192.168.150.255 dev eno16780032  table local  proto kernel  scope link  src 192.168.150.151 \nlocal ::1 dev lo  proto kernel  metric 256 \nunreachable ::/96 dev lo  metric 1024  error -101\nunreachable ::ffff:0.0.0.0/96 dev lo  metric 1024  error -101\nunreachable 2002:a00::/24 dev lo  metric 1024  error -101\nunreachable 2002:7f00::/24 dev lo  metric 1024  error -101\nunreachable 2002:a9fe::/32 dev lo  metric 1024  error -101\nunreachable 2002:ac10::/28 dev lo  metric 1024  error -101\nunreachable 2002:c0a8::/32 dev lo  metric 1024  error -101\nunreachable 2002:e000::/19 dev lo  metric 1024  error -101\nunreachable 3ffe:ffff::/32 dev lo  metric 1024  error -101\nfe80::/64 dev eno16780032  proto kernel  metric 256 \nunreachable default dev lo  table unspec  proto kernel  metric 4294967295  error -101\nlocal ::1 dev lo  table local  proto none  metric 0 \nlocal fe80::20c:29ff:fe9f:7ea6 dev lo  table local  proto none  metric 0 \nff00::/8 dev eno16780032  table local  metric 256 \nunreachable default dev lo  table unspec  proto kernel  metric 4294967295  error -101\n</code></pre><h3 id=\"ip-route-get\"><a href=\"#ip-route-get\" class=\"headerlink\" title=\"ip route get\"></a>ip route get</h3><pre><code>[root@localhost ~]# ip route get 114.114.114.114\n114.114.114.114 via 192.168.150.1 dev eno16780032  src 192.168.150.151 \n</code></pre>"},{"title":"VMware security","date":"2018-05-02T08:33:39.000Z","_content":"*VMware虚拟化之后，典型的部署场景是这样的,对于下面的架构也会存在安全隐患*\n{% img vmware /2018/05/02/VMware-security/vmware.png %}\n\n### 风险点一\n\n**管理员可能没有修改带外管理接口的默认密码，或者设置了弱密码、企业内众所周知的通用密码。**\n\n1、首先，要有效管理和监控大量的物理服务器，管理员必须借助服务器提供的硬件管理接口和带外管理网络才能实现。例如，惠普的iLO接口，Dell和浪潮的IPMI接口，通过一个Web或Ssh界面，都能实现服务器硬件健康状态的监控、电源和开关、操作系统的安装、远程控制台等功能。\n\n### 风险点二\n\n**某些ESXi Server可能使用了弱密码，后来忘了修改。所有的ESXi Server使用相同的密码，也许写在了运维手册里。**\n\n2、其次，在虚拟主机操作系统层面，管理员需要管理大量的ESXi Server，可能需要借助外包或驻场才能完成系统的安装和初始设置，然后才能投入使用。\n关于弱密码实际是非常容易遇到的。\n\n### 风险点三\n\n**ESXi Server从来没有打过补丁，可能存在安全漏洞。**\n\n3、再次，因为每个虚拟主机上都跑着几十上百个的虚拟客户机，使得管理员轻易做不敢对虚拟主机任何变更操作。\n\n### 风险点四\n\n**不同管理员，操作权限的控制**\n\n4、再往更高的层走，到达vCenter这里\n拿到vCenter的管理权限，便可以统治成百上千的虚拟机了。而管理成百上千台的虚拟机，肯定不是一两个人可以做得来的。也许需要按照功能区域划分给不同的人去管理，日常的变更操作也许会交给驻场团队去进行。这便涉及到账号和权限的安全问题。\n\n在主要的vCenter上，也许域控服务器就在其中，你现在可以对它进行一个热克隆操作，克隆一个离线的虚拟机，然后用vCenter的控制台去登录它，导出域数据库，通过vCenter拷贝到其它你控制的虚拟机中（例如，通过共享虚拟磁盘），再把克隆的机器删除。这个过程对于域控管理员来说，一点感知都没有，域控服务器自身也不会有任何异常的系统事件产生。\n\n### 风险点五\n\n**外部web portal的安全问题**\n\n5、让我们把目光投向更远的地方，落在那个称为“云”管理平台的系统上。实际上，它可能有其它的名字，叫“云”只是时髦一点。功能是类似的，就是通过Web门户，向内部IT用户提供便捷的通道去申请、维护和销毁虚拟机资源。这是一个很自然的需求，也有很多第三方厂家去做这样的平台。这样的平台也可能存在各种安全问题。\n\n它的Web Portal账号是如何创建并管理的？它有多少个管理员权限的用户？它有没有默认密码？它的管理员账号日常是交给谁管理的？Web Portal有没有常见的Web漏洞，如SQL注入等。它后台的服务器包括数据库服务器有没有弱密码？它与vCenter、vSphere的联动是通过vCenter账号还是API Key来进行的？账号或API Key有没有加密存储？等等。\n\n### 风险点六\n\n**通过端口扫描获取虚拟机信息**\n\n6、补充：VMware产品的扫描和发现\n作为一个内部渗透人员，如果对企业环境中的VMware产品（包括vCenter、ESXi等）进行发现和识别呢？这个也是有技巧的。首先VMware产品有特定的服务端口，例如22,80,427,443,902,9875等。其次服务的banner信息，或者ssl证书信息中包含有VMware或vSphere等关键字。这样就可以使用zmap等扫描器+banner获取快速地发现网络中VMware产品。那么，如何确定vCenter与它所纳管的ESXi之间的逻辑关系呢？诀窍就是SLP协议与vpxa的API。SLP协议可以获取目标IP地址的VMware主机名、ESXi版本，例如：\n\n\t~# /usr/bin/slptool 'unicastfindsrvs'  10.1.12.135 'service:VMwareInfrastructure' \n                            \n\tservice:VMwareInfrastructure://10.1.12.135,65535\n                            \n\t~# /usr/bin/slptool 'unicastfindattrs'  10.1.12.135 'service:VMwareInfrastructure'\n                            \n\t(product=\"VMware ESXi 6.0.0build-1921158\"),(hardwareUuid=\"32393735-3733-4E43-4731-313954385050\")\n\n而vpxa API可以查询到ESXi所纳管的vCenter地址：\nURL为：url_fmt = ‘https://%s/vpxa‘ %(ip)\n两个SOAP请求如下：\n\tapixml1='''<?xml version=\"1.0\"encoding=\"UTF-8\"?>\n\t                            \n\t<soapenv:Envelopexmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\"xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"                                http://www.w3.org/2001/XMLSchema\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n                            \n\t<soapenv:Body><QueryVpxaStatusxmlns=\"urn:vpxa3\"><_this\n \n\ttype=\"VpxapiVpxaService\">vpxa</_this></QueryVpxaStatus></soapenv:Body></soapenv:Envelope>'''\n                            \n                            \n\tapixml2='''<?xml version=\"1.0\"encoding=\"UTF-8\"?>\n                            \n\t<soapenv:Envelopexmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\"xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"                                 xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n                            \n\t<soapenv:Body><GetVpxaInfoxmlns=\"urn:vpxa3\"><_thistype=\"VpxapiVpxaService\">vpxa</_this></GetVpxaInfo></soapenv:Body></soapenv:Envelope>'''","source":"_posts/VMware-security.md","raw":"---\ntitle: VMware security\ndate: 2018-05-02 16:33:39\ntags:\n\t- security\n\t- vmware\ncategory:\n\t- security\n\t- vmware\n---\n*VMware虚拟化之后，典型的部署场景是这样的,对于下面的架构也会存在安全隐患*\n{% img vmware /2018/05/02/VMware-security/vmware.png %}\n\n### 风险点一\n\n**管理员可能没有修改带外管理接口的默认密码，或者设置了弱密码、企业内众所周知的通用密码。**\n\n1、首先，要有效管理和监控大量的物理服务器，管理员必须借助服务器提供的硬件管理接口和带外管理网络才能实现。例如，惠普的iLO接口，Dell和浪潮的IPMI接口，通过一个Web或Ssh界面，都能实现服务器硬件健康状态的监控、电源和开关、操作系统的安装、远程控制台等功能。\n\n### 风险点二\n\n**某些ESXi Server可能使用了弱密码，后来忘了修改。所有的ESXi Server使用相同的密码，也许写在了运维手册里。**\n\n2、其次，在虚拟主机操作系统层面，管理员需要管理大量的ESXi Server，可能需要借助外包或驻场才能完成系统的安装和初始设置，然后才能投入使用。\n关于弱密码实际是非常容易遇到的。\n\n### 风险点三\n\n**ESXi Server从来没有打过补丁，可能存在安全漏洞。**\n\n3、再次，因为每个虚拟主机上都跑着几十上百个的虚拟客户机，使得管理员轻易做不敢对虚拟主机任何变更操作。\n\n### 风险点四\n\n**不同管理员，操作权限的控制**\n\n4、再往更高的层走，到达vCenter这里\n拿到vCenter的管理权限，便可以统治成百上千的虚拟机了。而管理成百上千台的虚拟机，肯定不是一两个人可以做得来的。也许需要按照功能区域划分给不同的人去管理，日常的变更操作也许会交给驻场团队去进行。这便涉及到账号和权限的安全问题。\n\n在主要的vCenter上，也许域控服务器就在其中，你现在可以对它进行一个热克隆操作，克隆一个离线的虚拟机，然后用vCenter的控制台去登录它，导出域数据库，通过vCenter拷贝到其它你控制的虚拟机中（例如，通过共享虚拟磁盘），再把克隆的机器删除。这个过程对于域控管理员来说，一点感知都没有，域控服务器自身也不会有任何异常的系统事件产生。\n\n### 风险点五\n\n**外部web portal的安全问题**\n\n5、让我们把目光投向更远的地方，落在那个称为“云”管理平台的系统上。实际上，它可能有其它的名字，叫“云”只是时髦一点。功能是类似的，就是通过Web门户，向内部IT用户提供便捷的通道去申请、维护和销毁虚拟机资源。这是一个很自然的需求，也有很多第三方厂家去做这样的平台。这样的平台也可能存在各种安全问题。\n\n它的Web Portal账号是如何创建并管理的？它有多少个管理员权限的用户？它有没有默认密码？它的管理员账号日常是交给谁管理的？Web Portal有没有常见的Web漏洞，如SQL注入等。它后台的服务器包括数据库服务器有没有弱密码？它与vCenter、vSphere的联动是通过vCenter账号还是API Key来进行的？账号或API Key有没有加密存储？等等。\n\n### 风险点六\n\n**通过端口扫描获取虚拟机信息**\n\n6、补充：VMware产品的扫描和发现\n作为一个内部渗透人员，如果对企业环境中的VMware产品（包括vCenter、ESXi等）进行发现和识别呢？这个也是有技巧的。首先VMware产品有特定的服务端口，例如22,80,427,443,902,9875等。其次服务的banner信息，或者ssl证书信息中包含有VMware或vSphere等关键字。这样就可以使用zmap等扫描器+banner获取快速地发现网络中VMware产品。那么，如何确定vCenter与它所纳管的ESXi之间的逻辑关系呢？诀窍就是SLP协议与vpxa的API。SLP协议可以获取目标IP地址的VMware主机名、ESXi版本，例如：\n\n\t~# /usr/bin/slptool 'unicastfindsrvs'  10.1.12.135 'service:VMwareInfrastructure' \n                            \n\tservice:VMwareInfrastructure://10.1.12.135,65535\n                            \n\t~# /usr/bin/slptool 'unicastfindattrs'  10.1.12.135 'service:VMwareInfrastructure'\n                            \n\t(product=\"VMware ESXi 6.0.0build-1921158\"),(hardwareUuid=\"32393735-3733-4E43-4731-313954385050\")\n\n而vpxa API可以查询到ESXi所纳管的vCenter地址：\nURL为：url_fmt = ‘https://%s/vpxa‘ %(ip)\n两个SOAP请求如下：\n\tapixml1='''<?xml version=\"1.0\"encoding=\"UTF-8\"?>\n\t                            \n\t<soapenv:Envelopexmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\"xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"                                http://www.w3.org/2001/XMLSchema\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n                            \n\t<soapenv:Body><QueryVpxaStatusxmlns=\"urn:vpxa3\"><_this\n \n\ttype=\"VpxapiVpxaService\">vpxa</_this></QueryVpxaStatus></soapenv:Body></soapenv:Envelope>'''\n                            \n                            \n\tapixml2='''<?xml version=\"1.0\"encoding=\"UTF-8\"?>\n                            \n\t<soapenv:Envelopexmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\"xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"                                 xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n                            \n\t<soapenv:Body><GetVpxaInfoxmlns=\"urn:vpxa3\"><_thistype=\"VpxapiVpxaService\">vpxa</_this></GetVpxaInfo></soapenv:Body></soapenv:Envelope>'''","slug":"VMware-security","published":1,"updated":"2018-05-02T08:57:25.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwonsp0008wgl1t48d58q2","content":"<p><em>VMware虚拟化之后，典型的部署场景是这样的,对于下面的架构也会存在安全隐患</em><br><img src=\"/2018/05/02/VMware-security/vmware.png\" class=\"vmware\"></p>\n<h3 id=\"风险点一\"><a href=\"#风险点一\" class=\"headerlink\" title=\"风险点一\"></a>风险点一</h3><p><strong>管理员可能没有修改带外管理接口的默认密码，或者设置了弱密码、企业内众所周知的通用密码。</strong></p>\n<p>1、首先，要有效管理和监控大量的物理服务器，管理员必须借助服务器提供的硬件管理接口和带外管理网络才能实现。例如，惠普的iLO接口，Dell和浪潮的IPMI接口，通过一个Web或Ssh界面，都能实现服务器硬件健康状态的监控、电源和开关、操作系统的安装、远程控制台等功能。</p>\n<h3 id=\"风险点二\"><a href=\"#风险点二\" class=\"headerlink\" title=\"风险点二\"></a>风险点二</h3><p><strong>某些ESXi Server可能使用了弱密码，后来忘了修改。所有的ESXi Server使用相同的密码，也许写在了运维手册里。</strong></p>\n<p>2、其次，在虚拟主机操作系统层面，管理员需要管理大量的ESXi Server，可能需要借助外包或驻场才能完成系统的安装和初始设置，然后才能投入使用。<br>关于弱密码实际是非常容易遇到的。</p>\n<h3 id=\"风险点三\"><a href=\"#风险点三\" class=\"headerlink\" title=\"风险点三\"></a>风险点三</h3><p><strong>ESXi Server从来没有打过补丁，可能存在安全漏洞。</strong></p>\n<p>3、再次，因为每个虚拟主机上都跑着几十上百个的虚拟客户机，使得管理员轻易做不敢对虚拟主机任何变更操作。</p>\n<h3 id=\"风险点四\"><a href=\"#风险点四\" class=\"headerlink\" title=\"风险点四\"></a>风险点四</h3><p><strong>不同管理员，操作权限的控制</strong></p>\n<p>4、再往更高的层走，到达vCenter这里<br>拿到vCenter的管理权限，便可以统治成百上千的虚拟机了。而管理成百上千台的虚拟机，肯定不是一两个人可以做得来的。也许需要按照功能区域划分给不同的人去管理，日常的变更操作也许会交给驻场团队去进行。这便涉及到账号和权限的安全问题。</p>\n<p>在主要的vCenter上，也许域控服务器就在其中，你现在可以对它进行一个热克隆操作，克隆一个离线的虚拟机，然后用vCenter的控制台去登录它，导出域数据库，通过vCenter拷贝到其它你控制的虚拟机中（例如，通过共享虚拟磁盘），再把克隆的机器删除。这个过程对于域控管理员来说，一点感知都没有，域控服务器自身也不会有任何异常的系统事件产生。</p>\n<h3 id=\"风险点五\"><a href=\"#风险点五\" class=\"headerlink\" title=\"风险点五\"></a>风险点五</h3><p><strong>外部web portal的安全问题</strong></p>\n<p>5、让我们把目光投向更远的地方，落在那个称为“云”管理平台的系统上。实际上，它可能有其它的名字，叫“云”只是时髦一点。功能是类似的，就是通过Web门户，向内部IT用户提供便捷的通道去申请、维护和销毁虚拟机资源。这是一个很自然的需求，也有很多第三方厂家去做这样的平台。这样的平台也可能存在各种安全问题。</p>\n<p>它的Web Portal账号是如何创建并管理的？它有多少个管理员权限的用户？它有没有默认密码？它的管理员账号日常是交给谁管理的？Web Portal有没有常见的Web漏洞，如SQL注入等。它后台的服务器包括数据库服务器有没有弱密码？它与vCenter、vSphere的联动是通过vCenter账号还是API Key来进行的？账号或API Key有没有加密存储？等等。</p>\n<h3 id=\"风险点六\"><a href=\"#风险点六\" class=\"headerlink\" title=\"风险点六\"></a>风险点六</h3><p><strong>通过端口扫描获取虚拟机信息</strong></p>\n<p>6、补充：VMware产品的扫描和发现<br>作为一个内部渗透人员，如果对企业环境中的VMware产品（包括vCenter、ESXi等）进行发现和识别呢？这个也是有技巧的。首先VMware产品有特定的服务端口，例如22,80,427,443,902,9875等。其次服务的banner信息，或者ssl证书信息中包含有VMware或vSphere等关键字。这样就可以使用zmap等扫描器+banner获取快速地发现网络中VMware产品。那么，如何确定vCenter与它所纳管的ESXi之间的逻辑关系呢？诀窍就是SLP协议与vpxa的API。SLP协议可以获取目标IP地址的VMware主机名、ESXi版本，例如：</p>\n<pre><code>~# /usr/bin/slptool &#39;unicastfindsrvs&#39;  10.1.12.135 &#39;service:VMwareInfrastructure&#39; \n\nservice:VMwareInfrastructure://10.1.12.135,65535\n\n~# /usr/bin/slptool &#39;unicastfindattrs&#39;  10.1.12.135 &#39;service:VMwareInfrastructure&#39;\n\n(product=&quot;VMware ESXi 6.0.0build-1921158&quot;),(hardwareUuid=&quot;32393735-3733-4E43-4731-313954385050&quot;)\n</code></pre><p>而vpxa API可以查询到ESXi所纳管的vCenter地址：<br>URL为：url_fmt = ‘https://%s/vpxa‘ %(ip)<br>两个SOAP请求如下：<br>    apixml1=’’’&lt;?xml version=”1.0”encoding=”UTF-8”?&gt;</p>\n<pre><code>&lt;soapenv:Envelopexmlns:soapenc=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;                                http://www.w3.org/2001/XMLSchema&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;\n\n&lt;soapenv:Body&gt;&lt;QueryVpxaStatusxmlns=&quot;urn:vpxa3&quot;&gt;&lt;_this\n\ntype=&quot;VpxapiVpxaService&quot;&gt;vpxa&lt;/_this&gt;&lt;/QueryVpxaStatus&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;&#39;&#39;&#39;\n\n\napixml2=&#39;&#39;&#39;&lt;?xml version=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;\n\n&lt;soapenv:Envelopexmlns:soapenc=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;                                 xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;\n\n&lt;soapenv:Body&gt;&lt;GetVpxaInfoxmlns=&quot;urn:vpxa3&quot;&gt;&lt;_thistype=&quot;VpxapiVpxaService&quot;&gt;vpxa&lt;/_this&gt;&lt;/GetVpxaInfo&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;&#39;&#39;&#39;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><em>VMware虚拟化之后，典型的部署场景是这样的,对于下面的架构也会存在安全隐患</em><br><img src=\"/2018/05/02/VMware-security/vmware.png\" class=\"vmware\"></p>\n<h3 id=\"风险点一\"><a href=\"#风险点一\" class=\"headerlink\" title=\"风险点一\"></a>风险点一</h3><p><strong>管理员可能没有修改带外管理接口的默认密码，或者设置了弱密码、企业内众所周知的通用密码。</strong></p>\n<p>1、首先，要有效管理和监控大量的物理服务器，管理员必须借助服务器提供的硬件管理接口和带外管理网络才能实现。例如，惠普的iLO接口，Dell和浪潮的IPMI接口，通过一个Web或Ssh界面，都能实现服务器硬件健康状态的监控、电源和开关、操作系统的安装、远程控制台等功能。</p>\n<h3 id=\"风险点二\"><a href=\"#风险点二\" class=\"headerlink\" title=\"风险点二\"></a>风险点二</h3><p><strong>某些ESXi Server可能使用了弱密码，后来忘了修改。所有的ESXi Server使用相同的密码，也许写在了运维手册里。</strong></p>\n<p>2、其次，在虚拟主机操作系统层面，管理员需要管理大量的ESXi Server，可能需要借助外包或驻场才能完成系统的安装和初始设置，然后才能投入使用。<br>关于弱密码实际是非常容易遇到的。</p>\n<h3 id=\"风险点三\"><a href=\"#风险点三\" class=\"headerlink\" title=\"风险点三\"></a>风险点三</h3><p><strong>ESXi Server从来没有打过补丁，可能存在安全漏洞。</strong></p>\n<p>3、再次，因为每个虚拟主机上都跑着几十上百个的虚拟客户机，使得管理员轻易做不敢对虚拟主机任何变更操作。</p>\n<h3 id=\"风险点四\"><a href=\"#风险点四\" class=\"headerlink\" title=\"风险点四\"></a>风险点四</h3><p><strong>不同管理员，操作权限的控制</strong></p>\n<p>4、再往更高的层走，到达vCenter这里<br>拿到vCenter的管理权限，便可以统治成百上千的虚拟机了。而管理成百上千台的虚拟机，肯定不是一两个人可以做得来的。也许需要按照功能区域划分给不同的人去管理，日常的变更操作也许会交给驻场团队去进行。这便涉及到账号和权限的安全问题。</p>\n<p>在主要的vCenter上，也许域控服务器就在其中，你现在可以对它进行一个热克隆操作，克隆一个离线的虚拟机，然后用vCenter的控制台去登录它，导出域数据库，通过vCenter拷贝到其它你控制的虚拟机中（例如，通过共享虚拟磁盘），再把克隆的机器删除。这个过程对于域控管理员来说，一点感知都没有，域控服务器自身也不会有任何异常的系统事件产生。</p>\n<h3 id=\"风险点五\"><a href=\"#风险点五\" class=\"headerlink\" title=\"风险点五\"></a>风险点五</h3><p><strong>外部web portal的安全问题</strong></p>\n<p>5、让我们把目光投向更远的地方，落在那个称为“云”管理平台的系统上。实际上，它可能有其它的名字，叫“云”只是时髦一点。功能是类似的，就是通过Web门户，向内部IT用户提供便捷的通道去申请、维护和销毁虚拟机资源。这是一个很自然的需求，也有很多第三方厂家去做这样的平台。这样的平台也可能存在各种安全问题。</p>\n<p>它的Web Portal账号是如何创建并管理的？它有多少个管理员权限的用户？它有没有默认密码？它的管理员账号日常是交给谁管理的？Web Portal有没有常见的Web漏洞，如SQL注入等。它后台的服务器包括数据库服务器有没有弱密码？它与vCenter、vSphere的联动是通过vCenter账号还是API Key来进行的？账号或API Key有没有加密存储？等等。</p>\n<h3 id=\"风险点六\"><a href=\"#风险点六\" class=\"headerlink\" title=\"风险点六\"></a>风险点六</h3><p><strong>通过端口扫描获取虚拟机信息</strong></p>\n<p>6、补充：VMware产品的扫描和发现<br>作为一个内部渗透人员，如果对企业环境中的VMware产品（包括vCenter、ESXi等）进行发现和识别呢？这个也是有技巧的。首先VMware产品有特定的服务端口，例如22,80,427,443,902,9875等。其次服务的banner信息，或者ssl证书信息中包含有VMware或vSphere等关键字。这样就可以使用zmap等扫描器+banner获取快速地发现网络中VMware产品。那么，如何确定vCenter与它所纳管的ESXi之间的逻辑关系呢？诀窍就是SLP协议与vpxa的API。SLP协议可以获取目标IP地址的VMware主机名、ESXi版本，例如：</p>\n<pre><code>~# /usr/bin/slptool &#39;unicastfindsrvs&#39;  10.1.12.135 &#39;service:VMwareInfrastructure&#39; \n\nservice:VMwareInfrastructure://10.1.12.135,65535\n\n~# /usr/bin/slptool &#39;unicastfindattrs&#39;  10.1.12.135 &#39;service:VMwareInfrastructure&#39;\n\n(product=&quot;VMware ESXi 6.0.0build-1921158&quot;),(hardwareUuid=&quot;32393735-3733-4E43-4731-313954385050&quot;)\n</code></pre><p>而vpxa API可以查询到ESXi所纳管的vCenter地址：<br>URL为：url_fmt = ‘https://%s/vpxa‘ %(ip)<br>两个SOAP请求如下：<br>    apixml1=’’’&lt;?xml version=”1.0”encoding=”UTF-8”?&gt;</p>\n<pre><code>&lt;soapenv:Envelopexmlns:soapenc=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;                                http://www.w3.org/2001/XMLSchema&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;\n\n&lt;soapenv:Body&gt;&lt;QueryVpxaStatusxmlns=&quot;urn:vpxa3&quot;&gt;&lt;_this\n\ntype=&quot;VpxapiVpxaService&quot;&gt;vpxa&lt;/_this&gt;&lt;/QueryVpxaStatus&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;&#39;&#39;&#39;\n\n\napixml2=&#39;&#39;&#39;&lt;?xml version=&quot;1.0&quot;encoding=&quot;UTF-8&quot;?&gt;\n\n&lt;soapenv:Envelopexmlns:soapenc=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;                                 xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;\n\n&lt;soapenv:Body&gt;&lt;GetVpxaInfoxmlns=&quot;urn:vpxa3&quot;&gt;&lt;_thistype=&quot;VpxapiVpxaService&quot;&gt;vpxa&lt;/_this&gt;&lt;/GetVpxaInfo&gt;&lt;/soapenv:Body&gt;&lt;/soapenv:Envelope&gt;&#39;&#39;&#39;\n</code></pre>"},{"title":"Over The Great Wall","date":"2018-04-28T02:47:01.000Z","_content":"*科学上网是每个有志知识青年的必备技能，不仅要翻过围墙看外面的世界，还要从外面看围墙内的世界*\n\n### Tools\n\nClient + Server + (Broswer Proxy Extension + GFW List)\n\n通过安装客户端(Client)与在墙外的服务器(Server)建立加密的连接.这种连接除了VPN外，还有基于Shadowsocks这种代理的解决方案，当然也有一些直接的墙外代理服务器，但是所有的数据都会被代理看到，不是一个很安全的方式。(Broswer Proxy Extention + GFW List)这个可选的方案。使科学上网变得更完美。\n\n\n### Client\n#### Shadowsocks Solution (free)\n##### Clients Download\n页面不一定能打开，但是可以根据图片找到对应的平台搜索提供的Client，**Android或iOS**建议在APP Store中找Outline，亲测有效。(有人反馈在国内的Android应用中找不到Outline，已经上传到我的Github，[点击下载](https://github.com/philippe233/outline-for-android/archive/master.zip))\n\nhttps://shadowsocks.org/en/download/clients.html\n\n{% img client /2018/04/28/Over-The-Great-Wall/client.png %}\n\n##### Client Config\n\n<https://shadowsocks.org/en/config/quick-guide.html>\n\n\n1. Config File\nShadowsocks accepts JSON format configs like this:\n\n\t\t{\n    \t\"server\":\"my_server_ip\",\n    \t\"server_port\":8388,\n    \t\"local_port\":1080,\n    \t\"password\":\"barfoo!\",\n    \t\"timeout\":600,\n\t\t\"method\":\"chacha20-ietf-poly1305\"\n\t\t}\n\n2. Explanation of each field:\n\n\tserver: your hostname or server IP (IPv4/IPv6).\n\tserver_port: server port number.\n\tlocal_port: local port number.\n\tpassword: a password used to encrypt transfer.\n\ttimeout: connections timeout in seconds.\n\tmethod: encryption method.\n\n#### VPN Solution (charge)\n通过VPN方案，选择一些付费的墙外VPN服务器，获取稳定，方便，快捷的科学上网方式。下面列出一些比较实用的VPN工具\n\n* [ExpressVPN](https://www.express-vpn-mirror.club/techradar)\n* [TunnelBear](http://click.tunnelbear.com/aff_c?offer_id=40&aff_id=2940)\n* [Windscribe](https://windscribe.com/upgrade?promo=WS50OFF&afftag=trd-5380592452726525657&affid=fghzq9e1)\n* [Hotspot Shield Free](http://hsselite.7eer.net/c/356741/64013/1691)\n* [Speedify](http://speedify.evyy.net/c/221109/311275/3088)\n* [ProtonVPN Free](https://account.protonvpn.com/signup)\n\n\n\n### Server\n#### Free Shadowsocks Server list\n我们应该感谢这个开放的互联网世界，总有一些热心青年不求任何回报的分享这些免费的资源。这些SS Server都已经配置好了分享出来的，只需要通过将安装的Client配置连接其中的一个服务器，成功后你就可以开始科学上网了。\n\n通过下面第一个Node配置到客户端上翻墙后，打开第二链接获取更多节点。\n\n* [定时更新node](https://freess.pub/)\n\n* [中国免费科学上网解决方案](https://blackpaperxyz.zdhweb.com/2017/02/my-free-ways-of-how-to-use-gmail-in-china.html)(需要翻墙)\n\n* 个人珍藏Singapore Node：\n\n\tss://YWVzLTI1Ni1jZmI6d3d3LnNoYWRvd3NvY2tzcGguc3BhY2VAMTI4LjE5OS42Ni4xNzY6NDQz\n\n\n#### Private Shodowsocks Server Oversea\n如果自己有一定的动手能力，AWS在墙外的服务器可以部署一台EC2 Server，最重要的12个月最低配置Free~。\n\n[AWS EC2 SS Server 搭建教程](http://www.tyrion.wang/2017/02/04/VPN%E6%90%AD%E5%BB%BA-%E4%BA%9A%E9%A9%AC%E9%80%8AEC2-Shadowsocks/)\n\n\n\n### Broswer Proxy Extension\n有童鞋要问通过上面两个方法已经可以翻墙了，为什么还要这个浏览器插件。\n\n情况是当使用上面工具后所有流量都通过翻墙到国外了，如果需要访问国内网站，通过翻墙代理后在连接国内服务器，会碰到特别慢和打不开的情况。\n\n如果有一个开关，它可以自动根据你访问的域名选择走本地网络出去还是走VPN线路出去，需要时还可以手动选择，这个是不是很智能和实用！！！这就是下面要介绍的。\n\n#### SwitchyOmega\n真的非常好用，个人一直在使用的一个Chrome代理插件。\n\n{% img switchyomege /2018/04/28/Over-The-Great-Wall/switchyomega.png %}\n\n#### FoxyProxy\n推荐FoxyProxy虽然没有SwitchyOmega好用，但是这个是不同浏览器支持的。\n\n{% img foxyproxy /2018/04/28/Over-The-Great-Wall/foxyproxy.png %}\n\n\n\n### GFW List\n不多说，非常实用...而且持续更新\n\n<https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt>\n\n\n设置到上面的Proxy Extension中\n\n{% img autoproxy /2018/04/28/Over-The-Great-Wall/autoproxy.png %}","source":"_posts/Over-The-Great-Wall.md","raw":"---\ntitle: Over The Great Wall\ndate: 2018-04-28 10:47:01\ntags:\n\t- tool\ncategory:\n\t- tool\n---\n*科学上网是每个有志知识青年的必备技能，不仅要翻过围墙看外面的世界，还要从外面看围墙内的世界*\n\n### Tools\n\nClient + Server + (Broswer Proxy Extension + GFW List)\n\n通过安装客户端(Client)与在墙外的服务器(Server)建立加密的连接.这种连接除了VPN外，还有基于Shadowsocks这种代理的解决方案，当然也有一些直接的墙外代理服务器，但是所有的数据都会被代理看到，不是一个很安全的方式。(Broswer Proxy Extention + GFW List)这个可选的方案。使科学上网变得更完美。\n\n\n### Client\n#### Shadowsocks Solution (free)\n##### Clients Download\n页面不一定能打开，但是可以根据图片找到对应的平台搜索提供的Client，**Android或iOS**建议在APP Store中找Outline，亲测有效。(有人反馈在国内的Android应用中找不到Outline，已经上传到我的Github，[点击下载](https://github.com/philippe233/outline-for-android/archive/master.zip))\n\nhttps://shadowsocks.org/en/download/clients.html\n\n{% img client /2018/04/28/Over-The-Great-Wall/client.png %}\n\n##### Client Config\n\n<https://shadowsocks.org/en/config/quick-guide.html>\n\n\n1. Config File\nShadowsocks accepts JSON format configs like this:\n\n\t\t{\n    \t\"server\":\"my_server_ip\",\n    \t\"server_port\":8388,\n    \t\"local_port\":1080,\n    \t\"password\":\"barfoo!\",\n    \t\"timeout\":600,\n\t\t\"method\":\"chacha20-ietf-poly1305\"\n\t\t}\n\n2. Explanation of each field:\n\n\tserver: your hostname or server IP (IPv4/IPv6).\n\tserver_port: server port number.\n\tlocal_port: local port number.\n\tpassword: a password used to encrypt transfer.\n\ttimeout: connections timeout in seconds.\n\tmethod: encryption method.\n\n#### VPN Solution (charge)\n通过VPN方案，选择一些付费的墙外VPN服务器，获取稳定，方便，快捷的科学上网方式。下面列出一些比较实用的VPN工具\n\n* [ExpressVPN](https://www.express-vpn-mirror.club/techradar)\n* [TunnelBear](http://click.tunnelbear.com/aff_c?offer_id=40&aff_id=2940)\n* [Windscribe](https://windscribe.com/upgrade?promo=WS50OFF&afftag=trd-5380592452726525657&affid=fghzq9e1)\n* [Hotspot Shield Free](http://hsselite.7eer.net/c/356741/64013/1691)\n* [Speedify](http://speedify.evyy.net/c/221109/311275/3088)\n* [ProtonVPN Free](https://account.protonvpn.com/signup)\n\n\n\n### Server\n#### Free Shadowsocks Server list\n我们应该感谢这个开放的互联网世界，总有一些热心青年不求任何回报的分享这些免费的资源。这些SS Server都已经配置好了分享出来的，只需要通过将安装的Client配置连接其中的一个服务器，成功后你就可以开始科学上网了。\n\n通过下面第一个Node配置到客户端上翻墙后，打开第二链接获取更多节点。\n\n* [定时更新node](https://freess.pub/)\n\n* [中国免费科学上网解决方案](https://blackpaperxyz.zdhweb.com/2017/02/my-free-ways-of-how-to-use-gmail-in-china.html)(需要翻墙)\n\n* 个人珍藏Singapore Node：\n\n\tss://YWVzLTI1Ni1jZmI6d3d3LnNoYWRvd3NvY2tzcGguc3BhY2VAMTI4LjE5OS42Ni4xNzY6NDQz\n\n\n#### Private Shodowsocks Server Oversea\n如果自己有一定的动手能力，AWS在墙外的服务器可以部署一台EC2 Server，最重要的12个月最低配置Free~。\n\n[AWS EC2 SS Server 搭建教程](http://www.tyrion.wang/2017/02/04/VPN%E6%90%AD%E5%BB%BA-%E4%BA%9A%E9%A9%AC%E9%80%8AEC2-Shadowsocks/)\n\n\n\n### Broswer Proxy Extension\n有童鞋要问通过上面两个方法已经可以翻墙了，为什么还要这个浏览器插件。\n\n情况是当使用上面工具后所有流量都通过翻墙到国外了，如果需要访问国内网站，通过翻墙代理后在连接国内服务器，会碰到特别慢和打不开的情况。\n\n如果有一个开关，它可以自动根据你访问的域名选择走本地网络出去还是走VPN线路出去，需要时还可以手动选择，这个是不是很智能和实用！！！这就是下面要介绍的。\n\n#### SwitchyOmega\n真的非常好用，个人一直在使用的一个Chrome代理插件。\n\n{% img switchyomege /2018/04/28/Over-The-Great-Wall/switchyomega.png %}\n\n#### FoxyProxy\n推荐FoxyProxy虽然没有SwitchyOmega好用，但是这个是不同浏览器支持的。\n\n{% img foxyproxy /2018/04/28/Over-The-Great-Wall/foxyproxy.png %}\n\n\n\n### GFW List\n不多说，非常实用...而且持续更新\n\n<https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt>\n\n\n设置到上面的Proxy Extension中\n\n{% img autoproxy /2018/04/28/Over-The-Great-Wall/autoproxy.png %}","slug":"Over-The-Great-Wall","published":1,"updated":"2018-05-08T09:37:36.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwonst000bwgl1843j12jt","content":"<p><em>科学上网是每个有志知识青年的必备技能，不仅要翻过围墙看外面的世界，还要从外面看围墙内的世界</em></p>\n<h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><p>Client + Server + (Broswer Proxy Extension + GFW List)</p>\n<p>通过安装客户端(Client)与在墙外的服务器(Server)建立加密的连接.这种连接除了VPN外，还有基于Shadowsocks这种代理的解决方案，当然也有一些直接的墙外代理服务器，但是所有的数据都会被代理看到，不是一个很安全的方式。(Broswer Proxy Extention + GFW List)这个可选的方案。使科学上网变得更完美。</p>\n<h3 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h3><h4 id=\"Shadowsocks-Solution-free\"><a href=\"#Shadowsocks-Solution-free\" class=\"headerlink\" title=\"Shadowsocks Solution (free)\"></a>Shadowsocks Solution (free)</h4><h5 id=\"Clients-Download\"><a href=\"#Clients-Download\" class=\"headerlink\" title=\"Clients Download\"></a>Clients Download</h5><p>页面不一定能打开，但是可以根据图片找到对应的平台搜索提供的Client，<strong>Android或iOS</strong>建议在APP Store中找Outline，亲测有效。(有人反馈在国内的Android应用中找不到Outline，已经上传到我的Github，<a href=\"https://github.com/philippe233/outline-for-android/archive/master.zip\" target=\"_blank\" rel=\"noopener\">点击下载</a>)</p>\n<p><a href=\"https://shadowsocks.org/en/download/clients.html\" target=\"_blank\" rel=\"noopener\">https://shadowsocks.org/en/download/clients.html</a></p>\n<img src=\"/2018/04/28/Over-The-Great-Wall/client.png\" class=\"client\">\n<h5 id=\"Client-Config\"><a href=\"#Client-Config\" class=\"headerlink\" title=\"Client Config\"></a>Client Config</h5><p><a href=\"https://shadowsocks.org/en/config/quick-guide.html\" target=\"_blank\" rel=\"noopener\">https://shadowsocks.org/en/config/quick-guide.html</a></p>\n<ol>\n<li><p>Config File<br>Shadowsocks accepts JSON format configs like this:</p>\n<pre><code> {\n &quot;server&quot;:&quot;my_server_ip&quot;,\n &quot;server_port&quot;:8388,\n &quot;local_port&quot;:1080,\n &quot;password&quot;:&quot;barfoo!&quot;,\n &quot;timeout&quot;:600,\n &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;\n }\n</code></pre></li>\n<li><p>Explanation of each field:</p>\n<p> server: your hostname or server IP (IPv4/IPv6).<br> server_port: server port number.<br> local_port: local port number.<br> password: a password used to encrypt transfer.<br> timeout: connections timeout in seconds.<br> method: encryption method.</p>\n</li>\n</ol>\n<h4 id=\"VPN-Solution-charge\"><a href=\"#VPN-Solution-charge\" class=\"headerlink\" title=\"VPN Solution (charge)\"></a>VPN Solution (charge)</h4><p>通过VPN方案，选择一些付费的墙外VPN服务器，获取稳定，方便，快捷的科学上网方式。下面列出一些比较实用的VPN工具</p>\n<ul>\n<li><a href=\"https://www.express-vpn-mirror.club/techradar\" target=\"_blank\" rel=\"noopener\">ExpressVPN</a></li>\n<li><a href=\"http://click.tunnelbear.com/aff_c?offer_id=40&amp;aff_id=2940\" target=\"_blank\" rel=\"noopener\">TunnelBear</a></li>\n<li><a href=\"https://windscribe.com/upgrade?promo=WS50OFF&amp;afftag=trd-5380592452726525657&amp;affid=fghzq9e1\" target=\"_blank\" rel=\"noopener\">Windscribe</a></li>\n<li><a href=\"http://hsselite.7eer.net/c/356741/64013/1691\" target=\"_blank\" rel=\"noopener\">Hotspot Shield Free</a></li>\n<li><a href=\"http://speedify.evyy.net/c/221109/311275/3088\" target=\"_blank\" rel=\"noopener\">Speedify</a></li>\n<li><a href=\"https://account.protonvpn.com/signup\" target=\"_blank\" rel=\"noopener\">ProtonVPN Free</a></li>\n</ul>\n<h3 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h3><h4 id=\"Free-Shadowsocks-Server-list\"><a href=\"#Free-Shadowsocks-Server-list\" class=\"headerlink\" title=\"Free Shadowsocks Server list\"></a>Free Shadowsocks Server list</h4><p>我们应该感谢这个开放的互联网世界，总有一些热心青年不求任何回报的分享这些免费的资源。这些SS Server都已经配置好了分享出来的，只需要通过将安装的Client配置连接其中的一个服务器，成功后你就可以开始科学上网了。</p>\n<p>通过下面第一个Node配置到客户端上翻墙后，打开第二链接获取更多节点。</p>\n<ul>\n<li><p><a href=\"https://freess.pub/\" target=\"_blank\" rel=\"noopener\">定时更新node</a></p>\n</li>\n<li><p><a href=\"https://blackpaperxyz.zdhweb.com/2017/02/my-free-ways-of-how-to-use-gmail-in-china.html\" target=\"_blank\" rel=\"noopener\">中国免费科学上网解决方案</a>(需要翻墙)</p>\n</li>\n<li><p>个人珍藏Singapore Node：</p>\n<p>  ss://YWVzLTI1Ni1jZmI6d3d3LnNoYWRvd3NvY2tzcGguc3BhY2VAMTI4LjE5OS42Ni4xNzY6NDQz</p>\n</li>\n</ul>\n<h4 id=\"Private-Shodowsocks-Server-Oversea\"><a href=\"#Private-Shodowsocks-Server-Oversea\" class=\"headerlink\" title=\"Private Shodowsocks Server Oversea\"></a>Private Shodowsocks Server Oversea</h4><p>如果自己有一定的动手能力，AWS在墙外的服务器可以部署一台EC2 Server，最重要的12个月最低配置Free~。</p>\n<p><a href=\"http://www.tyrion.wang/2017/02/04/VPN%E6%90%AD%E5%BB%BA-%E4%BA%9A%E9%A9%AC%E9%80%8AEC2-Shadowsocks/\" target=\"_blank\" rel=\"noopener\">AWS EC2 SS Server 搭建教程</a></p>\n<h3 id=\"Broswer-Proxy-Extension\"><a href=\"#Broswer-Proxy-Extension\" class=\"headerlink\" title=\"Broswer Proxy Extension\"></a>Broswer Proxy Extension</h3><p>有童鞋要问通过上面两个方法已经可以翻墙了，为什么还要这个浏览器插件。</p>\n<p>情况是当使用上面工具后所有流量都通过翻墙到国外了，如果需要访问国内网站，通过翻墙代理后在连接国内服务器，会碰到特别慢和打不开的情况。</p>\n<p>如果有一个开关，它可以自动根据你访问的域名选择走本地网络出去还是走VPN线路出去，需要时还可以手动选择，这个是不是很智能和实用！！！这就是下面要介绍的。</p>\n<h4 id=\"SwitchyOmega\"><a href=\"#SwitchyOmega\" class=\"headerlink\" title=\"SwitchyOmega\"></a>SwitchyOmega</h4><p>真的非常好用，个人一直在使用的一个Chrome代理插件。</p>\n<img src=\"/2018/04/28/Over-The-Great-Wall/switchyomega.png\" class=\"switchyomege\">\n<h4 id=\"FoxyProxy\"><a href=\"#FoxyProxy\" class=\"headerlink\" title=\"FoxyProxy\"></a>FoxyProxy</h4><p>推荐FoxyProxy虽然没有SwitchyOmega好用，但是这个是不同浏览器支持的。</p>\n<img src=\"/2018/04/28/Over-The-Great-Wall/foxyproxy.png\" class=\"foxyproxy\">\n<h3 id=\"GFW-List\"><a href=\"#GFW-List\" class=\"headerlink\" title=\"GFW List\"></a>GFW List</h3><p>不多说，非常实用…而且持续更新</p>\n<p><a href=\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></p>\n<p>设置到上面的Proxy Extension中</p>\n<img src=\"/2018/04/28/Over-The-Great-Wall/autoproxy.png\" class=\"autoproxy\">","site":{"data":{}},"excerpt":"","more":"<p><em>科学上网是每个有志知识青年的必备技能，不仅要翻过围墙看外面的世界，还要从外面看围墙内的世界</em></p>\n<h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><p>Client + Server + (Broswer Proxy Extension + GFW List)</p>\n<p>通过安装客户端(Client)与在墙外的服务器(Server)建立加密的连接.这种连接除了VPN外，还有基于Shadowsocks这种代理的解决方案，当然也有一些直接的墙外代理服务器，但是所有的数据都会被代理看到，不是一个很安全的方式。(Broswer Proxy Extention + GFW List)这个可选的方案。使科学上网变得更完美。</p>\n<h3 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h3><h4 id=\"Shadowsocks-Solution-free\"><a href=\"#Shadowsocks-Solution-free\" class=\"headerlink\" title=\"Shadowsocks Solution (free)\"></a>Shadowsocks Solution (free)</h4><h5 id=\"Clients-Download\"><a href=\"#Clients-Download\" class=\"headerlink\" title=\"Clients Download\"></a>Clients Download</h5><p>页面不一定能打开，但是可以根据图片找到对应的平台搜索提供的Client，<strong>Android或iOS</strong>建议在APP Store中找Outline，亲测有效。(有人反馈在国内的Android应用中找不到Outline，已经上传到我的Github，<a href=\"https://github.com/philippe233/outline-for-android/archive/master.zip\" target=\"_blank\" rel=\"noopener\">点击下载</a>)</p>\n<p><a href=\"https://shadowsocks.org/en/download/clients.html\" target=\"_blank\" rel=\"noopener\">https://shadowsocks.org/en/download/clients.html</a></p>\n<img src=\"/2018/04/28/Over-The-Great-Wall/client.png\" class=\"client\">\n<h5 id=\"Client-Config\"><a href=\"#Client-Config\" class=\"headerlink\" title=\"Client Config\"></a>Client Config</h5><p><a href=\"https://shadowsocks.org/en/config/quick-guide.html\" target=\"_blank\" rel=\"noopener\">https://shadowsocks.org/en/config/quick-guide.html</a></p>\n<ol>\n<li><p>Config File<br>Shadowsocks accepts JSON format configs like this:</p>\n<pre><code> {\n &quot;server&quot;:&quot;my_server_ip&quot;,\n &quot;server_port&quot;:8388,\n &quot;local_port&quot;:1080,\n &quot;password&quot;:&quot;barfoo!&quot;,\n &quot;timeout&quot;:600,\n &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;\n }\n</code></pre></li>\n<li><p>Explanation of each field:</p>\n<p> server: your hostname or server IP (IPv4/IPv6).<br> server_port: server port number.<br> local_port: local port number.<br> password: a password used to encrypt transfer.<br> timeout: connections timeout in seconds.<br> method: encryption method.</p>\n</li>\n</ol>\n<h4 id=\"VPN-Solution-charge\"><a href=\"#VPN-Solution-charge\" class=\"headerlink\" title=\"VPN Solution (charge)\"></a>VPN Solution (charge)</h4><p>通过VPN方案，选择一些付费的墙外VPN服务器，获取稳定，方便，快捷的科学上网方式。下面列出一些比较实用的VPN工具</p>\n<ul>\n<li><a href=\"https://www.express-vpn-mirror.club/techradar\" target=\"_blank\" rel=\"noopener\">ExpressVPN</a></li>\n<li><a href=\"http://click.tunnelbear.com/aff_c?offer_id=40&amp;aff_id=2940\" target=\"_blank\" rel=\"noopener\">TunnelBear</a></li>\n<li><a href=\"https://windscribe.com/upgrade?promo=WS50OFF&amp;afftag=trd-5380592452726525657&amp;affid=fghzq9e1\" target=\"_blank\" rel=\"noopener\">Windscribe</a></li>\n<li><a href=\"http://hsselite.7eer.net/c/356741/64013/1691\" target=\"_blank\" rel=\"noopener\">Hotspot Shield Free</a></li>\n<li><a href=\"http://speedify.evyy.net/c/221109/311275/3088\" target=\"_blank\" rel=\"noopener\">Speedify</a></li>\n<li><a href=\"https://account.protonvpn.com/signup\" target=\"_blank\" rel=\"noopener\">ProtonVPN Free</a></li>\n</ul>\n<h3 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h3><h4 id=\"Free-Shadowsocks-Server-list\"><a href=\"#Free-Shadowsocks-Server-list\" class=\"headerlink\" title=\"Free Shadowsocks Server list\"></a>Free Shadowsocks Server list</h4><p>我们应该感谢这个开放的互联网世界，总有一些热心青年不求任何回报的分享这些免费的资源。这些SS Server都已经配置好了分享出来的，只需要通过将安装的Client配置连接其中的一个服务器，成功后你就可以开始科学上网了。</p>\n<p>通过下面第一个Node配置到客户端上翻墙后，打开第二链接获取更多节点。</p>\n<ul>\n<li><p><a href=\"https://freess.pub/\" target=\"_blank\" rel=\"noopener\">定时更新node</a></p>\n</li>\n<li><p><a href=\"https://blackpaperxyz.zdhweb.com/2017/02/my-free-ways-of-how-to-use-gmail-in-china.html\" target=\"_blank\" rel=\"noopener\">中国免费科学上网解决方案</a>(需要翻墙)</p>\n</li>\n<li><p>个人珍藏Singapore Node：</p>\n<p>  ss://YWVzLTI1Ni1jZmI6d3d3LnNoYWRvd3NvY2tzcGguc3BhY2VAMTI4LjE5OS42Ni4xNzY6NDQz</p>\n</li>\n</ul>\n<h4 id=\"Private-Shodowsocks-Server-Oversea\"><a href=\"#Private-Shodowsocks-Server-Oversea\" class=\"headerlink\" title=\"Private Shodowsocks Server Oversea\"></a>Private Shodowsocks Server Oversea</h4><p>如果自己有一定的动手能力，AWS在墙外的服务器可以部署一台EC2 Server，最重要的12个月最低配置Free~。</p>\n<p><a href=\"http://www.tyrion.wang/2017/02/04/VPN%E6%90%AD%E5%BB%BA-%E4%BA%9A%E9%A9%AC%E9%80%8AEC2-Shadowsocks/\" target=\"_blank\" rel=\"noopener\">AWS EC2 SS Server 搭建教程</a></p>\n<h3 id=\"Broswer-Proxy-Extension\"><a href=\"#Broswer-Proxy-Extension\" class=\"headerlink\" title=\"Broswer Proxy Extension\"></a>Broswer Proxy Extension</h3><p>有童鞋要问通过上面两个方法已经可以翻墙了，为什么还要这个浏览器插件。</p>\n<p>情况是当使用上面工具后所有流量都通过翻墙到国外了，如果需要访问国内网站，通过翻墙代理后在连接国内服务器，会碰到特别慢和打不开的情况。</p>\n<p>如果有一个开关，它可以自动根据你访问的域名选择走本地网络出去还是走VPN线路出去，需要时还可以手动选择，这个是不是很智能和实用！！！这就是下面要介绍的。</p>\n<h4 id=\"SwitchyOmega\"><a href=\"#SwitchyOmega\" class=\"headerlink\" title=\"SwitchyOmega\"></a>SwitchyOmega</h4><p>真的非常好用，个人一直在使用的一个Chrome代理插件。</p>\n<img src=\"/2018/04/28/Over-The-Great-Wall/switchyomega.png\" class=\"switchyomege\">\n<h4 id=\"FoxyProxy\"><a href=\"#FoxyProxy\" class=\"headerlink\" title=\"FoxyProxy\"></a>FoxyProxy</h4><p>推荐FoxyProxy虽然没有SwitchyOmega好用，但是这个是不同浏览器支持的。</p>\n<img src=\"/2018/04/28/Over-The-Great-Wall/foxyproxy.png\" class=\"foxyproxy\">\n<h3 id=\"GFW-List\"><a href=\"#GFW-List\" class=\"headerlink\" title=\"GFW List\"></a>GFW List</h3><p>不多说，非常实用…而且持续更新</p>\n<p><a href=\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></p>\n<p>设置到上面的Proxy Extension中</p>\n<img src=\"/2018/04/28/Over-The-Great-Wall/autoproxy.png\" class=\"autoproxy\">"},{"title":"ARP Protocol","date":"2018-05-08T06:52:42.000Z","_content":"_ARP(Address Resolution Protocol)用于链路层地址发现的的协商协议。将已经分配了网络层的IPv4地址进行关联，该协议被定义在RFC 826标准中。\nARP已经应用于多种不同的数据链路层的技术。例如IPv4，Chaosnet，DECnet和PUP。FDDI，X.25,Frame Relay，ATM等。_\n\n\n### Operating scope\n\nARP协议基于请求-响应链路层封装协议。数据包传输的边界为单个网络，不会再夸网段范围内传输。 ARP的该特性是基于因特网协议组的数据链路层工作模式。\n\n### Packet strature\n\nARP使用简单消息格式包括地址解析的请求和响应包。包的大小基于上下层协议地址而决定。通常在IPv4网络协议下使用Hardware Address或virtual link address。消息报头定义了协议的类型和每个地址的大小。同事消息的头部Operation code定义了请求（1）和响应（2）。Payload中一共有4个地址，收发主机的Hardware Address和收发主机的IP地址。\n\n下图中是一个标准的ARP数据包结构。如图所示，数据包包括48位的Sender Hardware Address（SHA）和Target Hardware Address（THA），以及32位的Sender/Target Protocol Address(SPA/TPA),因此协议包总共大小为28字节，ARP的以太帧类型ID为0x0806。\n\n{% img arp /2018/05/08/arp-protocol/arp-payload.png %}\n\n**Hardware type (HTYPE)**\n该字段定义了网络层协议类型。 例如，以太网为1\n\n**Protocol type (PTYPE)**\n该字段定义数据包类型为ARP协议数据包，对于IPv4中对应的值为0x8000，改字段允许与以太帧其他类型共用。\n\n**Hardware length (HLEN)**\nHardware Address长度，以太网中地址长度为6字节。\n\n**Protocol length (PLEN)**\n上层协议的地址长度（上层协议类型定义在PTYPE字段），在IPv4中大小为4字节。\n\n**Operation** \n定义消息的操作类型。1表示请求，2表示响应。\n\n**Sender hardware address (SHA)**\n发送者的物理地址，在ARP请求包中该字段主要是用于表示请求消息的发送地址。在ARP响应包中，该字段被用于指示请求者需要查找的地址。对于交换机来说对改字段不会做任何更改只是用于MAC地址的学习。\n\n**Sender protocol address (SPA)**\n局域网中发送者的网络地址。\n\n**Target hardware address (THA)**\n数据包接收者的物理地址，在ARP请求包中该字段为空。在ARP响应包中该字段被用于表示原始ARP请求者的物理地址。\n\n**Target protocol address (TPA)**\n局域网中的目标接受者网络地址。\n\n### Example\n主机A的IP地址为192.168.1.1，MAC地址为0A-11-22-33-44-01；\n\n主机B的IP地址为192.168.1.2，MAC地址为0A-11-22-33-44-02；\n\n当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程：\n\n第1步：根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。\n\n第2步：如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。\n\n第3步：主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。\n\n第4步：主机B将包含其MAC地址的ARP回复消息直接发送回主机A。\n\n第5步：当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。\n\n### ARP probe\nARP检测是一类ARP请求包，其结构为发送者的网络IP地址（SPA）为空，被用于网络中IPv4地址冲突发现，当一台主机需要使用一个IPv4地址时，可以广播ARP probe包确认该IP地址是否正在被使用。\n\n### ARP announcements\nARP也当简单的消息宣告使用，可以用于更新主机IP地址与MAC地址的映射出现变更。这种ARP类型也叫做gratuitous ARP（GARP）消息。常见的情况是消息发送者通过广播自己的网络地址（SPA）到目标区域网络，并且包的Target Hardware Address(THA)为空。\n\nGARP请求消息和响应消息都是标准类型。ARP宣告并不是为了是对方产生响应消息，而是更新目标主机的的ARP Cache表。其OPeration code既可以是请求类型也可以是响应类型，因为在ARP标准中规定者这种操作只是更新ARP表。许多操作系统在系统启动阶段就可以处理GARP消息。 这有助于及时更新网络中其他设备的ARP-IP的映射表。\n\n\t[root@localhost ~]# arp -an\n\t? (192.168.150.236) at 00:50:56:9d:1f:96 [ether] on eno16780032\n\t? (192.168.150.246) at 00:17:54:02:07:6e [ether] on eno16780032\n\t? (192.168.150.57) at 00:50:56:9d:6a:ee [ether] on eno16780032\n\t? (192.168.150.13) at 00:50:56:9d:46:1e [ether] on eno16780032\n\t? (192.168.150.247) at 00:17:54:02:c7:f6 [ether] on eno16780032\n\t? (192.168.150.3) at 00:25:90:7a:a3:63 [ether] on eno16780032\n\t? (192.168.150.158) at 00:50:56:b9:a7:52 [ether] on eno16780032\n\t? (192.168.150.155) at 00:50:56:9d:77:05 [ether] on eno16780032\n\t? (192.168.150.1) at 00:10:f3:5d:fa:38 [ether] on eno16780032\n\t? (192.168.150.245) at 74:4b:e9:01:03:6c [ether] on eno16780032\n\t? (192.168.150.156) at <incomplete> on eno16780032\n\n\nGARP有时也会用于设备网口的负载均衡，在一个借口组中，宣告不同的MAC地址在端口组中能够接受所有的数据包。\n\n### ARP mediation\nARP中继用于解决二层地址需要夸越虚拟网络服务在复杂的网络环境中的问题。\n\n### Reverse ARP\n反向ARP解析被用于获得网络层地址（IP地址）通过二层数据链路地址。最开始用户Frame Relay和ATM网络。\n\n主要是正常的网络层数据包转发时，通过ARP表查看IP->MAC决定转发的端口，但是有时数据报需要通过ARP表查看其MAC地址对应的网络地址，然后决定路由情况。\n\n### Proxy ARP（ARP spoofing）\n因为ARP协议并没有提供ARP响应的认证方法，所有ARP响应可以不是从真实的物理地址主机产生。ARP Proxy是一个主机响应ARP请求在真实的主机之前，常见是在拨号上网的情况下出现，另外对于ARP spoofing响应，利用ARP协议截获ARP请求包并对请求主机响应消息。黑客可以通过这种使用ARP spoofing这种方法扮演中间人的角色，获取传输过程的数据包。\n\n{% img arp /2018/05/08/arp-protocol/arp-spoofing.png %}","source":"_posts/arp-protocol.md","raw":"---\ntitle: ARP Protocol\ndate: 2018-05-08 14:52:42\ntags:\n\t- network\ncategory:\n\t- network\n---\n_ARP(Address Resolution Protocol)用于链路层地址发现的的协商协议。将已经分配了网络层的IPv4地址进行关联，该协议被定义在RFC 826标准中。\nARP已经应用于多种不同的数据链路层的技术。例如IPv4，Chaosnet，DECnet和PUP。FDDI，X.25,Frame Relay，ATM等。_\n\n\n### Operating scope\n\nARP协议基于请求-响应链路层封装协议。数据包传输的边界为单个网络，不会再夸网段范围内传输。 ARP的该特性是基于因特网协议组的数据链路层工作模式。\n\n### Packet strature\n\nARP使用简单消息格式包括地址解析的请求和响应包。包的大小基于上下层协议地址而决定。通常在IPv4网络协议下使用Hardware Address或virtual link address。消息报头定义了协议的类型和每个地址的大小。同事消息的头部Operation code定义了请求（1）和响应（2）。Payload中一共有4个地址，收发主机的Hardware Address和收发主机的IP地址。\n\n下图中是一个标准的ARP数据包结构。如图所示，数据包包括48位的Sender Hardware Address（SHA）和Target Hardware Address（THA），以及32位的Sender/Target Protocol Address(SPA/TPA),因此协议包总共大小为28字节，ARP的以太帧类型ID为0x0806。\n\n{% img arp /2018/05/08/arp-protocol/arp-payload.png %}\n\n**Hardware type (HTYPE)**\n该字段定义了网络层协议类型。 例如，以太网为1\n\n**Protocol type (PTYPE)**\n该字段定义数据包类型为ARP协议数据包，对于IPv4中对应的值为0x8000，改字段允许与以太帧其他类型共用。\n\n**Hardware length (HLEN)**\nHardware Address长度，以太网中地址长度为6字节。\n\n**Protocol length (PLEN)**\n上层协议的地址长度（上层协议类型定义在PTYPE字段），在IPv4中大小为4字节。\n\n**Operation** \n定义消息的操作类型。1表示请求，2表示响应。\n\n**Sender hardware address (SHA)**\n发送者的物理地址，在ARP请求包中该字段主要是用于表示请求消息的发送地址。在ARP响应包中，该字段被用于指示请求者需要查找的地址。对于交换机来说对改字段不会做任何更改只是用于MAC地址的学习。\n\n**Sender protocol address (SPA)**\n局域网中发送者的网络地址。\n\n**Target hardware address (THA)**\n数据包接收者的物理地址，在ARP请求包中该字段为空。在ARP响应包中该字段被用于表示原始ARP请求者的物理地址。\n\n**Target protocol address (TPA)**\n局域网中的目标接受者网络地址。\n\n### Example\n主机A的IP地址为192.168.1.1，MAC地址为0A-11-22-33-44-01；\n\n主机B的IP地址为192.168.1.2，MAC地址为0A-11-22-33-44-02；\n\n当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程：\n\n第1步：根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。\n\n第2步：如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。\n\n第3步：主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。\n\n第4步：主机B将包含其MAC地址的ARP回复消息直接发送回主机A。\n\n第5步：当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。\n\n### ARP probe\nARP检测是一类ARP请求包，其结构为发送者的网络IP地址（SPA）为空，被用于网络中IPv4地址冲突发现，当一台主机需要使用一个IPv4地址时，可以广播ARP probe包确认该IP地址是否正在被使用。\n\n### ARP announcements\nARP也当简单的消息宣告使用，可以用于更新主机IP地址与MAC地址的映射出现变更。这种ARP类型也叫做gratuitous ARP（GARP）消息。常见的情况是消息发送者通过广播自己的网络地址（SPA）到目标区域网络，并且包的Target Hardware Address(THA)为空。\n\nGARP请求消息和响应消息都是标准类型。ARP宣告并不是为了是对方产生响应消息，而是更新目标主机的的ARP Cache表。其OPeration code既可以是请求类型也可以是响应类型，因为在ARP标准中规定者这种操作只是更新ARP表。许多操作系统在系统启动阶段就可以处理GARP消息。 这有助于及时更新网络中其他设备的ARP-IP的映射表。\n\n\t[root@localhost ~]# arp -an\n\t? (192.168.150.236) at 00:50:56:9d:1f:96 [ether] on eno16780032\n\t? (192.168.150.246) at 00:17:54:02:07:6e [ether] on eno16780032\n\t? (192.168.150.57) at 00:50:56:9d:6a:ee [ether] on eno16780032\n\t? (192.168.150.13) at 00:50:56:9d:46:1e [ether] on eno16780032\n\t? (192.168.150.247) at 00:17:54:02:c7:f6 [ether] on eno16780032\n\t? (192.168.150.3) at 00:25:90:7a:a3:63 [ether] on eno16780032\n\t? (192.168.150.158) at 00:50:56:b9:a7:52 [ether] on eno16780032\n\t? (192.168.150.155) at 00:50:56:9d:77:05 [ether] on eno16780032\n\t? (192.168.150.1) at 00:10:f3:5d:fa:38 [ether] on eno16780032\n\t? (192.168.150.245) at 74:4b:e9:01:03:6c [ether] on eno16780032\n\t? (192.168.150.156) at <incomplete> on eno16780032\n\n\nGARP有时也会用于设备网口的负载均衡，在一个借口组中，宣告不同的MAC地址在端口组中能够接受所有的数据包。\n\n### ARP mediation\nARP中继用于解决二层地址需要夸越虚拟网络服务在复杂的网络环境中的问题。\n\n### Reverse ARP\n反向ARP解析被用于获得网络层地址（IP地址）通过二层数据链路地址。最开始用户Frame Relay和ATM网络。\n\n主要是正常的网络层数据包转发时，通过ARP表查看IP->MAC决定转发的端口，但是有时数据报需要通过ARP表查看其MAC地址对应的网络地址，然后决定路由情况。\n\n### Proxy ARP（ARP spoofing）\n因为ARP协议并没有提供ARP响应的认证方法，所有ARP响应可以不是从真实的物理地址主机产生。ARP Proxy是一个主机响应ARP请求在真实的主机之前，常见是在拨号上网的情况下出现，另外对于ARP spoofing响应，利用ARP协议截获ARP请求包并对请求主机响应消息。黑客可以通过这种使用ARP spoofing这种方法扮演中间人的角色，获取传输过程的数据包。\n\n{% img arp /2018/05/08/arp-protocol/arp-spoofing.png %}","slug":"arp-protocol","published":1,"updated":"2018-05-08T07:02:45.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwonsw000cwgl196bfe929","content":"<p><em>ARP(Address Resolution Protocol)用于链路层地址发现的的协商协议。将已经分配了网络层的IPv4地址进行关联，该协议被定义在RFC 826标准中。<br>ARP已经应用于多种不同的数据链路层的技术。例如IPv4，Chaosnet，DECnet和PUP。FDDI，X.25,Frame Relay，ATM等。</em></p>\n<h3 id=\"Operating-scope\"><a href=\"#Operating-scope\" class=\"headerlink\" title=\"Operating scope\"></a>Operating scope</h3><p>ARP协议基于请求-响应链路层封装协议。数据包传输的边界为单个网络，不会再夸网段范围内传输。 ARP的该特性是基于因特网协议组的数据链路层工作模式。</p>\n<h3 id=\"Packet-strature\"><a href=\"#Packet-strature\" class=\"headerlink\" title=\"Packet strature\"></a>Packet strature</h3><p>ARP使用简单消息格式包括地址解析的请求和响应包。包的大小基于上下层协议地址而决定。通常在IPv4网络协议下使用Hardware Address或virtual link address。消息报头定义了协议的类型和每个地址的大小。同事消息的头部Operation code定义了请求（1）和响应（2）。Payload中一共有4个地址，收发主机的Hardware Address和收发主机的IP地址。</p>\n<p>下图中是一个标准的ARP数据包结构。如图所示，数据包包括48位的Sender Hardware Address（SHA）和Target Hardware Address（THA），以及32位的Sender/Target Protocol Address(SPA/TPA),因此协议包总共大小为28字节，ARP的以太帧类型ID为0x0806。</p>\n<img src=\"/2018/05/08/arp-protocol/arp-payload.png\" class=\"arp\">\n<p><strong>Hardware type (HTYPE)</strong><br>该字段定义了网络层协议类型。 例如，以太网为1</p>\n<p><strong>Protocol type (PTYPE)</strong><br>该字段定义数据包类型为ARP协议数据包，对于IPv4中对应的值为0x8000，改字段允许与以太帧其他类型共用。</p>\n<p><strong>Hardware length (HLEN)</strong><br>Hardware Address长度，以太网中地址长度为6字节。</p>\n<p><strong>Protocol length (PLEN)</strong><br>上层协议的地址长度（上层协议类型定义在PTYPE字段），在IPv4中大小为4字节。</p>\n<p><strong>Operation</strong><br>定义消息的操作类型。1表示请求，2表示响应。</p>\n<p><strong>Sender hardware address (SHA)</strong><br>发送者的物理地址，在ARP请求包中该字段主要是用于表示请求消息的发送地址。在ARP响应包中，该字段被用于指示请求者需要查找的地址。对于交换机来说对改字段不会做任何更改只是用于MAC地址的学习。</p>\n<p><strong>Sender protocol address (SPA)</strong><br>局域网中发送者的网络地址。</p>\n<p><strong>Target hardware address (THA)</strong><br>数据包接收者的物理地址，在ARP请求包中该字段为空。在ARP响应包中该字段被用于表示原始ARP请求者的物理地址。</p>\n<p><strong>Target protocol address (TPA)</strong><br>局域网中的目标接受者网络地址。</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>主机A的IP地址为192.168.1.1，MAC地址为0A-11-22-33-44-01；</p>\n<p>主机B的IP地址为192.168.1.2，MAC地址为0A-11-22-33-44-02；</p>\n<p>当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程：</p>\n<p>第1步：根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。</p>\n<p>第2步：如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。</p>\n<p>第3步：主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。</p>\n<p>第4步：主机B将包含其MAC地址的ARP回复消息直接发送回主机A。</p>\n<p>第5步：当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。</p>\n<h3 id=\"ARP-probe\"><a href=\"#ARP-probe\" class=\"headerlink\" title=\"ARP probe\"></a>ARP probe</h3><p>ARP检测是一类ARP请求包，其结构为发送者的网络IP地址（SPA）为空，被用于网络中IPv4地址冲突发现，当一台主机需要使用一个IPv4地址时，可以广播ARP probe包确认该IP地址是否正在被使用。</p>\n<h3 id=\"ARP-announcements\"><a href=\"#ARP-announcements\" class=\"headerlink\" title=\"ARP announcements\"></a>ARP announcements</h3><p>ARP也当简单的消息宣告使用，可以用于更新主机IP地址与MAC地址的映射出现变更。这种ARP类型也叫做gratuitous ARP（GARP）消息。常见的情况是消息发送者通过广播自己的网络地址（SPA）到目标区域网络，并且包的Target Hardware Address(THA)为空。</p>\n<p>GARP请求消息和响应消息都是标准类型。ARP宣告并不是为了是对方产生响应消息，而是更新目标主机的的ARP Cache表。其OPeration code既可以是请求类型也可以是响应类型，因为在ARP标准中规定者这种操作只是更新ARP表。许多操作系统在系统启动阶段就可以处理GARP消息。 这有助于及时更新网络中其他设备的ARP-IP的映射表。</p>\n<pre><code>[root@localhost ~]# arp -an\n? (192.168.150.236) at 00:50:56:9d:1f:96 [ether] on eno16780032\n? (192.168.150.246) at 00:17:54:02:07:6e [ether] on eno16780032\n? (192.168.150.57) at 00:50:56:9d:6a:ee [ether] on eno16780032\n? (192.168.150.13) at 00:50:56:9d:46:1e [ether] on eno16780032\n? (192.168.150.247) at 00:17:54:02:c7:f6 [ether] on eno16780032\n? (192.168.150.3) at 00:25:90:7a:a3:63 [ether] on eno16780032\n? (192.168.150.158) at 00:50:56:b9:a7:52 [ether] on eno16780032\n? (192.168.150.155) at 00:50:56:9d:77:05 [ether] on eno16780032\n? (192.168.150.1) at 00:10:f3:5d:fa:38 [ether] on eno16780032\n? (192.168.150.245) at 74:4b:e9:01:03:6c [ether] on eno16780032\n? (192.168.150.156) at &lt;incomplete&gt; on eno16780032\n</code></pre><p>GARP有时也会用于设备网口的负载均衡，在一个借口组中，宣告不同的MAC地址在端口组中能够接受所有的数据包。</p>\n<h3 id=\"ARP-mediation\"><a href=\"#ARP-mediation\" class=\"headerlink\" title=\"ARP mediation\"></a>ARP mediation</h3><p>ARP中继用于解决二层地址需要夸越虚拟网络服务在复杂的网络环境中的问题。</p>\n<h3 id=\"Reverse-ARP\"><a href=\"#Reverse-ARP\" class=\"headerlink\" title=\"Reverse ARP\"></a>Reverse ARP</h3><p>反向ARP解析被用于获得网络层地址（IP地址）通过二层数据链路地址。最开始用户Frame Relay和ATM网络。</p>\n<p>主要是正常的网络层数据包转发时，通过ARP表查看IP-&gt;MAC决定转发的端口，但是有时数据报需要通过ARP表查看其MAC地址对应的网络地址，然后决定路由情况。</p>\n<h3 id=\"Proxy-ARP（ARP-spoofing）\"><a href=\"#Proxy-ARP（ARP-spoofing）\" class=\"headerlink\" title=\"Proxy ARP（ARP spoofing）\"></a>Proxy ARP（ARP spoofing）</h3><p>因为ARP协议并没有提供ARP响应的认证方法，所有ARP响应可以不是从真实的物理地址主机产生。ARP Proxy是一个主机响应ARP请求在真实的主机之前，常见是在拨号上网的情况下出现，另外对于ARP spoofing响应，利用ARP协议截获ARP请求包并对请求主机响应消息。黑客可以通过这种使用ARP spoofing这种方法扮演中间人的角色，获取传输过程的数据包。</p>\n<img src=\"/2018/05/08/arp-protocol/arp-spoofing.png\" class=\"arp\">","site":{"data":{}},"excerpt":"","more":"<p><em>ARP(Address Resolution Protocol)用于链路层地址发现的的协商协议。将已经分配了网络层的IPv4地址进行关联，该协议被定义在RFC 826标准中。<br>ARP已经应用于多种不同的数据链路层的技术。例如IPv4，Chaosnet，DECnet和PUP。FDDI，X.25,Frame Relay，ATM等。</em></p>\n<h3 id=\"Operating-scope\"><a href=\"#Operating-scope\" class=\"headerlink\" title=\"Operating scope\"></a>Operating scope</h3><p>ARP协议基于请求-响应链路层封装协议。数据包传输的边界为单个网络，不会再夸网段范围内传输。 ARP的该特性是基于因特网协议组的数据链路层工作模式。</p>\n<h3 id=\"Packet-strature\"><a href=\"#Packet-strature\" class=\"headerlink\" title=\"Packet strature\"></a>Packet strature</h3><p>ARP使用简单消息格式包括地址解析的请求和响应包。包的大小基于上下层协议地址而决定。通常在IPv4网络协议下使用Hardware Address或virtual link address。消息报头定义了协议的类型和每个地址的大小。同事消息的头部Operation code定义了请求（1）和响应（2）。Payload中一共有4个地址，收发主机的Hardware Address和收发主机的IP地址。</p>\n<p>下图中是一个标准的ARP数据包结构。如图所示，数据包包括48位的Sender Hardware Address（SHA）和Target Hardware Address（THA），以及32位的Sender/Target Protocol Address(SPA/TPA),因此协议包总共大小为28字节，ARP的以太帧类型ID为0x0806。</p>\n<img src=\"/2018/05/08/arp-protocol/arp-payload.png\" class=\"arp\">\n<p><strong>Hardware type (HTYPE)</strong><br>该字段定义了网络层协议类型。 例如，以太网为1</p>\n<p><strong>Protocol type (PTYPE)</strong><br>该字段定义数据包类型为ARP协议数据包，对于IPv4中对应的值为0x8000，改字段允许与以太帧其他类型共用。</p>\n<p><strong>Hardware length (HLEN)</strong><br>Hardware Address长度，以太网中地址长度为6字节。</p>\n<p><strong>Protocol length (PLEN)</strong><br>上层协议的地址长度（上层协议类型定义在PTYPE字段），在IPv4中大小为4字节。</p>\n<p><strong>Operation</strong><br>定义消息的操作类型。1表示请求，2表示响应。</p>\n<p><strong>Sender hardware address (SHA)</strong><br>发送者的物理地址，在ARP请求包中该字段主要是用于表示请求消息的发送地址。在ARP响应包中，该字段被用于指示请求者需要查找的地址。对于交换机来说对改字段不会做任何更改只是用于MAC地址的学习。</p>\n<p><strong>Sender protocol address (SPA)</strong><br>局域网中发送者的网络地址。</p>\n<p><strong>Target hardware address (THA)</strong><br>数据包接收者的物理地址，在ARP请求包中该字段为空。在ARP响应包中该字段被用于表示原始ARP请求者的物理地址。</p>\n<p><strong>Target protocol address (TPA)</strong><br>局域网中的目标接受者网络地址。</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>主机A的IP地址为192.168.1.1，MAC地址为0A-11-22-33-44-01；</p>\n<p>主机B的IP地址为192.168.1.2，MAC地址为0A-11-22-33-44-02；</p>\n<p>当主机A要与主机B通信时，地址解析协议可以将主机B的IP地址（192.168.1.2）解析成主机B的MAC地址，以下为工作流程：</p>\n<p>第1步：根据主机A上的路由表内容，IP确定用于访问主机B的转发IP地址是192.168.1.2。然后A主机在自己的本地ARP缓存中检查主机B的匹配MAC地址。</p>\n<p>第2步：如果主机A在ARP缓存中没有找到映射，它将询问192.168.1.2的硬件地址，从而将ARP请求帧广播到本地网络上的所有主机。源主机A的IP地址和MAC地址都包括在ARP请求中。本地网络上的每台主机都接收到ARP请求并且检查是否与自己的IP地址匹配。如果主机发现请求的IP地址与自己的IP地址不匹配，它将丢弃ARP请求。</p>\n<p>第3步：主机B确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中。</p>\n<p>第4步：主机B将包含其MAC地址的ARP回复消息直接发送回主机A。</p>\n<p>第5步：当主机A收到从主机B发来的ARP回复消息时，会用主机B的IP和MAC地址映射更新ARP缓存。本机缓存是有生存期的，生存期结束后，将再次重复上面的过程。主机B的MAC地址一旦确定，主机A就能向主机B发送IP通信了。</p>\n<h3 id=\"ARP-probe\"><a href=\"#ARP-probe\" class=\"headerlink\" title=\"ARP probe\"></a>ARP probe</h3><p>ARP检测是一类ARP请求包，其结构为发送者的网络IP地址（SPA）为空，被用于网络中IPv4地址冲突发现，当一台主机需要使用一个IPv4地址时，可以广播ARP probe包确认该IP地址是否正在被使用。</p>\n<h3 id=\"ARP-announcements\"><a href=\"#ARP-announcements\" class=\"headerlink\" title=\"ARP announcements\"></a>ARP announcements</h3><p>ARP也当简单的消息宣告使用，可以用于更新主机IP地址与MAC地址的映射出现变更。这种ARP类型也叫做gratuitous ARP（GARP）消息。常见的情况是消息发送者通过广播自己的网络地址（SPA）到目标区域网络，并且包的Target Hardware Address(THA)为空。</p>\n<p>GARP请求消息和响应消息都是标准类型。ARP宣告并不是为了是对方产生响应消息，而是更新目标主机的的ARP Cache表。其OPeration code既可以是请求类型也可以是响应类型，因为在ARP标准中规定者这种操作只是更新ARP表。许多操作系统在系统启动阶段就可以处理GARP消息。 这有助于及时更新网络中其他设备的ARP-IP的映射表。</p>\n<pre><code>[root@localhost ~]# arp -an\n? (192.168.150.236) at 00:50:56:9d:1f:96 [ether] on eno16780032\n? (192.168.150.246) at 00:17:54:02:07:6e [ether] on eno16780032\n? (192.168.150.57) at 00:50:56:9d:6a:ee [ether] on eno16780032\n? (192.168.150.13) at 00:50:56:9d:46:1e [ether] on eno16780032\n? (192.168.150.247) at 00:17:54:02:c7:f6 [ether] on eno16780032\n? (192.168.150.3) at 00:25:90:7a:a3:63 [ether] on eno16780032\n? (192.168.150.158) at 00:50:56:b9:a7:52 [ether] on eno16780032\n? (192.168.150.155) at 00:50:56:9d:77:05 [ether] on eno16780032\n? (192.168.150.1) at 00:10:f3:5d:fa:38 [ether] on eno16780032\n? (192.168.150.245) at 74:4b:e9:01:03:6c [ether] on eno16780032\n? (192.168.150.156) at &lt;incomplete&gt; on eno16780032\n</code></pre><p>GARP有时也会用于设备网口的负载均衡，在一个借口组中，宣告不同的MAC地址在端口组中能够接受所有的数据包。</p>\n<h3 id=\"ARP-mediation\"><a href=\"#ARP-mediation\" class=\"headerlink\" title=\"ARP mediation\"></a>ARP mediation</h3><p>ARP中继用于解决二层地址需要夸越虚拟网络服务在复杂的网络环境中的问题。</p>\n<h3 id=\"Reverse-ARP\"><a href=\"#Reverse-ARP\" class=\"headerlink\" title=\"Reverse ARP\"></a>Reverse ARP</h3><p>反向ARP解析被用于获得网络层地址（IP地址）通过二层数据链路地址。最开始用户Frame Relay和ATM网络。</p>\n<p>主要是正常的网络层数据包转发时，通过ARP表查看IP-&gt;MAC决定转发的端口，但是有时数据报需要通过ARP表查看其MAC地址对应的网络地址，然后决定路由情况。</p>\n<h3 id=\"Proxy-ARP（ARP-spoofing）\"><a href=\"#Proxy-ARP（ARP-spoofing）\" class=\"headerlink\" title=\"Proxy ARP（ARP spoofing）\"></a>Proxy ARP（ARP spoofing）</h3><p>因为ARP协议并没有提供ARP响应的认证方法，所有ARP响应可以不是从真实的物理地址主机产生。ARP Proxy是一个主机响应ARP请求在真实的主机之前，常见是在拨号上网的情况下出现，另外对于ARP spoofing响应，利用ARP协议截获ARP请求包并对请求主机响应消息。黑客可以通过这种使用ARP spoofing这种方法扮演中间人的角色，获取传输过程的数据包。</p>\n<img src=\"/2018/05/08/arp-protocol/arp-spoofing.png\" class=\"arp\">"},{"title":"base64编码","date":"2018-04-24T07:02:02.000Z","_content":"*为什么当数据采用base64位编码传输时，传输的数据大小比真实文件大33%？这个在邮件传输时非常明显，经常碰到用户问为什么附件大小只有15M多一点，我服务器允许最大接收邮件时20M，但是邮件因为大小原因被拒绝。*\n\n\n### 为什么需要base64\n\nASCII码一共规定了128个字符的编码,这128个符号,范围在[0,127]之间.其中,[0,31],及127, 33个属于不可打印的控制字符.\n\n在电子邮件传输信息时,有些邮件网关会把[0,31]这些控制字符给悄悄清除.还有的早期程序,收到[128,255]之间的国际字符时,甚至会发生错误.\n\n如何在不同邮件网关之间安全的传输控制字符,国际字符,甚至二进制文件?于是作为MIME多媒体电子邮件标准的一部分—base64被开发出来.\n\n### 什么是base64\n\nBase64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。可查看RFC2045～RFC2049，上面有MIME的详细规范。\n\n在[encoding文章](https://www.hopeline.cn/2018/04/23/encoding/#more)中我提到每个国家读通过不同的方式在ASCII基础上扩展自己的文字编码。既然每个国家都有自己的编码表了，问题也就来了。现在都国际化了，我要用一个支持本国语言的编码系统，打开另一个编码系统编码的文本，会出现什么情况呢？这就是乱码了… 更为严重的是，随着互联网的出现，各个国家的电脑都需要通信，而通信的一种方式就是使用URL地址。每个国家都希望把这个地址写成自己国家的语言。但这会导致其他国家根本没法访问地址，因为打不出这个字符嘛。所以，人类迫切需要一种中间编码形式，既能够兼容ASCII码，又能够把任意一种编码形式转换成只使用可读字符就能表示的编码。\n\n其中一种编码形式，就是Base64编码。\n\nBase64编码，顾名思义，用64个可读字符进行编码。与Hex的16个字符（0-9，A-F）相比多了很多，但是比ASCII码又少了一倍，去除了不可读字符。标准Base64编码中，这些字符是：\n\n\t数字（10个）：0,1,2,3,4,5,6,7,8,9\n\t小写字母（26个）：a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\n\t大写字母（26个）：A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z\n\t加号以及斜杠（2个）：+，/\n\n有的时候，根据不同的需要，Base64还有很多变种。比如，如果浏览器地址中用“+”和“/”的话，浏览器会将其转换为%XX的形式，又多了一步。因此可以将“+”和“/”换成“-”和“_”。\n\n这种编码形式长度也短，效率也高。这样一来，数据通信的时候，不管来的是什么语言，都转化成Base64后再发送和接收。要是别国地址什么的打不出来，就直接打Base64编码形式就好了。\n\n### 原理\n对传输8Bit字节码的二进制数据进行处理，每3个字节一组，一共是3x8=24bit，划为4组，每组正好6个bit：\n\n{% img 8to6bit /2018/04/24/base64/8to6bit.png %}\n\n这样我们得到4个6bit数字作为索引，然后计算机是一个字节（8bit）存数，6bit不够，自动就补两个高位0了。 然后查下面表，获得相应的4个字符，就是base64编码后的字符串。\n\n{% img 8to6bit /2018/04/24/base64/base64.png %}\n\n__所以，Base64编码会把3字节的二进制数据编码为4字节的文本数据，长度增加33%，好处是编码后的文本数据可以在邮件正文、网页等直接显示。__\n\n如果要编码的二进制数据不是3的倍数，最后会剩下1个或2个字节怎么办？Base64用\\x00字节在末尾补足后，再在编码的末尾加上1个或2个=号，表示补了多少字节，解码的时候，会自动去掉。\n\n转码过程例子：将字符s13编码成base64\n\n\t字符：s 1 3\n\n\tascii：115 49 51\n\n\t2进制： 01110011 00110001 00110011\n\n\t6位一组（4组）： **011100**110011**000100**110011\n\n\t然后才有后面的： 011100 110011 000100 110011\n\n\t高位补0： 00011100 00110011 00000100 00110011\n\n\t得到： 28 51 4 51\n\n\t查对下照表： c z E z\n\n### base64在线编码和解码\n\n<http://www.webatic.com/run/convert/base64.php>\n\n\n### 应用\n\n* 用作HTTP表单和HTTP GET URL中的参数。\n\n* 用作MIME格式邮件SMTP传输\n\n* 用Base64来保密电子邮件密码 \n\n\n### 代码实现\n\n#### JavaScript\n\n\tif (!Shotgun)\n\t\tvar Shotgun = {};\n\tif (!Shotgun.Js)\n\t\tShotgun.Js = {};\n\tShotgun.Js.Base64 = {\n\t\t_table: [\n\t\t\t'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n\t\t\t'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',\n\t\t\t'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\n\t\t\t'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n\t\t],\n\t  \n\t\tencode: function (bin) {\n\t\t\tvar codes = [];\n\t\t\tvar un = 0;\n\t\t\tun = bin.length % 3;\n\t\t\tif (un == 1)\n\t\t\t\tbin.push(0, 0);\n\t\t\telse if (un == 2)\n\t\t\t\tbin.push(0);\n\t\t\tfor (var i = 2; i < bin.length; i += 3) {\n\t\t\t\tvar c = bin[i - 2] << 16;\n\t\t\t\tc |= bin[i - 1] << 8;\n\t\t\t\tc |= bin[i];\n\t\t\t\tcodes.push(this._table[c >> 18 & 0x3f]);\n\t\t\t\tcodes.push(this._table[c >> 12 & 0x3f]);\n\t\t\t\tcodes.push(this._table[c >> 6 & 0x3f]);\n\t\t\t\tcodes.push(this._table[c & 0x3f]);\n\t\t\t}\n\t\t\tif (un >= 1) {\n\t\t\t\tcodes[codes.length - 1] = \"=\";\n\t\t\t\tbin.pop();\n\t\t\t}\n\t\t\tif (un == 1) {\n\t\t\t\tcodes[codes.length - 2] = \"=\";\n\t\t\t\tbin.pop();\n\t\t\t}\n\t\t\treturn codes.join(\"\");\n\t\t},\n\t\tdecode: function (base64Str) {\n\t\t\tvar i = 0;\n\t\t\tvar bin = [];\n\t\t\tvar x = 0, code = 0, eq = 0;\n\t\t\twhile (i < base64Str.length) {\n\t\t\t\tvar c = base64Str.charAt(i++);\n\t\t\t\tvar idx = this._table.indexOf(c);\n\t\t\t\tif (idx == -1) {\n\t\t\t\t\tswitch (c) {\n\t\t\t\t\t\tcase '=': idx = 0; eq++; break;\n\t\t\t\t\t\tcase ' ':\n\t\t\t\t\t\tcase '\\n':\n\t\t\t\t\t\tcase \"\\r\":\n\t\t\t\t\t\tcase '\\t':\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow { \"message\": \"\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u65E0\\u6548\\u7F16\\u7801\\uFF1A\" + c };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (eq > 0 && idx != 0)\n\t\t\t\t\tthrow { \"message\": \"\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u7F16\\u7801\\u683C\\u5F0F\\u9519\\u8BEF\\uFF01\" };\n\t  \n\t\t\t\tcode = code << 6 | idx;\n\t\t\t\tif (++x != 4)\n\t\t\t\t\tcontinue;\n\t\t\t\tbin.push(code >> 16);\n\t\t\t\tbin.push(code >> 8 & 0xff);\n\t\t\t\tbin.push(code & 0xff)\n\t\t\t\tcode = x = 0;\n\t\t\t}\n\t\t\tif (code != 0)\n\t\t\t\tthrow { \"message\": \"\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u7F16\\u7801\\u6570\\u636E\\u957F\\u5EA6\\u9519\\u8BEF\" };\n\t\t\tif (eq == 1)\n\t\t\t\tbin.pop();\n\t\t\telse if (eq == 2) {\n\t\t\t\tbin.pop();\n\t\t\t\tbin.pop();\n\t\t\t} else if (eq > 2)\n\t\t\t\tthrow { \"message\": \"\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u7F16\\u7801\\u683C\\u5F0F\\u9519\\u8BEF\\uFF01\" };\n\t  \n\t\t\treturn bin;\n\t\t}\n\t};\n\n\n#### BASH\n\n\tbase64Table=(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9 + /);\n\t \n\tfunction str2binary() {\n\t\tidx=0;\n\t\tfor((i=0; i<${#str}; i++)); do\n\t\t\tdividend=$(printf \"%d\" \"'${str:i:1}\");\n\t\t\tfor((j=0;j<8;j++)); do\n\t\t\t\tlet idx=8*i+7-j;\n\t\t\t\tlet bin[$idx]=$dividend%2;\n\t\t\t\tdividend=$dividend/2;\n\t\t\tdone;\n\t\tdone;\n\t\tlet idx=${#str}*8;\n\t\tfor((i=0; i<appendEqualCnt*2; i++)); do\n\t\t\tlet bin[$idx]=0;\n\t\t\tlet idx++;\n\t\tdone;\n\t}\n\tfunction calcBase64() {\n\t\tfor((i=0; i<${#bin[*]}/6; i++)); do\n\t\t\tsum=0;\n\t\t\tfor((j=0; j<6; j++)); do\n\t\t\t\tlet idx=i*6+j;\n\t\t\t\tlet n=6-1-j;\n\t\t\t\tlet sum=sum+${bin[$idx]}*2**n;\n\t\t\tdone;\n\t\t\techo -n ${base64Table[$sum]};\n\t\tdone\n\t}\n\t \n\tdeclare -a bin\n\tfunction base64Encode() {\n\t\tread -p \"please enter ASCII string:\" str;\n\t\tlet appendZero=${#str}*8%6;\n\t\tlet bits=${#str}*8;\n\t\tappendEqualCnt=0;\n\t\tif [[ $appendZero -ne 0 ]]; then\n\t\t\tlet appendEqualCnt=(6-$appendZero)/2;\n\t\tfi\n\t\tstr2binary;\n\t\tcalcBase64;\n\t\tif [[ $appendEqualCnt -eq 2 ]]; then\n\t\t\techo -n \"==\";\n\t\telif [[ $appendEqualCnt -eq 1 ]]; then\n\t\t\techo -n \"=\";\n\t\tfi\n\t\techo;\n\t\t \n\t}\n\n\n#### Java\n\n\timport java.util.Base64;\n\t对于标准的Base64：\n\t加密为字符串使用Base64.getEncoder().encodeToString();\n\t加密为字节数组使用Base64.getEncoder().encode();\n\t解密使用Base64.getDecoder().decode();\n\t对于URL安全或MIME的Base64，只需将上述getEncoder()getDecoder()更换为getUrlEncoder()getUrlDecoder()\n\t或getMimeEncoder()和getMimeDecoder()即可。\n","source":"_posts/base64.md","raw":"---\ntitle: base64编码\ndate: 2018-04-24 15:02:02\ntags:\n\t- encode\ncategory:\n\t- encode\n---\n*为什么当数据采用base64位编码传输时，传输的数据大小比真实文件大33%？这个在邮件传输时非常明显，经常碰到用户问为什么附件大小只有15M多一点，我服务器允许最大接收邮件时20M，但是邮件因为大小原因被拒绝。*\n\n\n### 为什么需要base64\n\nASCII码一共规定了128个字符的编码,这128个符号,范围在[0,127]之间.其中,[0,31],及127, 33个属于不可打印的控制字符.\n\n在电子邮件传输信息时,有些邮件网关会把[0,31]这些控制字符给悄悄清除.还有的早期程序,收到[128,255]之间的国际字符时,甚至会发生错误.\n\n如何在不同邮件网关之间安全的传输控制字符,国际字符,甚至二进制文件?于是作为MIME多媒体电子邮件标准的一部分—base64被开发出来.\n\n### 什么是base64\n\nBase64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。可查看RFC2045～RFC2049，上面有MIME的详细规范。\n\n在[encoding文章](https://www.hopeline.cn/2018/04/23/encoding/#more)中我提到每个国家读通过不同的方式在ASCII基础上扩展自己的文字编码。既然每个国家都有自己的编码表了，问题也就来了。现在都国际化了，我要用一个支持本国语言的编码系统，打开另一个编码系统编码的文本，会出现什么情况呢？这就是乱码了… 更为严重的是，随着互联网的出现，各个国家的电脑都需要通信，而通信的一种方式就是使用URL地址。每个国家都希望把这个地址写成自己国家的语言。但这会导致其他国家根本没法访问地址，因为打不出这个字符嘛。所以，人类迫切需要一种中间编码形式，既能够兼容ASCII码，又能够把任意一种编码形式转换成只使用可读字符就能表示的编码。\n\n其中一种编码形式，就是Base64编码。\n\nBase64编码，顾名思义，用64个可读字符进行编码。与Hex的16个字符（0-9，A-F）相比多了很多，但是比ASCII码又少了一倍，去除了不可读字符。标准Base64编码中，这些字符是：\n\n\t数字（10个）：0,1,2,3,4,5,6,7,8,9\n\t小写字母（26个）：a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\n\t大写字母（26个）：A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z\n\t加号以及斜杠（2个）：+，/\n\n有的时候，根据不同的需要，Base64还有很多变种。比如，如果浏览器地址中用“+”和“/”的话，浏览器会将其转换为%XX的形式，又多了一步。因此可以将“+”和“/”换成“-”和“_”。\n\n这种编码形式长度也短，效率也高。这样一来，数据通信的时候，不管来的是什么语言，都转化成Base64后再发送和接收。要是别国地址什么的打不出来，就直接打Base64编码形式就好了。\n\n### 原理\n对传输8Bit字节码的二进制数据进行处理，每3个字节一组，一共是3x8=24bit，划为4组，每组正好6个bit：\n\n{% img 8to6bit /2018/04/24/base64/8to6bit.png %}\n\n这样我们得到4个6bit数字作为索引，然后计算机是一个字节（8bit）存数，6bit不够，自动就补两个高位0了。 然后查下面表，获得相应的4个字符，就是base64编码后的字符串。\n\n{% img 8to6bit /2018/04/24/base64/base64.png %}\n\n__所以，Base64编码会把3字节的二进制数据编码为4字节的文本数据，长度增加33%，好处是编码后的文本数据可以在邮件正文、网页等直接显示。__\n\n如果要编码的二进制数据不是3的倍数，最后会剩下1个或2个字节怎么办？Base64用\\x00字节在末尾补足后，再在编码的末尾加上1个或2个=号，表示补了多少字节，解码的时候，会自动去掉。\n\n转码过程例子：将字符s13编码成base64\n\n\t字符：s 1 3\n\n\tascii：115 49 51\n\n\t2进制： 01110011 00110001 00110011\n\n\t6位一组（4组）： **011100**110011**000100**110011\n\n\t然后才有后面的： 011100 110011 000100 110011\n\n\t高位补0： 00011100 00110011 00000100 00110011\n\n\t得到： 28 51 4 51\n\n\t查对下照表： c z E z\n\n### base64在线编码和解码\n\n<http://www.webatic.com/run/convert/base64.php>\n\n\n### 应用\n\n* 用作HTTP表单和HTTP GET URL中的参数。\n\n* 用作MIME格式邮件SMTP传输\n\n* 用Base64来保密电子邮件密码 \n\n\n### 代码实现\n\n#### JavaScript\n\n\tif (!Shotgun)\n\t\tvar Shotgun = {};\n\tif (!Shotgun.Js)\n\t\tShotgun.Js = {};\n\tShotgun.Js.Base64 = {\n\t\t_table: [\n\t\t\t'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n\t\t\t'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',\n\t\t\t'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\n\t\t\t'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n\t\t],\n\t  \n\t\tencode: function (bin) {\n\t\t\tvar codes = [];\n\t\t\tvar un = 0;\n\t\t\tun = bin.length % 3;\n\t\t\tif (un == 1)\n\t\t\t\tbin.push(0, 0);\n\t\t\telse if (un == 2)\n\t\t\t\tbin.push(0);\n\t\t\tfor (var i = 2; i < bin.length; i += 3) {\n\t\t\t\tvar c = bin[i - 2] << 16;\n\t\t\t\tc |= bin[i - 1] << 8;\n\t\t\t\tc |= bin[i];\n\t\t\t\tcodes.push(this._table[c >> 18 & 0x3f]);\n\t\t\t\tcodes.push(this._table[c >> 12 & 0x3f]);\n\t\t\t\tcodes.push(this._table[c >> 6 & 0x3f]);\n\t\t\t\tcodes.push(this._table[c & 0x3f]);\n\t\t\t}\n\t\t\tif (un >= 1) {\n\t\t\t\tcodes[codes.length - 1] = \"=\";\n\t\t\t\tbin.pop();\n\t\t\t}\n\t\t\tif (un == 1) {\n\t\t\t\tcodes[codes.length - 2] = \"=\";\n\t\t\t\tbin.pop();\n\t\t\t}\n\t\t\treturn codes.join(\"\");\n\t\t},\n\t\tdecode: function (base64Str) {\n\t\t\tvar i = 0;\n\t\t\tvar bin = [];\n\t\t\tvar x = 0, code = 0, eq = 0;\n\t\t\twhile (i < base64Str.length) {\n\t\t\t\tvar c = base64Str.charAt(i++);\n\t\t\t\tvar idx = this._table.indexOf(c);\n\t\t\t\tif (idx == -1) {\n\t\t\t\t\tswitch (c) {\n\t\t\t\t\t\tcase '=': idx = 0; eq++; break;\n\t\t\t\t\t\tcase ' ':\n\t\t\t\t\t\tcase '\\n':\n\t\t\t\t\t\tcase \"\\r\":\n\t\t\t\t\t\tcase '\\t':\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow { \"message\": \"\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u65E0\\u6548\\u7F16\\u7801\\uFF1A\" + c };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (eq > 0 && idx != 0)\n\t\t\t\t\tthrow { \"message\": \"\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u7F16\\u7801\\u683C\\u5F0F\\u9519\\u8BEF\\uFF01\" };\n\t  \n\t\t\t\tcode = code << 6 | idx;\n\t\t\t\tif (++x != 4)\n\t\t\t\t\tcontinue;\n\t\t\t\tbin.push(code >> 16);\n\t\t\t\tbin.push(code >> 8 & 0xff);\n\t\t\t\tbin.push(code & 0xff)\n\t\t\t\tcode = x = 0;\n\t\t\t}\n\t\t\tif (code != 0)\n\t\t\t\tthrow { \"message\": \"\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u7F16\\u7801\\u6570\\u636E\\u957F\\u5EA6\\u9519\\u8BEF\" };\n\t\t\tif (eq == 1)\n\t\t\t\tbin.pop();\n\t\t\telse if (eq == 2) {\n\t\t\t\tbin.pop();\n\t\t\t\tbin.pop();\n\t\t\t} else if (eq > 2)\n\t\t\t\tthrow { \"message\": \"\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u7F16\\u7801\\u683C\\u5F0F\\u9519\\u8BEF\\uFF01\" };\n\t  \n\t\t\treturn bin;\n\t\t}\n\t};\n\n\n#### BASH\n\n\tbase64Table=(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9 + /);\n\t \n\tfunction str2binary() {\n\t\tidx=0;\n\t\tfor((i=0; i<${#str}; i++)); do\n\t\t\tdividend=$(printf \"%d\" \"'${str:i:1}\");\n\t\t\tfor((j=0;j<8;j++)); do\n\t\t\t\tlet idx=8*i+7-j;\n\t\t\t\tlet bin[$idx]=$dividend%2;\n\t\t\t\tdividend=$dividend/2;\n\t\t\tdone;\n\t\tdone;\n\t\tlet idx=${#str}*8;\n\t\tfor((i=0; i<appendEqualCnt*2; i++)); do\n\t\t\tlet bin[$idx]=0;\n\t\t\tlet idx++;\n\t\tdone;\n\t}\n\tfunction calcBase64() {\n\t\tfor((i=0; i<${#bin[*]}/6; i++)); do\n\t\t\tsum=0;\n\t\t\tfor((j=0; j<6; j++)); do\n\t\t\t\tlet idx=i*6+j;\n\t\t\t\tlet n=6-1-j;\n\t\t\t\tlet sum=sum+${bin[$idx]}*2**n;\n\t\t\tdone;\n\t\t\techo -n ${base64Table[$sum]};\n\t\tdone\n\t}\n\t \n\tdeclare -a bin\n\tfunction base64Encode() {\n\t\tread -p \"please enter ASCII string:\" str;\n\t\tlet appendZero=${#str}*8%6;\n\t\tlet bits=${#str}*8;\n\t\tappendEqualCnt=0;\n\t\tif [[ $appendZero -ne 0 ]]; then\n\t\t\tlet appendEqualCnt=(6-$appendZero)/2;\n\t\tfi\n\t\tstr2binary;\n\t\tcalcBase64;\n\t\tif [[ $appendEqualCnt -eq 2 ]]; then\n\t\t\techo -n \"==\";\n\t\telif [[ $appendEqualCnt -eq 1 ]]; then\n\t\t\techo -n \"=\";\n\t\tfi\n\t\techo;\n\t\t \n\t}\n\n\n#### Java\n\n\timport java.util.Base64;\n\t对于标准的Base64：\n\t加密为字符串使用Base64.getEncoder().encodeToString();\n\t加密为字节数组使用Base64.getEncoder().encode();\n\t解密使用Base64.getDecoder().decode();\n\t对于URL安全或MIME的Base64，只需将上述getEncoder()getDecoder()更换为getUrlEncoder()getUrlDecoder()\n\t或getMimeEncoder()和getMimeDecoder()即可。\n","slug":"base64","published":1,"updated":"2018-04-28T05:51:10.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwont3000gwgl15m11eln7","content":"<p><em>为什么当数据采用base64位编码传输时，传输的数据大小比真实文件大33%？这个在邮件传输时非常明显，经常碰到用户问为什么附件大小只有15M多一点，我服务器允许最大接收邮件时20M，但是邮件因为大小原因被拒绝。</em></p>\n<h3 id=\"为什么需要base64\"><a href=\"#为什么需要base64\" class=\"headerlink\" title=\"为什么需要base64\"></a>为什么需要base64</h3><p>ASCII码一共规定了128个字符的编码,这128个符号,范围在[0,127]之间.其中,[0,31],及127, 33个属于不可打印的控制字符.</p>\n<p>在电子邮件传输信息时,有些邮件网关会把[0,31]这些控制字符给悄悄清除.还有的早期程序,收到[128,255]之间的国际字符时,甚至会发生错误.</p>\n<p>如何在不同邮件网关之间安全的传输控制字符,国际字符,甚至二进制文件?于是作为MIME多媒体电子邮件标准的一部分—base64被开发出来.</p>\n<h3 id=\"什么是base64\"><a href=\"#什么是base64\" class=\"headerlink\" title=\"什么是base64\"></a>什么是base64</h3><p>Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。可查看RFC2045～RFC2049，上面有MIME的详细规范。</p>\n<p>在<a href=\"https://www.hopeline.cn/2018/04/23/encoding/#more\" target=\"_blank\" rel=\"noopener\">encoding文章</a>中我提到每个国家读通过不同的方式在ASCII基础上扩展自己的文字编码。既然每个国家都有自己的编码表了，问题也就来了。现在都国际化了，我要用一个支持本国语言的编码系统，打开另一个编码系统编码的文本，会出现什么情况呢？这就是乱码了… 更为严重的是，随着互联网的出现，各个国家的电脑都需要通信，而通信的一种方式就是使用URL地址。每个国家都希望把这个地址写成自己国家的语言。但这会导致其他国家根本没法访问地址，因为打不出这个字符嘛。所以，人类迫切需要一种中间编码形式，既能够兼容ASCII码，又能够把任意一种编码形式转换成只使用可读字符就能表示的编码。</p>\n<p>其中一种编码形式，就是Base64编码。</p>\n<p>Base64编码，顾名思义，用64个可读字符进行编码。与Hex的16个字符（0-9，A-F）相比多了很多，但是比ASCII码又少了一倍，去除了不可读字符。标准Base64编码中，这些字符是：</p>\n<pre><code>数字（10个）：0,1,2,3,4,5,6,7,8,9\n小写字母（26个）：a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\n大写字母（26个）：A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z\n加号以及斜杠（2个）：+，/\n</code></pre><p>有的时候，根据不同的需要，Base64还有很多变种。比如，如果浏览器地址中用“+”和“/”的话，浏览器会将其转换为%XX的形式，又多了一步。因此可以将“+”和“/”换成“-”和“_”。</p>\n<p>这种编码形式长度也短，效率也高。这样一来，数据通信的时候，不管来的是什么语言，都转化成Base64后再发送和接收。要是别国地址什么的打不出来，就直接打Base64编码形式就好了。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>对传输8Bit字节码的二进制数据进行处理，每3个字节一组，一共是3x8=24bit，划为4组，每组正好6个bit：</p>\n<img src=\"/2018/04/24/base64/8to6bit.png\" class=\"8to6bit\">\n<p>这样我们得到4个6bit数字作为索引，然后计算机是一个字节（8bit）存数，6bit不够，自动就补两个高位0了。 然后查下面表，获得相应的4个字符，就是base64编码后的字符串。</p>\n<img src=\"/2018/04/24/base64/base64.png\" class=\"8to6bit\">\n<p><strong>所以，Base64编码会把3字节的二进制数据编码为4字节的文本数据，长度增加33%，好处是编码后的文本数据可以在邮件正文、网页等直接显示。</strong></p>\n<p>如果要编码的二进制数据不是3的倍数，最后会剩下1个或2个字节怎么办？Base64用\\x00字节在末尾补足后，再在编码的末尾加上1个或2个=号，表示补了多少字节，解码的时候，会自动去掉。</p>\n<p>转码过程例子：将字符s13编码成base64</p>\n<pre><code>字符：s 1 3\n\nascii：115 49 51\n\n2进制： 01110011 00110001 00110011\n\n6位一组（4组）： **011100**110011**000100**110011\n\n然后才有后面的： 011100 110011 000100 110011\n\n高位补0： 00011100 00110011 00000100 00110011\n\n得到： 28 51 4 51\n\n查对下照表： c z E z\n</code></pre><h3 id=\"base64在线编码和解码\"><a href=\"#base64在线编码和解码\" class=\"headerlink\" title=\"base64在线编码和解码\"></a>base64在线编码和解码</h3><p><a href=\"http://www.webatic.com/run/convert/base64.php\" target=\"_blank\" rel=\"noopener\">http://www.webatic.com/run/convert/base64.php</a></p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li><p>用作HTTP表单和HTTP GET URL中的参数。</p>\n</li>\n<li><p>用作MIME格式邮件SMTP传输</p>\n</li>\n<li><p>用Base64来保密电子邮件密码 </p>\n</li>\n</ul>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><h4 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h4><pre><code>if (!Shotgun)\n    var Shotgun = {};\nif (!Shotgun.Js)\n    Shotgun.Js = {};\nShotgun.Js.Base64 = {\n    _table: [\n        &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;, &#39;H&#39;, &#39;I&#39;, &#39;J&#39;, &#39;K&#39;, &#39;L&#39;, &#39;M&#39;, &#39;N&#39;, &#39;O&#39;, &#39;P&#39;,\n        &#39;Q&#39;, &#39;R&#39;, &#39;S&#39;, &#39;T&#39;, &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;,\n        &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;,\n        &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;+&#39;, &#39;/&#39;\n    ],\n\n    encode: function (bin) {\n        var codes = [];\n        var un = 0;\n        un = bin.length % 3;\n        if (un == 1)\n            bin.push(0, 0);\n        else if (un == 2)\n            bin.push(0);\n        for (var i = 2; i &lt; bin.length; i += 3) {\n            var c = bin[i - 2] &lt;&lt; 16;\n            c |= bin[i - 1] &lt;&lt; 8;\n            c |= bin[i];\n            codes.push(this._table[c &gt;&gt; 18 &amp; 0x3f]);\n            codes.push(this._table[c &gt;&gt; 12 &amp; 0x3f]);\n            codes.push(this._table[c &gt;&gt; 6 &amp; 0x3f]);\n            codes.push(this._table[c &amp; 0x3f]);\n        }\n        if (un &gt;= 1) {\n            codes[codes.length - 1] = &quot;=&quot;;\n            bin.pop();\n        }\n        if (un == 1) {\n            codes[codes.length - 2] = &quot;=&quot;;\n            bin.pop();\n        }\n        return codes.join(&quot;&quot;);\n    },\n    decode: function (base64Str) {\n        var i = 0;\n        var bin = [];\n        var x = 0, code = 0, eq = 0;\n        while (i &lt; base64Str.length) {\n            var c = base64Str.charAt(i++);\n            var idx = this._table.indexOf(c);\n            if (idx == -1) {\n                switch (c) {\n                    case &#39;=&#39;: idx = 0; eq++; break;\n                    case &#39; &#39;:\n                    case &#39;\\n&#39;:\n                    case &quot;\\r&quot;:\n                    case &#39;\\t&#39;:\n                        continue;\n                    default:\n                        throw { &quot;message&quot;: &quot;\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u65E0\\u6548\\u7F16\\u7801\\uFF1A&quot; + c };\n                }\n            }\n            if (eq &gt; 0 &amp;&amp; idx != 0)\n                throw { &quot;message&quot;: &quot;\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u7F16\\u7801\\u683C\\u5F0F\\u9519\\u8BEF\\uFF01&quot; };\n\n            code = code &lt;&lt; 6 | idx;\n            if (++x != 4)\n                continue;\n            bin.push(code &gt;&gt; 16);\n            bin.push(code &gt;&gt; 8 &amp; 0xff);\n            bin.push(code &amp; 0xff)\n            code = x = 0;\n        }\n        if (code != 0)\n            throw { &quot;message&quot;: &quot;\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u7F16\\u7801\\u6570\\u636E\\u957F\\u5EA6\\u9519\\u8BEF&quot; };\n        if (eq == 1)\n            bin.pop();\n        else if (eq == 2) {\n            bin.pop();\n            bin.pop();\n        } else if (eq &gt; 2)\n            throw { &quot;message&quot;: &quot;\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u7F16\\u7801\\u683C\\u5F0F\\u9519\\u8BEF\\uFF01&quot; };\n\n        return bin;\n    }\n};\n</code></pre><h4 id=\"BASH\"><a href=\"#BASH\" class=\"headerlink\" title=\"BASH\"></a>BASH</h4><pre><code>base64Table=(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9 + /);\n\nfunction str2binary() {\n    idx=0;\n    for((i=0; i&lt;${#str}; i++)); do\n        dividend=$(printf &quot;%d&quot; &quot;&#39;${str:i:1}&quot;);\n        for((j=0;j&lt;8;j++)); do\n            let idx=8*i+7-j;\n            let bin[$idx]=$dividend%2;\n            dividend=$dividend/2;\n        done;\n    done;\n    let idx=${#str}*8;\n    for((i=0; i&lt;appendEqualCnt*2; i++)); do\n        let bin[$idx]=0;\n        let idx++;\n    done;\n}\nfunction calcBase64() {\n    for((i=0; i&lt;${#bin[*]}/6; i++)); do\n        sum=0;\n        for((j=0; j&lt;6; j++)); do\n            let idx=i*6+j;\n            let n=6-1-j;\n            let sum=sum+${bin[$idx]}*2**n;\n        done;\n        echo -n ${base64Table[$sum]};\n    done\n}\n\ndeclare -a bin\nfunction base64Encode() {\n    read -p &quot;please enter ASCII string:&quot; str;\n    let appendZero=${#str}*8%6;\n    let bits=${#str}*8;\n    appendEqualCnt=0;\n    if [[ $appendZero -ne 0 ]]; then\n        let appendEqualCnt=(6-$appendZero)/2;\n    fi\n    str2binary;\n    calcBase64;\n    if [[ $appendEqualCnt -eq 2 ]]; then\n        echo -n &quot;==&quot;;\n    elif [[ $appendEqualCnt -eq 1 ]]; then\n        echo -n &quot;=&quot;;\n    fi\n    echo;\n\n}\n</code></pre><h4 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h4><pre><code>import java.util.Base64;\n对于标准的Base64：\n加密为字符串使用Base64.getEncoder().encodeToString();\n加密为字节数组使用Base64.getEncoder().encode();\n解密使用Base64.getDecoder().decode();\n对于URL安全或MIME的Base64，只需将上述getEncoder()getDecoder()更换为getUrlEncoder()getUrlDecoder()\n或getMimeEncoder()和getMimeDecoder()即可。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><em>为什么当数据采用base64位编码传输时，传输的数据大小比真实文件大33%？这个在邮件传输时非常明显，经常碰到用户问为什么附件大小只有15M多一点，我服务器允许最大接收邮件时20M，但是邮件因为大小原因被拒绝。</em></p>\n<h3 id=\"为什么需要base64\"><a href=\"#为什么需要base64\" class=\"headerlink\" title=\"为什么需要base64\"></a>为什么需要base64</h3><p>ASCII码一共规定了128个字符的编码,这128个符号,范围在[0,127]之间.其中,[0,31],及127, 33个属于不可打印的控制字符.</p>\n<p>在电子邮件传输信息时,有些邮件网关会把[0,31]这些控制字符给悄悄清除.还有的早期程序,收到[128,255]之间的国际字符时,甚至会发生错误.</p>\n<p>如何在不同邮件网关之间安全的传输控制字符,国际字符,甚至二进制文件?于是作为MIME多媒体电子邮件标准的一部分—base64被开发出来.</p>\n<h3 id=\"什么是base64\"><a href=\"#什么是base64\" class=\"headerlink\" title=\"什么是base64\"></a>什么是base64</h3><p>Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。可查看RFC2045～RFC2049，上面有MIME的详细规范。</p>\n<p>在<a href=\"https://www.hopeline.cn/2018/04/23/encoding/#more\" target=\"_blank\" rel=\"noopener\">encoding文章</a>中我提到每个国家读通过不同的方式在ASCII基础上扩展自己的文字编码。既然每个国家都有自己的编码表了，问题也就来了。现在都国际化了，我要用一个支持本国语言的编码系统，打开另一个编码系统编码的文本，会出现什么情况呢？这就是乱码了… 更为严重的是，随着互联网的出现，各个国家的电脑都需要通信，而通信的一种方式就是使用URL地址。每个国家都希望把这个地址写成自己国家的语言。但这会导致其他国家根本没法访问地址，因为打不出这个字符嘛。所以，人类迫切需要一种中间编码形式，既能够兼容ASCII码，又能够把任意一种编码形式转换成只使用可读字符就能表示的编码。</p>\n<p>其中一种编码形式，就是Base64编码。</p>\n<p>Base64编码，顾名思义，用64个可读字符进行编码。与Hex的16个字符（0-9，A-F）相比多了很多，但是比ASCII码又少了一倍，去除了不可读字符。标准Base64编码中，这些字符是：</p>\n<pre><code>数字（10个）：0,1,2,3,4,5,6,7,8,9\n小写字母（26个）：a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\n大写字母（26个）：A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z\n加号以及斜杠（2个）：+，/\n</code></pre><p>有的时候，根据不同的需要，Base64还有很多变种。比如，如果浏览器地址中用“+”和“/”的话，浏览器会将其转换为%XX的形式，又多了一步。因此可以将“+”和“/”换成“-”和“_”。</p>\n<p>这种编码形式长度也短，效率也高。这样一来，数据通信的时候，不管来的是什么语言，都转化成Base64后再发送和接收。要是别国地址什么的打不出来，就直接打Base64编码形式就好了。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>对传输8Bit字节码的二进制数据进行处理，每3个字节一组，一共是3x8=24bit，划为4组，每组正好6个bit：</p>\n<img src=\"/2018/04/24/base64/8to6bit.png\" class=\"8to6bit\">\n<p>这样我们得到4个6bit数字作为索引，然后计算机是一个字节（8bit）存数，6bit不够，自动就补两个高位0了。 然后查下面表，获得相应的4个字符，就是base64编码后的字符串。</p>\n<img src=\"/2018/04/24/base64/base64.png\" class=\"8to6bit\">\n<p><strong>所以，Base64编码会把3字节的二进制数据编码为4字节的文本数据，长度增加33%，好处是编码后的文本数据可以在邮件正文、网页等直接显示。</strong></p>\n<p>如果要编码的二进制数据不是3的倍数，最后会剩下1个或2个字节怎么办？Base64用\\x00字节在末尾补足后，再在编码的末尾加上1个或2个=号，表示补了多少字节，解码的时候，会自动去掉。</p>\n<p>转码过程例子：将字符s13编码成base64</p>\n<pre><code>字符：s 1 3\n\nascii：115 49 51\n\n2进制： 01110011 00110001 00110011\n\n6位一组（4组）： **011100**110011**000100**110011\n\n然后才有后面的： 011100 110011 000100 110011\n\n高位补0： 00011100 00110011 00000100 00110011\n\n得到： 28 51 4 51\n\n查对下照表： c z E z\n</code></pre><h3 id=\"base64在线编码和解码\"><a href=\"#base64在线编码和解码\" class=\"headerlink\" title=\"base64在线编码和解码\"></a>base64在线编码和解码</h3><p><a href=\"http://www.webatic.com/run/convert/base64.php\" target=\"_blank\" rel=\"noopener\">http://www.webatic.com/run/convert/base64.php</a></p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><ul>\n<li><p>用作HTTP表单和HTTP GET URL中的参数。</p>\n</li>\n<li><p>用作MIME格式邮件SMTP传输</p>\n</li>\n<li><p>用Base64来保密电子邮件密码 </p>\n</li>\n</ul>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><h4 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h4><pre><code>if (!Shotgun)\n    var Shotgun = {};\nif (!Shotgun.Js)\n    Shotgun.Js = {};\nShotgun.Js.Base64 = {\n    _table: [\n        &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;, &#39;H&#39;, &#39;I&#39;, &#39;J&#39;, &#39;K&#39;, &#39;L&#39;, &#39;M&#39;, &#39;N&#39;, &#39;O&#39;, &#39;P&#39;,\n        &#39;Q&#39;, &#39;R&#39;, &#39;S&#39;, &#39;T&#39;, &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;X&#39;, &#39;Y&#39;, &#39;Z&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;,\n        &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;,\n        &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;, &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;+&#39;, &#39;/&#39;\n    ],\n\n    encode: function (bin) {\n        var codes = [];\n        var un = 0;\n        un = bin.length % 3;\n        if (un == 1)\n            bin.push(0, 0);\n        else if (un == 2)\n            bin.push(0);\n        for (var i = 2; i &lt; bin.length; i += 3) {\n            var c = bin[i - 2] &lt;&lt; 16;\n            c |= bin[i - 1] &lt;&lt; 8;\n            c |= bin[i];\n            codes.push(this._table[c &gt;&gt; 18 &amp; 0x3f]);\n            codes.push(this._table[c &gt;&gt; 12 &amp; 0x3f]);\n            codes.push(this._table[c &gt;&gt; 6 &amp; 0x3f]);\n            codes.push(this._table[c &amp; 0x3f]);\n        }\n        if (un &gt;= 1) {\n            codes[codes.length - 1] = &quot;=&quot;;\n            bin.pop();\n        }\n        if (un == 1) {\n            codes[codes.length - 2] = &quot;=&quot;;\n            bin.pop();\n        }\n        return codes.join(&quot;&quot;);\n    },\n    decode: function (base64Str) {\n        var i = 0;\n        var bin = [];\n        var x = 0, code = 0, eq = 0;\n        while (i &lt; base64Str.length) {\n            var c = base64Str.charAt(i++);\n            var idx = this._table.indexOf(c);\n            if (idx == -1) {\n                switch (c) {\n                    case &#39;=&#39;: idx = 0; eq++; break;\n                    case &#39; &#39;:\n                    case &#39;\\n&#39;:\n                    case &quot;\\r&quot;:\n                    case &#39;\\t&#39;:\n                        continue;\n                    default:\n                        throw { &quot;message&quot;: &quot;\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u65E0\\u6548\\u7F16\\u7801\\uFF1A&quot; + c };\n                }\n            }\n            if (eq &gt; 0 &amp;&amp; idx != 0)\n                throw { &quot;message&quot;: &quot;\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u7F16\\u7801\\u683C\\u5F0F\\u9519\\u8BEF\\uFF01&quot; };\n\n            code = code &lt;&lt; 6 | idx;\n            if (++x != 4)\n                continue;\n            bin.push(code &gt;&gt; 16);\n            bin.push(code &gt;&gt; 8 &amp; 0xff);\n            bin.push(code &amp; 0xff)\n            code = x = 0;\n        }\n        if (code != 0)\n            throw { &quot;message&quot;: &quot;\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u7F16\\u7801\\u6570\\u636E\\u957F\\u5EA6\\u9519\\u8BEF&quot; };\n        if (eq == 1)\n            bin.pop();\n        else if (eq == 2) {\n            bin.pop();\n            bin.pop();\n        } else if (eq &gt; 2)\n            throw { &quot;message&quot;: &quot;\\u0062\\u0061\\u0073\\u0065\\u0036\\u0034\\u002E\\u0074\\u0068\\u0065\\u002D\\u0078\\u002E\\u0063\\u006E\\u0020\\u0045\\u0072\\u0072\\u006F\\u0072\\u003A\\u7F16\\u7801\\u683C\\u5F0F\\u9519\\u8BEF\\uFF01&quot; };\n\n        return bin;\n    }\n};\n</code></pre><h4 id=\"BASH\"><a href=\"#BASH\" class=\"headerlink\" title=\"BASH\"></a>BASH</h4><pre><code>base64Table=(A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9 + /);\n\nfunction str2binary() {\n    idx=0;\n    for((i=0; i&lt;${#str}; i++)); do\n        dividend=$(printf &quot;%d&quot; &quot;&#39;${str:i:1}&quot;);\n        for((j=0;j&lt;8;j++)); do\n            let idx=8*i+7-j;\n            let bin[$idx]=$dividend%2;\n            dividend=$dividend/2;\n        done;\n    done;\n    let idx=${#str}*8;\n    for((i=0; i&lt;appendEqualCnt*2; i++)); do\n        let bin[$idx]=0;\n        let idx++;\n    done;\n}\nfunction calcBase64() {\n    for((i=0; i&lt;${#bin[*]}/6; i++)); do\n        sum=0;\n        for((j=0; j&lt;6; j++)); do\n            let idx=i*6+j;\n            let n=6-1-j;\n            let sum=sum+${bin[$idx]}*2**n;\n        done;\n        echo -n ${base64Table[$sum]};\n    done\n}\n\ndeclare -a bin\nfunction base64Encode() {\n    read -p &quot;please enter ASCII string:&quot; str;\n    let appendZero=${#str}*8%6;\n    let bits=${#str}*8;\n    appendEqualCnt=0;\n    if [[ $appendZero -ne 0 ]]; then\n        let appendEqualCnt=(6-$appendZero)/2;\n    fi\n    str2binary;\n    calcBase64;\n    if [[ $appendEqualCnt -eq 2 ]]; then\n        echo -n &quot;==&quot;;\n    elif [[ $appendEqualCnt -eq 1 ]]; then\n        echo -n &quot;=&quot;;\n    fi\n    echo;\n\n}\n</code></pre><h4 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h4><pre><code>import java.util.Base64;\n对于标准的Base64：\n加密为字符串使用Base64.getEncoder().encodeToString();\n加密为字节数组使用Base64.getEncoder().encode();\n解密使用Base64.getDecoder().decode();\n对于URL安全或MIME的Base64，只需将上述getEncoder()getDecoder()更换为getUrlEncoder()getUrlDecoder()\n或getMimeEncoder()和getMimeDecoder()即可。\n</code></pre>"},{"title":"dns tunneling","date":"2018-05-14T08:10:32.000Z","_content":"_最经常碰到用户反馈，我们的反垃圾邮件网关总是向一些奇怪的地址做DNS查询请求，被防火墙检测出可能是DNS Tunnel的情况。从我们反垃圾邮件网关工作原理来说，确实会用到比较多的DNS查询来实现过滤的功能，但是该过滤功能跟DNS Tunnel是否有联系呢？_\n\n{% img dnstunnelingsample /2018/05/14/dns-tunnel/dns-tunneling-sample.png %}\n\n### what is DNS tunnel\n\nDNS tunnel即DNS隧道。从名字上来看就是利用DNS查询过程建立起隧道，传输数据。\n\n简单来说，当一个Client想要将数据发送给Server, Client会先把数据进行编码放在DNS payload中。例如Client可以发其域名为“MRZGS3TLEBWW64TFEBXXMYLMORUW4ZI.t.example.com”的A记录查询请求，然后Server返回“NVWW2IDPOZQWY5DJNZSQ.t.example.com”的CNAME的响应。这样数据以encode的方式发送给了Server，Server同时也将数据encode的方式响应了Client。这种通讯方式缺点是Server无法做到主动发起到客户的的连接，因为Client并没有监听DNS请求的服务，并且大多数情景是Client部署在防火墙后面。Server想要完成控制Client的通讯只有Client定期的监听发起到Serve的连接，然后Server通过响应数据包的控制Client通讯。\n\n#### DNS Query\n\n先了解下DNS查询请求的过程。DNS协议默认使用的端口为53(TCP/UDP),一般在进行DNS查询的时候通常使用的是UDP协议,但是在主服务器向备服务器同步数据的时候通常使用的是TCP协议.\n\n{% img dnsquery /2018/05/14/dns-tunnel/dns-query.png %}\n\n当你需要访问某个服务器时，需要知道其域名对应的服务器地址。\n\n1. 你需要使用Local/Public DNS服务器进行查询，向该服务器的53端口发送查询请求，比如需要查询abc.sample.com的服务器地址。\n2. 如果 Local/Public DNS服务器上如果没有abc.sample.com缓存记录，那么它将请求Root DNS服务器。\n3. Root DNS会响应Local/Public DNS服务器sample.com的Name Server地址。\n4. Local/Public DNS服务器再将请求转发到sample.com的服务器地址上。\n5. sample.com的域名服务器上收到请求后，查看是abc.sample.com，如果它有这条A记录，那么就会返回abc.sample.com的地址给客户端。\n\n#### Tunnel\n再了解一下tunnel，所谓 tunnel 就是把下一层（比如IPv4层）的包封装到上一层（比如 SSH，HTTP）或者同一层（比如IPv6层）的协议中进行传输，从而实现网络之间的穿透。发送端和接收端各有一个解析和封装这种包的程序或者内核模块，将数据通过其他比较常用的通讯协议进行传输。常见的Tunnel有基于SSH或HTTPS的tunnel方式，这两种方式既是常用的通讯协议，又是基于加密的安全方式通讯。另外我们VPN中用到的PPTP，L2TP都是tunnel的技术实现的，Tunnel的实现方式从网络传输模型的2层-7层都有解决方案。\n\n#### DNS Tunneling\n\n**DNS隧道技术简单来说就是将网络流量封装成DNS流量,以DNS查询的方式将数据传输到服务器上，服务器再通过DNS查询结果的方式响应客户。这里的流量封装通常由一个客户端来完成,Tunnel服务器将封装的DNS流量还原成正常的流量.**\n\n{% img dnstunnel /2018/05/14/dns-tunnel/dns-tunnel.png %}\n\n在复杂和较为安全的网络环境中,防火墙方对内部网络出去的流量一般有严格的控制。攻击者拿到内网机器的权限后如果想保持长久的对目标的控制并且不被发现,难度是比较大的,因为一些敏感操作(比如:执行命令、内部数据外传等)可能会触犯防火墙或者安全设备的规则,有时候拿下一台机器容易,但是长久控制就比较难.\n\n如果你在互联网上有台定制的服务器。只要依靠 DNS 的数据包，就可以实现数据交换，那么对内网的渗透难度会小很多。从 DNS 协议上看，你只是在一次次的查询某个特定域名，并得到解析结果。但实际上，你在和外部通讯，你没有直接连到局域网外的机器，因为防火墙不会转发你的 IP 包出去。但局域网上的 DNS 服务器帮你做了中转。这就是 DNS Tunnel了。通过DNS Tunnel可以比较好的维持对目标的长期控制并且不易被发现.DNS隧道将所有流量进行封装,通过DNS请求传送出去,一般的安全设备和软件不会对DNS请求进行详细的检查,攻击者通过将payload加密隐藏在查询的hostname中进行发送,DNS服务器递归查询,最终到达攻击者的服务端解密,服务端也可以下发指令给客户端,客户端解密之后执行控制端的命令。\n\n{% img dnspayload /2018/05/14/dns-tunnel/dns-payload.png %}\n\n### DNS tunnel implement tools\n\nDNS tunnel实现的工具有很多，比如：OzymanDNS、tcp-over-dns、heyoka、iodine、dns2tcp\n\nWin7平台：[dns2tcp](https://github.com/iagox86/dnscat2)\nLinux平台：[iodine](https://github.com/yarrick/iodine)\n\n这里只介绍基于Linux(CentOS)平台下iodine软件的实现方法.\n\n#### Tools\n域名：barracudachina.com\n主机Linux两台：CentOS 7\nTunnel软件：iodine\n\n#### Operations\n**[Server]**\n\n\t# yum -y install iodine-server\n\n\t# iodined -f 10.0.0.1 -P SecretPassword tunnel.barracudachina.com\n\tOpened dns0\n\tSetting IP of dns0 to 10.0.0.1\n\tSetting MTU of dns0 to 1130\n\tOpened IPv4 UDP socket\n\tListening to dns for domain tunnel.barracudachina.com\n\n\t# ifconfig\n\tdns0: flags=4305<UP,POINTOPOINT,RUNNING,NOARP,MULTICAST>  mtu 1130\n        \tinet 10.0.0.1  netmask 255.255.255.224  destination 10.0.0.1\n        \tunspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        \tRX packets 59  bytes 4956 (4.8 KiB)\n        \tRX errors 0  dropped 0  overruns 0  frame 0\n        \tTX packets 59  bytes 4956 (4.8 KiB)\n        \tTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n**[Client]**\n\n\t# yum -y install iodine-client\n\t\n\t# iodine -f -r 192.158.0.1 -P SecretPassword tunnel.barracudachina.com   (Replace 192.168.0.1 with your server's ip address)\n\tOpened dns0\n\tOpened IPv4 UDP socket\n\tSending DNS queries for tunnel.barracudachina.com to 192.168.150.158\n\tAutodetecting DNS query type (use -T to override).\n\tUsing DNS type NULL queries\n\tVersion ok, both using protocol v 0x00000502. You are user #0\n\tSetting IP of dns0 to 10.0.0.2\n\tSetting MTU of dns0 to 1130\n\tServer tunnel IP is 10.0.0.1\n\tSkipping raw mode\n\tUsing EDNS0 extension\n\tSwitching upstream to codec Base128\n\tServer switched upstream to codec Base128\n\tNo alternative downstream codec available, using default (Raw)\n\tSwitching to lazy mode for low-latency\n\tServer switched to lazy mode\n\tAutoprobing max downstream fragment size... (skip with -m fragsize)\n\t768 ok.. 1152 ok.. ...1344 not ok.. ...1248 not ok.. ...1200 not ok.. 1176 ok.. 1188 ok.. will use 1188-2=1186\n\tSetting downstream fragment size to max 1186...\n\tConnection setup complete, transmitting data.\n\n\t# ifconfig\n\tdns0: flags=4305<UP,POINTOPOINT,RUNNING,NOARP,MULTICAST>  mtu 1130\n        \tinet 10.0.0.2  netmask 255.255.255.224  destination 10.0.0.2\n        \tunspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        \tRX packets 0  bytes 0 (0.0 B)\n        \tRX errors 0  dropped 0  overruns 0  frame 0\n        \tTX packets 0  bytes 0 (0.0 B)\n        \tTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n**[DNS]**\n在域名解析商的网站上，设置一条barracudachina.com的子域tunnel.barracudachina.com的NS记录：\n\n\ttunnel.barracudachina.com. 600  IN      NS      ns10.barracudachina.com.\n\n另外，再设置ns10.barracudachina.com的A记录指向上面的**[Server]**地址\n\t\n\tns10.barracudachina.com. 600    IN      A       101.231.149.69\n\n**[Test]**\n\n\t# dig -t TXT z456.tunnel.barracudachina.com\n\tz456.tunnel.barracudachina.com. 300 IN  TXT     \"tpi0dknro\"\n\n\t# dig -t SRV z456.tunnel.barracudachina.com\n\tz456.tunnel.barracudachina.com. 300 IN  SRV     10 10 5060 hpi0dknro.nx.\n\n\t# dig -t CNAME z456.tunnel.barracudachina.com\n\tz456.tunnel.barracudachina.com. 300 IN  CNAME   hpi0dknro.qf.\n以上测试结果可以证明**[Client]**可以通过**[DNS]**递归查询实现与**[Server]**通信。\n\n\t# ping 10.0.0.1\n\tPING 10.0.0.1 (10.0.0.1) 56(84) bytes of data.\n\t64 bytes from 10.0.0.1: icmp_seq=1 ttl=64 time=1.54 ms\n\t64 bytes from 10.0.0.1: icmp_seq=2 ttl=64 time=1.13 ms\n\t64 bytes from 10.0.0.1: icmp_seq=3 ttl=64 time=1.00 ms\n\n该设置证明**[Client]**与**[Server]**之间的Tunnel已经建立成功。\n\n\n**PS**:\n以上设置有任何疑问可以通过[点击](https://github.com/yarrick/iodine)确认可能出现错误的原因。\n\n\n\n\n### Detecting DNS Tunneling\n\n因为DNS协议最初使用目的并不是用来传输数据的，其主要作用还是为了网站或邮件等重要服务。也正式这个原因，许多公司或组织往往会放行所有的DNS端口不做任何的监控。大部分企业将更多的资源专注于web或email的攻击，而忽略了通过DNS进行攻击的行为。例如最常见的情况为有些WIFI开启了http的portal进行身份验证后才能上网，因为这种情况下Client可以连接到DNS服务器查询，那么Client就可以通过DNS Tunnel获取免费的WIFI上网权限。也有攻击者通过建立DNS Tunnel获得远程控制主机权限，或者通过DNS Tunnel非法上传公司内部重要数据。\n\n目前有很多工具可以实现DNS Tunnel，实现的方法也不近相同，有些工具通过在本地创建tap虚拟网卡并配置一个IP，服务器跟客户端建立了一个tunnel，所有tunnel数据封装在DNS请求和响应中传输。也有工具通过将数据直接以二进制数据的方式直接封装在DNS的请求和响应中。DNS请求类型也会不同，有的工具采用A记录方式，有的直接以Null的类型。要再说明一下的是数据在DNS payload中的编码（encode）。关于encode涉及的范围非常广如果想做更多的了解可以参考我之前的文档（[encoding彻底理解字符编码](https://www.hopeline.cn/2018/04/23/encoding/),[base64编码](https://www.hopeline.cn/2018/04/24/base64/)）。DNS Tunnel将encode后的数据封装在DNS的查询或请求中，encode格式也不太一样，像dns2tcp使用Base64编码，但是iodine又使用非标准的Base64编码格式...\n\n基于以上的分析，许多DNS Tunneling工具都不会尝试隐匿，主要是因为实际情况下DNS不会被监控。目前有许多识别检测DNS Tunnel的技术，大致可以分为两类：基于数据包（Payload）分析和流量（traffic）分析\n\n#### Payload Analysis\n\n数据包分析识别技术主要基于域名生成的一般规律[Domain Generation Algorithms (DGA)],数据编码生成的域名与DGA生成的域名相比不太正常，主要有这几类：\n\n##### Size of request and response\n DNS请求和响应的数据大小，通过这种在源和目的通信流量方法识别可疑的DNS Tunneling流量。既可以通过他们之间的通信数据统计量设置一个阀值（将DNS数据存储在MySQL中），也可以尝试检查DNS查询或相应的数据长度，因为DNS Tunneling总是尽可能的传输更多的数据。一个比较明显的判断依据是查看超过64-255字节的数据包，或者查看检查主机名请求长度超过52字节。\n\n##### Entropy of hostnames\n通过请求hostname的熵检测DNS Tunnel。合法的DNS名通常可以通过字典匹配或者看上去有正常含义的，但是编码过主机名有更高的熵即使他们都是使用字符集。虽然DNS名有些类型的有列外表示一些特定的含义，例如CDN，但是这是参考条件之一。\n\n##### Statistical Analysis\n检查包括的特殊字符在DNS名中是另外一种方法识别DNS Tunnel。合法的DNS名应该是比编码过的名字有更少的数字，有人提出通过基于在域名中数字的百分比，也可以通过在域名中通过最长的有意义的字符串等等。\n\n##### Uncommon Record Types\n检查请求的记录类型为不是非常用的类型，例如请求类型为TXT记录。\n\n##### Policy Violation\n如果设置一个策略要求所有DNS查询必须通过内部DNS Server，这种强制策略可以用于做检测DNS Tunnel，所有到Internet的DNS流量都可以被监控到，因为大部分DNS Tunnel工具都可以正常工作即使通过内网DNS Server转发的请求。\n\n##### Specific Signatures\n有些研究者提供了特征码为一些特定的DNS Tunnel工具，通过DNS数据包头部的特殊字段识别。例如Snort Signature被开发出来用于检测NSTX DNS Tunnel。\n\talert udp $EXTERNAL_NET any -> $HOME_NET 53 (msg:\"Potential NSTX DNS\n\tTunneling\"; content:\"|01 00|\"; offset:2; within:4; content:\"cT\";\n\toffset:12; depth:3; content:\"|00 10 00 01|\"; within:255; classtype:badunknown;\n\tsid:1000 2;)\n\n\n#### Traffic Analysis\n流量分析指的是通过查看一个时间段的多个请求/响应，这个数量和频率可以查看是否包括DNS Tunnel，这种技术方法主要包包括如下：\n\n##### Volume of DNS traffic per IP address\n一个比较直接的方法检查基于单个特定的Client IP的DNS流量，因为Tunnel的请求数据包大小一般限制在512字节，需要大量的请求包保持连接，并且如果Client建立了到Server的连接，那么会持续发送请求包。\n\n##### Volume of DNS traffic per domain\n基于某个特定域的DNS流量分析是不是有特别大。DNS Tunnel需要设置一个域名来转发数据，所有转发到该DNS Tunnel的数据都会使用这个域。当然也有可能会使用多个域的情况，这样分到每个域的流量就小了。\n\n##### Number of hostnames per domain\n统计一个给定的域名包括的hostname的数量，DNS Tunnel工具每次请求的hostname都不一样，这个比典型合法的域名要多很多，这是要很有效的流量分析方法。\n\n##### Geographic location of DNS server\n将地理位置作为一个考虑因素也会被使用，很多DNS的流量都是没有实际商业用途，如果企业不是遍布全球的话，那么这个方法很实用。\n\n##### Domain history\n域名历史也是可以用于提升识别DNS流量的方法，检查他们的A记录或者NS记录添加的情况，这个也常被用于检测一些恶意攻击行为，跟DNS Tunnel也相关。如果一个域名NS记录最近才被添加那么很有可能是用户DNS Tunnel的目的。\n\n##### Orphan DNS requests\n孤立的DNS请求，以上的这些方法都是基于我们能看到的流量进行分析。另外一种途径是预测我们可以看到的情况。通常DNS请求是被其他的请求的附加行为，例如Web请求，这种预测可以很容易过滤出来。安全设备可以会使用DNS反向查询，反垃圾邮件通过DNS查询确定一个给定的IP地址是不是在黑名单中，终端安全产品使用包括一个FQDN hash码的DNS查询检查信誉库或可疑的文件。\n\n##### Others\n查看NSDomain响应数量，流量可视化(Visualization)。\n\n\nDNS[[数据包结构](https://www2.cs.duke.edu/courses/fall16/compsci356/DNS/DNS-primer.pdf)]\nDNS Tunnel数据包[样本](https://github.com/philippe233/dus-tunnel-capture.git)\n(https://www.sans.org/reading-room/whitepapers/dns/detecting-dns-tunneling-34152)\n\n","source":"_posts/dns-tunnel.md","raw":"---\ntitle: dns tunneling\ndate: 2018-05-14 16:10:32\ntags:\n\t- network\n\t- security\n\t- dns\ncategory:\n\t- security\n\t- network\n---\n_最经常碰到用户反馈，我们的反垃圾邮件网关总是向一些奇怪的地址做DNS查询请求，被防火墙检测出可能是DNS Tunnel的情况。从我们反垃圾邮件网关工作原理来说，确实会用到比较多的DNS查询来实现过滤的功能，但是该过滤功能跟DNS Tunnel是否有联系呢？_\n\n{% img dnstunnelingsample /2018/05/14/dns-tunnel/dns-tunneling-sample.png %}\n\n### what is DNS tunnel\n\nDNS tunnel即DNS隧道。从名字上来看就是利用DNS查询过程建立起隧道，传输数据。\n\n简单来说，当一个Client想要将数据发送给Server, Client会先把数据进行编码放在DNS payload中。例如Client可以发其域名为“MRZGS3TLEBWW64TFEBXXMYLMORUW4ZI.t.example.com”的A记录查询请求，然后Server返回“NVWW2IDPOZQWY5DJNZSQ.t.example.com”的CNAME的响应。这样数据以encode的方式发送给了Server，Server同时也将数据encode的方式响应了Client。这种通讯方式缺点是Server无法做到主动发起到客户的的连接，因为Client并没有监听DNS请求的服务，并且大多数情景是Client部署在防火墙后面。Server想要完成控制Client的通讯只有Client定期的监听发起到Serve的连接，然后Server通过响应数据包的控制Client通讯。\n\n#### DNS Query\n\n先了解下DNS查询请求的过程。DNS协议默认使用的端口为53(TCP/UDP),一般在进行DNS查询的时候通常使用的是UDP协议,但是在主服务器向备服务器同步数据的时候通常使用的是TCP协议.\n\n{% img dnsquery /2018/05/14/dns-tunnel/dns-query.png %}\n\n当你需要访问某个服务器时，需要知道其域名对应的服务器地址。\n\n1. 你需要使用Local/Public DNS服务器进行查询，向该服务器的53端口发送查询请求，比如需要查询abc.sample.com的服务器地址。\n2. 如果 Local/Public DNS服务器上如果没有abc.sample.com缓存记录，那么它将请求Root DNS服务器。\n3. Root DNS会响应Local/Public DNS服务器sample.com的Name Server地址。\n4. Local/Public DNS服务器再将请求转发到sample.com的服务器地址上。\n5. sample.com的域名服务器上收到请求后，查看是abc.sample.com，如果它有这条A记录，那么就会返回abc.sample.com的地址给客户端。\n\n#### Tunnel\n再了解一下tunnel，所谓 tunnel 就是把下一层（比如IPv4层）的包封装到上一层（比如 SSH，HTTP）或者同一层（比如IPv6层）的协议中进行传输，从而实现网络之间的穿透。发送端和接收端各有一个解析和封装这种包的程序或者内核模块，将数据通过其他比较常用的通讯协议进行传输。常见的Tunnel有基于SSH或HTTPS的tunnel方式，这两种方式既是常用的通讯协议，又是基于加密的安全方式通讯。另外我们VPN中用到的PPTP，L2TP都是tunnel的技术实现的，Tunnel的实现方式从网络传输模型的2层-7层都有解决方案。\n\n#### DNS Tunneling\n\n**DNS隧道技术简单来说就是将网络流量封装成DNS流量,以DNS查询的方式将数据传输到服务器上，服务器再通过DNS查询结果的方式响应客户。这里的流量封装通常由一个客户端来完成,Tunnel服务器将封装的DNS流量还原成正常的流量.**\n\n{% img dnstunnel /2018/05/14/dns-tunnel/dns-tunnel.png %}\n\n在复杂和较为安全的网络环境中,防火墙方对内部网络出去的流量一般有严格的控制。攻击者拿到内网机器的权限后如果想保持长久的对目标的控制并且不被发现,难度是比较大的,因为一些敏感操作(比如:执行命令、内部数据外传等)可能会触犯防火墙或者安全设备的规则,有时候拿下一台机器容易,但是长久控制就比较难.\n\n如果你在互联网上有台定制的服务器。只要依靠 DNS 的数据包，就可以实现数据交换，那么对内网的渗透难度会小很多。从 DNS 协议上看，你只是在一次次的查询某个特定域名，并得到解析结果。但实际上，你在和外部通讯，你没有直接连到局域网外的机器，因为防火墙不会转发你的 IP 包出去。但局域网上的 DNS 服务器帮你做了中转。这就是 DNS Tunnel了。通过DNS Tunnel可以比较好的维持对目标的长期控制并且不易被发现.DNS隧道将所有流量进行封装,通过DNS请求传送出去,一般的安全设备和软件不会对DNS请求进行详细的检查,攻击者通过将payload加密隐藏在查询的hostname中进行发送,DNS服务器递归查询,最终到达攻击者的服务端解密,服务端也可以下发指令给客户端,客户端解密之后执行控制端的命令。\n\n{% img dnspayload /2018/05/14/dns-tunnel/dns-payload.png %}\n\n### DNS tunnel implement tools\n\nDNS tunnel实现的工具有很多，比如：OzymanDNS、tcp-over-dns、heyoka、iodine、dns2tcp\n\nWin7平台：[dns2tcp](https://github.com/iagox86/dnscat2)\nLinux平台：[iodine](https://github.com/yarrick/iodine)\n\n这里只介绍基于Linux(CentOS)平台下iodine软件的实现方法.\n\n#### Tools\n域名：barracudachina.com\n主机Linux两台：CentOS 7\nTunnel软件：iodine\n\n#### Operations\n**[Server]**\n\n\t# yum -y install iodine-server\n\n\t# iodined -f 10.0.0.1 -P SecretPassword tunnel.barracudachina.com\n\tOpened dns0\n\tSetting IP of dns0 to 10.0.0.1\n\tSetting MTU of dns0 to 1130\n\tOpened IPv4 UDP socket\n\tListening to dns for domain tunnel.barracudachina.com\n\n\t# ifconfig\n\tdns0: flags=4305<UP,POINTOPOINT,RUNNING,NOARP,MULTICAST>  mtu 1130\n        \tinet 10.0.0.1  netmask 255.255.255.224  destination 10.0.0.1\n        \tunspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        \tRX packets 59  bytes 4956 (4.8 KiB)\n        \tRX errors 0  dropped 0  overruns 0  frame 0\n        \tTX packets 59  bytes 4956 (4.8 KiB)\n        \tTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n**[Client]**\n\n\t# yum -y install iodine-client\n\t\n\t# iodine -f -r 192.158.0.1 -P SecretPassword tunnel.barracudachina.com   (Replace 192.168.0.1 with your server's ip address)\n\tOpened dns0\n\tOpened IPv4 UDP socket\n\tSending DNS queries for tunnel.barracudachina.com to 192.168.150.158\n\tAutodetecting DNS query type (use -T to override).\n\tUsing DNS type NULL queries\n\tVersion ok, both using protocol v 0x00000502. You are user #0\n\tSetting IP of dns0 to 10.0.0.2\n\tSetting MTU of dns0 to 1130\n\tServer tunnel IP is 10.0.0.1\n\tSkipping raw mode\n\tUsing EDNS0 extension\n\tSwitching upstream to codec Base128\n\tServer switched upstream to codec Base128\n\tNo alternative downstream codec available, using default (Raw)\n\tSwitching to lazy mode for low-latency\n\tServer switched to lazy mode\n\tAutoprobing max downstream fragment size... (skip with -m fragsize)\n\t768 ok.. 1152 ok.. ...1344 not ok.. ...1248 not ok.. ...1200 not ok.. 1176 ok.. 1188 ok.. will use 1188-2=1186\n\tSetting downstream fragment size to max 1186...\n\tConnection setup complete, transmitting data.\n\n\t# ifconfig\n\tdns0: flags=4305<UP,POINTOPOINT,RUNNING,NOARP,MULTICAST>  mtu 1130\n        \tinet 10.0.0.2  netmask 255.255.255.224  destination 10.0.0.2\n        \tunspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        \tRX packets 0  bytes 0 (0.0 B)\n        \tRX errors 0  dropped 0  overruns 0  frame 0\n        \tTX packets 0  bytes 0 (0.0 B)\n        \tTX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n**[DNS]**\n在域名解析商的网站上，设置一条barracudachina.com的子域tunnel.barracudachina.com的NS记录：\n\n\ttunnel.barracudachina.com. 600  IN      NS      ns10.barracudachina.com.\n\n另外，再设置ns10.barracudachina.com的A记录指向上面的**[Server]**地址\n\t\n\tns10.barracudachina.com. 600    IN      A       101.231.149.69\n\n**[Test]**\n\n\t# dig -t TXT z456.tunnel.barracudachina.com\n\tz456.tunnel.barracudachina.com. 300 IN  TXT     \"tpi0dknro\"\n\n\t# dig -t SRV z456.tunnel.barracudachina.com\n\tz456.tunnel.barracudachina.com. 300 IN  SRV     10 10 5060 hpi0dknro.nx.\n\n\t# dig -t CNAME z456.tunnel.barracudachina.com\n\tz456.tunnel.barracudachina.com. 300 IN  CNAME   hpi0dknro.qf.\n以上测试结果可以证明**[Client]**可以通过**[DNS]**递归查询实现与**[Server]**通信。\n\n\t# ping 10.0.0.1\n\tPING 10.0.0.1 (10.0.0.1) 56(84) bytes of data.\n\t64 bytes from 10.0.0.1: icmp_seq=1 ttl=64 time=1.54 ms\n\t64 bytes from 10.0.0.1: icmp_seq=2 ttl=64 time=1.13 ms\n\t64 bytes from 10.0.0.1: icmp_seq=3 ttl=64 time=1.00 ms\n\n该设置证明**[Client]**与**[Server]**之间的Tunnel已经建立成功。\n\n\n**PS**:\n以上设置有任何疑问可以通过[点击](https://github.com/yarrick/iodine)确认可能出现错误的原因。\n\n\n\n\n### Detecting DNS Tunneling\n\n因为DNS协议最初使用目的并不是用来传输数据的，其主要作用还是为了网站或邮件等重要服务。也正式这个原因，许多公司或组织往往会放行所有的DNS端口不做任何的监控。大部分企业将更多的资源专注于web或email的攻击，而忽略了通过DNS进行攻击的行为。例如最常见的情况为有些WIFI开启了http的portal进行身份验证后才能上网，因为这种情况下Client可以连接到DNS服务器查询，那么Client就可以通过DNS Tunnel获取免费的WIFI上网权限。也有攻击者通过建立DNS Tunnel获得远程控制主机权限，或者通过DNS Tunnel非法上传公司内部重要数据。\n\n目前有很多工具可以实现DNS Tunnel，实现的方法也不近相同，有些工具通过在本地创建tap虚拟网卡并配置一个IP，服务器跟客户端建立了一个tunnel，所有tunnel数据封装在DNS请求和响应中传输。也有工具通过将数据直接以二进制数据的方式直接封装在DNS的请求和响应中。DNS请求类型也会不同，有的工具采用A记录方式，有的直接以Null的类型。要再说明一下的是数据在DNS payload中的编码（encode）。关于encode涉及的范围非常广如果想做更多的了解可以参考我之前的文档（[encoding彻底理解字符编码](https://www.hopeline.cn/2018/04/23/encoding/),[base64编码](https://www.hopeline.cn/2018/04/24/base64/)）。DNS Tunnel将encode后的数据封装在DNS的查询或请求中，encode格式也不太一样，像dns2tcp使用Base64编码，但是iodine又使用非标准的Base64编码格式...\n\n基于以上的分析，许多DNS Tunneling工具都不会尝试隐匿，主要是因为实际情况下DNS不会被监控。目前有许多识别检测DNS Tunnel的技术，大致可以分为两类：基于数据包（Payload）分析和流量（traffic）分析\n\n#### Payload Analysis\n\n数据包分析识别技术主要基于域名生成的一般规律[Domain Generation Algorithms (DGA)],数据编码生成的域名与DGA生成的域名相比不太正常，主要有这几类：\n\n##### Size of request and response\n DNS请求和响应的数据大小，通过这种在源和目的通信流量方法识别可疑的DNS Tunneling流量。既可以通过他们之间的通信数据统计量设置一个阀值（将DNS数据存储在MySQL中），也可以尝试检查DNS查询或相应的数据长度，因为DNS Tunneling总是尽可能的传输更多的数据。一个比较明显的判断依据是查看超过64-255字节的数据包，或者查看检查主机名请求长度超过52字节。\n\n##### Entropy of hostnames\n通过请求hostname的熵检测DNS Tunnel。合法的DNS名通常可以通过字典匹配或者看上去有正常含义的，但是编码过主机名有更高的熵即使他们都是使用字符集。虽然DNS名有些类型的有列外表示一些特定的含义，例如CDN，但是这是参考条件之一。\n\n##### Statistical Analysis\n检查包括的特殊字符在DNS名中是另外一种方法识别DNS Tunnel。合法的DNS名应该是比编码过的名字有更少的数字，有人提出通过基于在域名中数字的百分比，也可以通过在域名中通过最长的有意义的字符串等等。\n\n##### Uncommon Record Types\n检查请求的记录类型为不是非常用的类型，例如请求类型为TXT记录。\n\n##### Policy Violation\n如果设置一个策略要求所有DNS查询必须通过内部DNS Server，这种强制策略可以用于做检测DNS Tunnel，所有到Internet的DNS流量都可以被监控到，因为大部分DNS Tunnel工具都可以正常工作即使通过内网DNS Server转发的请求。\n\n##### Specific Signatures\n有些研究者提供了特征码为一些特定的DNS Tunnel工具，通过DNS数据包头部的特殊字段识别。例如Snort Signature被开发出来用于检测NSTX DNS Tunnel。\n\talert udp $EXTERNAL_NET any -> $HOME_NET 53 (msg:\"Potential NSTX DNS\n\tTunneling\"; content:\"|01 00|\"; offset:2; within:4; content:\"cT\";\n\toffset:12; depth:3; content:\"|00 10 00 01|\"; within:255; classtype:badunknown;\n\tsid:1000 2;)\n\n\n#### Traffic Analysis\n流量分析指的是通过查看一个时间段的多个请求/响应，这个数量和频率可以查看是否包括DNS Tunnel，这种技术方法主要包包括如下：\n\n##### Volume of DNS traffic per IP address\n一个比较直接的方法检查基于单个特定的Client IP的DNS流量，因为Tunnel的请求数据包大小一般限制在512字节，需要大量的请求包保持连接，并且如果Client建立了到Server的连接，那么会持续发送请求包。\n\n##### Volume of DNS traffic per domain\n基于某个特定域的DNS流量分析是不是有特别大。DNS Tunnel需要设置一个域名来转发数据，所有转发到该DNS Tunnel的数据都会使用这个域。当然也有可能会使用多个域的情况，这样分到每个域的流量就小了。\n\n##### Number of hostnames per domain\n统计一个给定的域名包括的hostname的数量，DNS Tunnel工具每次请求的hostname都不一样，这个比典型合法的域名要多很多，这是要很有效的流量分析方法。\n\n##### Geographic location of DNS server\n将地理位置作为一个考虑因素也会被使用，很多DNS的流量都是没有实际商业用途，如果企业不是遍布全球的话，那么这个方法很实用。\n\n##### Domain history\n域名历史也是可以用于提升识别DNS流量的方法，检查他们的A记录或者NS记录添加的情况，这个也常被用于检测一些恶意攻击行为，跟DNS Tunnel也相关。如果一个域名NS记录最近才被添加那么很有可能是用户DNS Tunnel的目的。\n\n##### Orphan DNS requests\n孤立的DNS请求，以上的这些方法都是基于我们能看到的流量进行分析。另外一种途径是预测我们可以看到的情况。通常DNS请求是被其他的请求的附加行为，例如Web请求，这种预测可以很容易过滤出来。安全设备可以会使用DNS反向查询，反垃圾邮件通过DNS查询确定一个给定的IP地址是不是在黑名单中，终端安全产品使用包括一个FQDN hash码的DNS查询检查信誉库或可疑的文件。\n\n##### Others\n查看NSDomain响应数量，流量可视化(Visualization)。\n\n\nDNS[[数据包结构](https://www2.cs.duke.edu/courses/fall16/compsci356/DNS/DNS-primer.pdf)]\nDNS Tunnel数据包[样本](https://github.com/philippe233/dus-tunnel-capture.git)\n(https://www.sans.org/reading-room/whitepapers/dns/detecting-dns-tunneling-34152)\n\n","slug":"dns-tunnel","published":1,"updated":"2018-05-22T04:05:21.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwontb000iwgl1liluyzgp","content":"<p><em>最经常碰到用户反馈，我们的反垃圾邮件网关总是向一些奇怪的地址做DNS查询请求，被防火墙检测出可能是DNS Tunnel的情况。从我们反垃圾邮件网关工作原理来说，确实会用到比较多的DNS查询来实现过滤的功能，但是该过滤功能跟DNS Tunnel是否有联系呢？</em></p>\n<img src=\"/2018/05/14/dns-tunnel/dns-tunneling-sample.png\" class=\"dnstunnelingsample\">\n<h3 id=\"what-is-DNS-tunnel\"><a href=\"#what-is-DNS-tunnel\" class=\"headerlink\" title=\"what is DNS tunnel\"></a>what is DNS tunnel</h3><p>DNS tunnel即DNS隧道。从名字上来看就是利用DNS查询过程建立起隧道，传输数据。</p>\n<p>简单来说，当一个Client想要将数据发送给Server, Client会先把数据进行编码放在DNS payload中。例如Client可以发其域名为“MRZGS3TLEBWW64TFEBXXMYLMORUW4ZI.t.example.com”的A记录查询请求，然后Server返回“NVWW2IDPOZQWY5DJNZSQ.t.example.com”的CNAME的响应。这样数据以encode的方式发送给了Server，Server同时也将数据encode的方式响应了Client。这种通讯方式缺点是Server无法做到主动发起到客户的的连接，因为Client并没有监听DNS请求的服务，并且大多数情景是Client部署在防火墙后面。Server想要完成控制Client的通讯只有Client定期的监听发起到Serve的连接，然后Server通过响应数据包的控制Client通讯。</p>\n<h4 id=\"DNS-Query\"><a href=\"#DNS-Query\" class=\"headerlink\" title=\"DNS Query\"></a>DNS Query</h4><p>先了解下DNS查询请求的过程。DNS协议默认使用的端口为53(TCP/UDP),一般在进行DNS查询的时候通常使用的是UDP协议,但是在主服务器向备服务器同步数据的时候通常使用的是TCP协议.</p>\n<img src=\"/2018/05/14/dns-tunnel/dns-query.png\" class=\"dnsquery\">\n<p>当你需要访问某个服务器时，需要知道其域名对应的服务器地址。</p>\n<ol>\n<li>你需要使用Local/Public DNS服务器进行查询，向该服务器的53端口发送查询请求，比如需要查询abc.sample.com的服务器地址。</li>\n<li>如果 Local/Public DNS服务器上如果没有abc.sample.com缓存记录，那么它将请求Root DNS服务器。</li>\n<li>Root DNS会响应Local/Public DNS服务器sample.com的Name Server地址。</li>\n<li>Local/Public DNS服务器再将请求转发到sample.com的服务器地址上。</li>\n<li>sample.com的域名服务器上收到请求后，查看是abc.sample.com，如果它有这条A记录，那么就会返回abc.sample.com的地址给客户端。</li>\n</ol>\n<h4 id=\"Tunnel\"><a href=\"#Tunnel\" class=\"headerlink\" title=\"Tunnel\"></a>Tunnel</h4><p>再了解一下tunnel，所谓 tunnel 就是把下一层（比如IPv4层）的包封装到上一层（比如 SSH，HTTP）或者同一层（比如IPv6层）的协议中进行传输，从而实现网络之间的穿透。发送端和接收端各有一个解析和封装这种包的程序或者内核模块，将数据通过其他比较常用的通讯协议进行传输。常见的Tunnel有基于SSH或HTTPS的tunnel方式，这两种方式既是常用的通讯协议，又是基于加密的安全方式通讯。另外我们VPN中用到的PPTP，L2TP都是tunnel的技术实现的，Tunnel的实现方式从网络传输模型的2层-7层都有解决方案。</p>\n<h4 id=\"DNS-Tunneling\"><a href=\"#DNS-Tunneling\" class=\"headerlink\" title=\"DNS Tunneling\"></a>DNS Tunneling</h4><p><strong>DNS隧道技术简单来说就是将网络流量封装成DNS流量,以DNS查询的方式将数据传输到服务器上，服务器再通过DNS查询结果的方式响应客户。这里的流量封装通常由一个客户端来完成,Tunnel服务器将封装的DNS流量还原成正常的流量.</strong></p>\n<img src=\"/2018/05/14/dns-tunnel/dns-tunnel.png\" class=\"dnstunnel\">\n<p>在复杂和较为安全的网络环境中,防火墙方对内部网络出去的流量一般有严格的控制。攻击者拿到内网机器的权限后如果想保持长久的对目标的控制并且不被发现,难度是比较大的,因为一些敏感操作(比如:执行命令、内部数据外传等)可能会触犯防火墙或者安全设备的规则,有时候拿下一台机器容易,但是长久控制就比较难.</p>\n<p>如果你在互联网上有台定制的服务器。只要依靠 DNS 的数据包，就可以实现数据交换，那么对内网的渗透难度会小很多。从 DNS 协议上看，你只是在一次次的查询某个特定域名，并得到解析结果。但实际上，你在和外部通讯，你没有直接连到局域网外的机器，因为防火墙不会转发你的 IP 包出去。但局域网上的 DNS 服务器帮你做了中转。这就是 DNS Tunnel了。通过DNS Tunnel可以比较好的维持对目标的长期控制并且不易被发现.DNS隧道将所有流量进行封装,通过DNS请求传送出去,一般的安全设备和软件不会对DNS请求进行详细的检查,攻击者通过将payload加密隐藏在查询的hostname中进行发送,DNS服务器递归查询,最终到达攻击者的服务端解密,服务端也可以下发指令给客户端,客户端解密之后执行控制端的命令。</p>\n<img src=\"/2018/05/14/dns-tunnel/dns-payload.png\" class=\"dnspayload\">\n<h3 id=\"DNS-tunnel-implement-tools\"><a href=\"#DNS-tunnel-implement-tools\" class=\"headerlink\" title=\"DNS tunnel implement tools\"></a>DNS tunnel implement tools</h3><p>DNS tunnel实现的工具有很多，比如：OzymanDNS、tcp-over-dns、heyoka、iodine、dns2tcp</p>\n<p>Win7平台：<a href=\"https://github.com/iagox86/dnscat2\" target=\"_blank\" rel=\"noopener\">dns2tcp</a><br>Linux平台：<a href=\"https://github.com/yarrick/iodine\" target=\"_blank\" rel=\"noopener\">iodine</a></p>\n<p>这里只介绍基于Linux(CentOS)平台下iodine软件的实现方法.</p>\n<h4 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h4><p>域名：barracudachina.com<br>主机Linux两台：CentOS 7<br>Tunnel软件：iodine</p>\n<h4 id=\"Operations\"><a href=\"#Operations\" class=\"headerlink\" title=\"Operations\"></a>Operations</h4><p><strong>[Server]</strong></p>\n<pre><code># yum -y install iodine-server\n\n# iodined -f 10.0.0.1 -P SecretPassword tunnel.barracudachina.com\nOpened dns0\nSetting IP of dns0 to 10.0.0.1\nSetting MTU of dns0 to 1130\nOpened IPv4 UDP socket\nListening to dns for domain tunnel.barracudachina.com\n\n# ifconfig\ndns0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1130\n        inet 10.0.0.1  netmask 255.255.255.224  destination 10.0.0.1\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        RX packets 59  bytes 4956 (4.8 KiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 59  bytes 4956 (4.8 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre><p><strong>[Client]</strong></p>\n<pre><code># yum -y install iodine-client\n\n# iodine -f -r 192.158.0.1 -P SecretPassword tunnel.barracudachina.com   (Replace 192.168.0.1 with your server&#39;s ip address)\nOpened dns0\nOpened IPv4 UDP socket\nSending DNS queries for tunnel.barracudachina.com to 192.168.150.158\nAutodetecting DNS query type (use -T to override).\nUsing DNS type NULL queries\nVersion ok, both using protocol v 0x00000502. You are user #0\nSetting IP of dns0 to 10.0.0.2\nSetting MTU of dns0 to 1130\nServer tunnel IP is 10.0.0.1\nSkipping raw mode\nUsing EDNS0 extension\nSwitching upstream to codec Base128\nServer switched upstream to codec Base128\nNo alternative downstream codec available, using default (Raw)\nSwitching to lazy mode for low-latency\nServer switched to lazy mode\nAutoprobing max downstream fragment size... (skip with -m fragsize)\n768 ok.. 1152 ok.. ...1344 not ok.. ...1248 not ok.. ...1200 not ok.. 1176 ok.. 1188 ok.. will use 1188-2=1186\nSetting downstream fragment size to max 1186...\nConnection setup complete, transmitting data.\n\n# ifconfig\ndns0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1130\n        inet 10.0.0.2  netmask 255.255.255.224  destination 10.0.0.2\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre><p><strong>[DNS]</strong><br>在域名解析商的网站上，设置一条barracudachina.com的子域tunnel.barracudachina.com的NS记录：</p>\n<pre><code>tunnel.barracudachina.com. 600  IN      NS      ns10.barracudachina.com.\n</code></pre><p>另外，再设置ns10.barracudachina.com的A记录指向上面的<strong>[Server]</strong>地址</p>\n<pre><code>ns10.barracudachina.com. 600    IN      A       101.231.149.69\n</code></pre><p><strong>[Test]</strong></p>\n<pre><code># dig -t TXT z456.tunnel.barracudachina.com\nz456.tunnel.barracudachina.com. 300 IN  TXT     &quot;tpi0dknro&quot;\n\n# dig -t SRV z456.tunnel.barracudachina.com\nz456.tunnel.barracudachina.com. 300 IN  SRV     10 10 5060 hpi0dknro.nx.\n\n# dig -t CNAME z456.tunnel.barracudachina.com\nz456.tunnel.barracudachina.com. 300 IN  CNAME   hpi0dknro.qf.\n</code></pre><p>以上测试结果可以证明<strong>[Client]</strong>可以通过<strong>[DNS]</strong>递归查询实现与<strong>[Server]</strong>通信。</p>\n<pre><code># ping 10.0.0.1\nPING 10.0.0.1 (10.0.0.1) 56(84) bytes of data.\n64 bytes from 10.0.0.1: icmp_seq=1 ttl=64 time=1.54 ms\n64 bytes from 10.0.0.1: icmp_seq=2 ttl=64 time=1.13 ms\n64 bytes from 10.0.0.1: icmp_seq=3 ttl=64 time=1.00 ms\n</code></pre><p>该设置证明<strong>[Client]</strong>与<strong>[Server]</strong>之间的Tunnel已经建立成功。</p>\n<p><strong>PS</strong>:<br>以上设置有任何疑问可以通过<a href=\"https://github.com/yarrick/iodine\" target=\"_blank\" rel=\"noopener\">点击</a>确认可能出现错误的原因。</p>\n<h3 id=\"Detecting-DNS-Tunneling\"><a href=\"#Detecting-DNS-Tunneling\" class=\"headerlink\" title=\"Detecting DNS Tunneling\"></a>Detecting DNS Tunneling</h3><p>因为DNS协议最初使用目的并不是用来传输数据的，其主要作用还是为了网站或邮件等重要服务。也正式这个原因，许多公司或组织往往会放行所有的DNS端口不做任何的监控。大部分企业将更多的资源专注于web或email的攻击，而忽略了通过DNS进行攻击的行为。例如最常见的情况为有些WIFI开启了http的portal进行身份验证后才能上网，因为这种情况下Client可以连接到DNS服务器查询，那么Client就可以通过DNS Tunnel获取免费的WIFI上网权限。也有攻击者通过建立DNS Tunnel获得远程控制主机权限，或者通过DNS Tunnel非法上传公司内部重要数据。</p>\n<p>目前有很多工具可以实现DNS Tunnel，实现的方法也不近相同，有些工具通过在本地创建tap虚拟网卡并配置一个IP，服务器跟客户端建立了一个tunnel，所有tunnel数据封装在DNS请求和响应中传输。也有工具通过将数据直接以二进制数据的方式直接封装在DNS的请求和响应中。DNS请求类型也会不同，有的工具采用A记录方式，有的直接以Null的类型。要再说明一下的是数据在DNS payload中的编码（encode）。关于encode涉及的范围非常广如果想做更多的了解可以参考我之前的文档（<a href=\"https://www.hopeline.cn/2018/04/23/encoding/\" target=\"_blank\" rel=\"noopener\">encoding彻底理解字符编码</a>,<a href=\"https://www.hopeline.cn/2018/04/24/base64/\" target=\"_blank\" rel=\"noopener\">base64编码</a>）。DNS Tunnel将encode后的数据封装在DNS的查询或请求中，encode格式也不太一样，像dns2tcp使用Base64编码，但是iodine又使用非标准的Base64编码格式…</p>\n<p>基于以上的分析，许多DNS Tunneling工具都不会尝试隐匿，主要是因为实际情况下DNS不会被监控。目前有许多识别检测DNS Tunnel的技术，大致可以分为两类：基于数据包（Payload）分析和流量（traffic）分析</p>\n<h4 id=\"Payload-Analysis\"><a href=\"#Payload-Analysis\" class=\"headerlink\" title=\"Payload Analysis\"></a>Payload Analysis</h4><p>数据包分析识别技术主要基于域名生成的一般规律[Domain Generation Algorithms (DGA)],数据编码生成的域名与DGA生成的域名相比不太正常，主要有这几类：</p>\n<h5 id=\"Size-of-request-and-response\"><a href=\"#Size-of-request-and-response\" class=\"headerlink\" title=\"Size of request and response\"></a>Size of request and response</h5><p> DNS请求和响应的数据大小，通过这种在源和目的通信流量方法识别可疑的DNS Tunneling流量。既可以通过他们之间的通信数据统计量设置一个阀值（将DNS数据存储在MySQL中），也可以尝试检查DNS查询或相应的数据长度，因为DNS Tunneling总是尽可能的传输更多的数据。一个比较明显的判断依据是查看超过64-255字节的数据包，或者查看检查主机名请求长度超过52字节。</p>\n<h5 id=\"Entropy-of-hostnames\"><a href=\"#Entropy-of-hostnames\" class=\"headerlink\" title=\"Entropy of hostnames\"></a>Entropy of hostnames</h5><p>通过请求hostname的熵检测DNS Tunnel。合法的DNS名通常可以通过字典匹配或者看上去有正常含义的，但是编码过主机名有更高的熵即使他们都是使用字符集。虽然DNS名有些类型的有列外表示一些特定的含义，例如CDN，但是这是参考条件之一。</p>\n<h5 id=\"Statistical-Analysis\"><a href=\"#Statistical-Analysis\" class=\"headerlink\" title=\"Statistical Analysis\"></a>Statistical Analysis</h5><p>检查包括的特殊字符在DNS名中是另外一种方法识别DNS Tunnel。合法的DNS名应该是比编码过的名字有更少的数字，有人提出通过基于在域名中数字的百分比，也可以通过在域名中通过最长的有意义的字符串等等。</p>\n<h5 id=\"Uncommon-Record-Types\"><a href=\"#Uncommon-Record-Types\" class=\"headerlink\" title=\"Uncommon Record Types\"></a>Uncommon Record Types</h5><p>检查请求的记录类型为不是非常用的类型，例如请求类型为TXT记录。</p>\n<h5 id=\"Policy-Violation\"><a href=\"#Policy-Violation\" class=\"headerlink\" title=\"Policy Violation\"></a>Policy Violation</h5><p>如果设置一个策略要求所有DNS查询必须通过内部DNS Server，这种强制策略可以用于做检测DNS Tunnel，所有到Internet的DNS流量都可以被监控到，因为大部分DNS Tunnel工具都可以正常工作即使通过内网DNS Server转发的请求。</p>\n<h5 id=\"Specific-Signatures\"><a href=\"#Specific-Signatures\" class=\"headerlink\" title=\"Specific Signatures\"></a>Specific Signatures</h5><p>有些研究者提供了特征码为一些特定的DNS Tunnel工具，通过DNS数据包头部的特殊字段识别。例如Snort Signature被开发出来用于检测NSTX DNS Tunnel。<br>    alert udp $EXTERNAL_NET any -&gt; $HOME_NET 53 (msg:”Potential NSTX DNS<br>    Tunneling”; content:”|01 00|”; offset:2; within:4; content:”cT”;<br>    offset:12; depth:3; content:”|00 10 00 01|”; within:255; classtype:badunknown;<br>    sid:1000 2;)</p>\n<h4 id=\"Traffic-Analysis\"><a href=\"#Traffic-Analysis\" class=\"headerlink\" title=\"Traffic Analysis\"></a>Traffic Analysis</h4><p>流量分析指的是通过查看一个时间段的多个请求/响应，这个数量和频率可以查看是否包括DNS Tunnel，这种技术方法主要包包括如下：</p>\n<h5 id=\"Volume-of-DNS-traffic-per-IP-address\"><a href=\"#Volume-of-DNS-traffic-per-IP-address\" class=\"headerlink\" title=\"Volume of DNS traffic per IP address\"></a>Volume of DNS traffic per IP address</h5><p>一个比较直接的方法检查基于单个特定的Client IP的DNS流量，因为Tunnel的请求数据包大小一般限制在512字节，需要大量的请求包保持连接，并且如果Client建立了到Server的连接，那么会持续发送请求包。</p>\n<h5 id=\"Volume-of-DNS-traffic-per-domain\"><a href=\"#Volume-of-DNS-traffic-per-domain\" class=\"headerlink\" title=\"Volume of DNS traffic per domain\"></a>Volume of DNS traffic per domain</h5><p>基于某个特定域的DNS流量分析是不是有特别大。DNS Tunnel需要设置一个域名来转发数据，所有转发到该DNS Tunnel的数据都会使用这个域。当然也有可能会使用多个域的情况，这样分到每个域的流量就小了。</p>\n<h5 id=\"Number-of-hostnames-per-domain\"><a href=\"#Number-of-hostnames-per-domain\" class=\"headerlink\" title=\"Number of hostnames per domain\"></a>Number of hostnames per domain</h5><p>统计一个给定的域名包括的hostname的数量，DNS Tunnel工具每次请求的hostname都不一样，这个比典型合法的域名要多很多，这是要很有效的流量分析方法。</p>\n<h5 id=\"Geographic-location-of-DNS-server\"><a href=\"#Geographic-location-of-DNS-server\" class=\"headerlink\" title=\"Geographic location of DNS server\"></a>Geographic location of DNS server</h5><p>将地理位置作为一个考虑因素也会被使用，很多DNS的流量都是没有实际商业用途，如果企业不是遍布全球的话，那么这个方法很实用。</p>\n<h5 id=\"Domain-history\"><a href=\"#Domain-history\" class=\"headerlink\" title=\"Domain history\"></a>Domain history</h5><p>域名历史也是可以用于提升识别DNS流量的方法，检查他们的A记录或者NS记录添加的情况，这个也常被用于检测一些恶意攻击行为，跟DNS Tunnel也相关。如果一个域名NS记录最近才被添加那么很有可能是用户DNS Tunnel的目的。</p>\n<h5 id=\"Orphan-DNS-requests\"><a href=\"#Orphan-DNS-requests\" class=\"headerlink\" title=\"Orphan DNS requests\"></a>Orphan DNS requests</h5><p>孤立的DNS请求，以上的这些方法都是基于我们能看到的流量进行分析。另外一种途径是预测我们可以看到的情况。通常DNS请求是被其他的请求的附加行为，例如Web请求，这种预测可以很容易过滤出来。安全设备可以会使用DNS反向查询，反垃圾邮件通过DNS查询确定一个给定的IP地址是不是在黑名单中，终端安全产品使用包括一个FQDN hash码的DNS查询检查信誉库或可疑的文件。</p>\n<h5 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h5><p>查看NSDomain响应数量，流量可视化(Visualization)。</p>\n<p>DNS[<a href=\"https://www2.cs.duke.edu/courses/fall16/compsci356/DNS/DNS-primer.pdf\" target=\"_blank\" rel=\"noopener\">数据包结构</a>]<br>DNS Tunnel数据包<a href=\"https://github.com/philippe233/dus-tunnel-capture.git\" target=\"_blank\" rel=\"noopener\">样本</a><br>(<a href=\"https://www.sans.org/reading-room/whitepapers/dns/detecting-dns-tunneling-34152\" target=\"_blank\" rel=\"noopener\">https://www.sans.org/reading-room/whitepapers/dns/detecting-dns-tunneling-34152</a>)</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>最经常碰到用户反馈，我们的反垃圾邮件网关总是向一些奇怪的地址做DNS查询请求，被防火墙检测出可能是DNS Tunnel的情况。从我们反垃圾邮件网关工作原理来说，确实会用到比较多的DNS查询来实现过滤的功能，但是该过滤功能跟DNS Tunnel是否有联系呢？</em></p>\n<img src=\"/2018/05/14/dns-tunnel/dns-tunneling-sample.png\" class=\"dnstunnelingsample\">\n<h3 id=\"what-is-DNS-tunnel\"><a href=\"#what-is-DNS-tunnel\" class=\"headerlink\" title=\"what is DNS tunnel\"></a>what is DNS tunnel</h3><p>DNS tunnel即DNS隧道。从名字上来看就是利用DNS查询过程建立起隧道，传输数据。</p>\n<p>简单来说，当一个Client想要将数据发送给Server, Client会先把数据进行编码放在DNS payload中。例如Client可以发其域名为“MRZGS3TLEBWW64TFEBXXMYLMORUW4ZI.t.example.com”的A记录查询请求，然后Server返回“NVWW2IDPOZQWY5DJNZSQ.t.example.com”的CNAME的响应。这样数据以encode的方式发送给了Server，Server同时也将数据encode的方式响应了Client。这种通讯方式缺点是Server无法做到主动发起到客户的的连接，因为Client并没有监听DNS请求的服务，并且大多数情景是Client部署在防火墙后面。Server想要完成控制Client的通讯只有Client定期的监听发起到Serve的连接，然后Server通过响应数据包的控制Client通讯。</p>\n<h4 id=\"DNS-Query\"><a href=\"#DNS-Query\" class=\"headerlink\" title=\"DNS Query\"></a>DNS Query</h4><p>先了解下DNS查询请求的过程。DNS协议默认使用的端口为53(TCP/UDP),一般在进行DNS查询的时候通常使用的是UDP协议,但是在主服务器向备服务器同步数据的时候通常使用的是TCP协议.</p>\n<img src=\"/2018/05/14/dns-tunnel/dns-query.png\" class=\"dnsquery\">\n<p>当你需要访问某个服务器时，需要知道其域名对应的服务器地址。</p>\n<ol>\n<li>你需要使用Local/Public DNS服务器进行查询，向该服务器的53端口发送查询请求，比如需要查询abc.sample.com的服务器地址。</li>\n<li>如果 Local/Public DNS服务器上如果没有abc.sample.com缓存记录，那么它将请求Root DNS服务器。</li>\n<li>Root DNS会响应Local/Public DNS服务器sample.com的Name Server地址。</li>\n<li>Local/Public DNS服务器再将请求转发到sample.com的服务器地址上。</li>\n<li>sample.com的域名服务器上收到请求后，查看是abc.sample.com，如果它有这条A记录，那么就会返回abc.sample.com的地址给客户端。</li>\n</ol>\n<h4 id=\"Tunnel\"><a href=\"#Tunnel\" class=\"headerlink\" title=\"Tunnel\"></a>Tunnel</h4><p>再了解一下tunnel，所谓 tunnel 就是把下一层（比如IPv4层）的包封装到上一层（比如 SSH，HTTP）或者同一层（比如IPv6层）的协议中进行传输，从而实现网络之间的穿透。发送端和接收端各有一个解析和封装这种包的程序或者内核模块，将数据通过其他比较常用的通讯协议进行传输。常见的Tunnel有基于SSH或HTTPS的tunnel方式，这两种方式既是常用的通讯协议，又是基于加密的安全方式通讯。另外我们VPN中用到的PPTP，L2TP都是tunnel的技术实现的，Tunnel的实现方式从网络传输模型的2层-7层都有解决方案。</p>\n<h4 id=\"DNS-Tunneling\"><a href=\"#DNS-Tunneling\" class=\"headerlink\" title=\"DNS Tunneling\"></a>DNS Tunneling</h4><p><strong>DNS隧道技术简单来说就是将网络流量封装成DNS流量,以DNS查询的方式将数据传输到服务器上，服务器再通过DNS查询结果的方式响应客户。这里的流量封装通常由一个客户端来完成,Tunnel服务器将封装的DNS流量还原成正常的流量.</strong></p>\n<img src=\"/2018/05/14/dns-tunnel/dns-tunnel.png\" class=\"dnstunnel\">\n<p>在复杂和较为安全的网络环境中,防火墙方对内部网络出去的流量一般有严格的控制。攻击者拿到内网机器的权限后如果想保持长久的对目标的控制并且不被发现,难度是比较大的,因为一些敏感操作(比如:执行命令、内部数据外传等)可能会触犯防火墙或者安全设备的规则,有时候拿下一台机器容易,但是长久控制就比较难.</p>\n<p>如果你在互联网上有台定制的服务器。只要依靠 DNS 的数据包，就可以实现数据交换，那么对内网的渗透难度会小很多。从 DNS 协议上看，你只是在一次次的查询某个特定域名，并得到解析结果。但实际上，你在和外部通讯，你没有直接连到局域网外的机器，因为防火墙不会转发你的 IP 包出去。但局域网上的 DNS 服务器帮你做了中转。这就是 DNS Tunnel了。通过DNS Tunnel可以比较好的维持对目标的长期控制并且不易被发现.DNS隧道将所有流量进行封装,通过DNS请求传送出去,一般的安全设备和软件不会对DNS请求进行详细的检查,攻击者通过将payload加密隐藏在查询的hostname中进行发送,DNS服务器递归查询,最终到达攻击者的服务端解密,服务端也可以下发指令给客户端,客户端解密之后执行控制端的命令。</p>\n<img src=\"/2018/05/14/dns-tunnel/dns-payload.png\" class=\"dnspayload\">\n<h3 id=\"DNS-tunnel-implement-tools\"><a href=\"#DNS-tunnel-implement-tools\" class=\"headerlink\" title=\"DNS tunnel implement tools\"></a>DNS tunnel implement tools</h3><p>DNS tunnel实现的工具有很多，比如：OzymanDNS、tcp-over-dns、heyoka、iodine、dns2tcp</p>\n<p>Win7平台：<a href=\"https://github.com/iagox86/dnscat2\" target=\"_blank\" rel=\"noopener\">dns2tcp</a><br>Linux平台：<a href=\"https://github.com/yarrick/iodine\" target=\"_blank\" rel=\"noopener\">iodine</a></p>\n<p>这里只介绍基于Linux(CentOS)平台下iodine软件的实现方法.</p>\n<h4 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h4><p>域名：barracudachina.com<br>主机Linux两台：CentOS 7<br>Tunnel软件：iodine</p>\n<h4 id=\"Operations\"><a href=\"#Operations\" class=\"headerlink\" title=\"Operations\"></a>Operations</h4><p><strong>[Server]</strong></p>\n<pre><code># yum -y install iodine-server\n\n# iodined -f 10.0.0.1 -P SecretPassword tunnel.barracudachina.com\nOpened dns0\nSetting IP of dns0 to 10.0.0.1\nSetting MTU of dns0 to 1130\nOpened IPv4 UDP socket\nListening to dns for domain tunnel.barracudachina.com\n\n# ifconfig\ndns0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1130\n        inet 10.0.0.1  netmask 255.255.255.224  destination 10.0.0.1\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        RX packets 59  bytes 4956 (4.8 KiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 59  bytes 4956 (4.8 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre><p><strong>[Client]</strong></p>\n<pre><code># yum -y install iodine-client\n\n# iodine -f -r 192.158.0.1 -P SecretPassword tunnel.barracudachina.com   (Replace 192.168.0.1 with your server&#39;s ip address)\nOpened dns0\nOpened IPv4 UDP socket\nSending DNS queries for tunnel.barracudachina.com to 192.168.150.158\nAutodetecting DNS query type (use -T to override).\nUsing DNS type NULL queries\nVersion ok, both using protocol v 0x00000502. You are user #0\nSetting IP of dns0 to 10.0.0.2\nSetting MTU of dns0 to 1130\nServer tunnel IP is 10.0.0.1\nSkipping raw mode\nUsing EDNS0 extension\nSwitching upstream to codec Base128\nServer switched upstream to codec Base128\nNo alternative downstream codec available, using default (Raw)\nSwitching to lazy mode for low-latency\nServer switched to lazy mode\nAutoprobing max downstream fragment size... (skip with -m fragsize)\n768 ok.. 1152 ok.. ...1344 not ok.. ...1248 not ok.. ...1200 not ok.. 1176 ok.. 1188 ok.. will use 1188-2=1186\nSetting downstream fragment size to max 1186...\nConnection setup complete, transmitting data.\n\n# ifconfig\ndns0: flags=4305&lt;UP,POINTOPOINT,RUNNING,NOARP,MULTICAST&gt;  mtu 1130\n        inet 10.0.0.2  netmask 255.255.255.224  destination 10.0.0.2\n        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 500  (UNSPEC)\n        RX packets 0  bytes 0 (0.0 B)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 0  bytes 0 (0.0 B)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre><p><strong>[DNS]</strong><br>在域名解析商的网站上，设置一条barracudachina.com的子域tunnel.barracudachina.com的NS记录：</p>\n<pre><code>tunnel.barracudachina.com. 600  IN      NS      ns10.barracudachina.com.\n</code></pre><p>另外，再设置ns10.barracudachina.com的A记录指向上面的<strong>[Server]</strong>地址</p>\n<pre><code>ns10.barracudachina.com. 600    IN      A       101.231.149.69\n</code></pre><p><strong>[Test]</strong></p>\n<pre><code># dig -t TXT z456.tunnel.barracudachina.com\nz456.tunnel.barracudachina.com. 300 IN  TXT     &quot;tpi0dknro&quot;\n\n# dig -t SRV z456.tunnel.barracudachina.com\nz456.tunnel.barracudachina.com. 300 IN  SRV     10 10 5060 hpi0dknro.nx.\n\n# dig -t CNAME z456.tunnel.barracudachina.com\nz456.tunnel.barracudachina.com. 300 IN  CNAME   hpi0dknro.qf.\n</code></pre><p>以上测试结果可以证明<strong>[Client]</strong>可以通过<strong>[DNS]</strong>递归查询实现与<strong>[Server]</strong>通信。</p>\n<pre><code># ping 10.0.0.1\nPING 10.0.0.1 (10.0.0.1) 56(84) bytes of data.\n64 bytes from 10.0.0.1: icmp_seq=1 ttl=64 time=1.54 ms\n64 bytes from 10.0.0.1: icmp_seq=2 ttl=64 time=1.13 ms\n64 bytes from 10.0.0.1: icmp_seq=3 ttl=64 time=1.00 ms\n</code></pre><p>该设置证明<strong>[Client]</strong>与<strong>[Server]</strong>之间的Tunnel已经建立成功。</p>\n<p><strong>PS</strong>:<br>以上设置有任何疑问可以通过<a href=\"https://github.com/yarrick/iodine\" target=\"_blank\" rel=\"noopener\">点击</a>确认可能出现错误的原因。</p>\n<h3 id=\"Detecting-DNS-Tunneling\"><a href=\"#Detecting-DNS-Tunneling\" class=\"headerlink\" title=\"Detecting DNS Tunneling\"></a>Detecting DNS Tunneling</h3><p>因为DNS协议最初使用目的并不是用来传输数据的，其主要作用还是为了网站或邮件等重要服务。也正式这个原因，许多公司或组织往往会放行所有的DNS端口不做任何的监控。大部分企业将更多的资源专注于web或email的攻击，而忽略了通过DNS进行攻击的行为。例如最常见的情况为有些WIFI开启了http的portal进行身份验证后才能上网，因为这种情况下Client可以连接到DNS服务器查询，那么Client就可以通过DNS Tunnel获取免费的WIFI上网权限。也有攻击者通过建立DNS Tunnel获得远程控制主机权限，或者通过DNS Tunnel非法上传公司内部重要数据。</p>\n<p>目前有很多工具可以实现DNS Tunnel，实现的方法也不近相同，有些工具通过在本地创建tap虚拟网卡并配置一个IP，服务器跟客户端建立了一个tunnel，所有tunnel数据封装在DNS请求和响应中传输。也有工具通过将数据直接以二进制数据的方式直接封装在DNS的请求和响应中。DNS请求类型也会不同，有的工具采用A记录方式，有的直接以Null的类型。要再说明一下的是数据在DNS payload中的编码（encode）。关于encode涉及的范围非常广如果想做更多的了解可以参考我之前的文档（<a href=\"https://www.hopeline.cn/2018/04/23/encoding/\" target=\"_blank\" rel=\"noopener\">encoding彻底理解字符编码</a>,<a href=\"https://www.hopeline.cn/2018/04/24/base64/\" target=\"_blank\" rel=\"noopener\">base64编码</a>）。DNS Tunnel将encode后的数据封装在DNS的查询或请求中，encode格式也不太一样，像dns2tcp使用Base64编码，但是iodine又使用非标准的Base64编码格式…</p>\n<p>基于以上的分析，许多DNS Tunneling工具都不会尝试隐匿，主要是因为实际情况下DNS不会被监控。目前有许多识别检测DNS Tunnel的技术，大致可以分为两类：基于数据包（Payload）分析和流量（traffic）分析</p>\n<h4 id=\"Payload-Analysis\"><a href=\"#Payload-Analysis\" class=\"headerlink\" title=\"Payload Analysis\"></a>Payload Analysis</h4><p>数据包分析识别技术主要基于域名生成的一般规律[Domain Generation Algorithms (DGA)],数据编码生成的域名与DGA生成的域名相比不太正常，主要有这几类：</p>\n<h5 id=\"Size-of-request-and-response\"><a href=\"#Size-of-request-and-response\" class=\"headerlink\" title=\"Size of request and response\"></a>Size of request and response</h5><p> DNS请求和响应的数据大小，通过这种在源和目的通信流量方法识别可疑的DNS Tunneling流量。既可以通过他们之间的通信数据统计量设置一个阀值（将DNS数据存储在MySQL中），也可以尝试检查DNS查询或相应的数据长度，因为DNS Tunneling总是尽可能的传输更多的数据。一个比较明显的判断依据是查看超过64-255字节的数据包，或者查看检查主机名请求长度超过52字节。</p>\n<h5 id=\"Entropy-of-hostnames\"><a href=\"#Entropy-of-hostnames\" class=\"headerlink\" title=\"Entropy of hostnames\"></a>Entropy of hostnames</h5><p>通过请求hostname的熵检测DNS Tunnel。合法的DNS名通常可以通过字典匹配或者看上去有正常含义的，但是编码过主机名有更高的熵即使他们都是使用字符集。虽然DNS名有些类型的有列外表示一些特定的含义，例如CDN，但是这是参考条件之一。</p>\n<h5 id=\"Statistical-Analysis\"><a href=\"#Statistical-Analysis\" class=\"headerlink\" title=\"Statistical Analysis\"></a>Statistical Analysis</h5><p>检查包括的特殊字符在DNS名中是另外一种方法识别DNS Tunnel。合法的DNS名应该是比编码过的名字有更少的数字，有人提出通过基于在域名中数字的百分比，也可以通过在域名中通过最长的有意义的字符串等等。</p>\n<h5 id=\"Uncommon-Record-Types\"><a href=\"#Uncommon-Record-Types\" class=\"headerlink\" title=\"Uncommon Record Types\"></a>Uncommon Record Types</h5><p>检查请求的记录类型为不是非常用的类型，例如请求类型为TXT记录。</p>\n<h5 id=\"Policy-Violation\"><a href=\"#Policy-Violation\" class=\"headerlink\" title=\"Policy Violation\"></a>Policy Violation</h5><p>如果设置一个策略要求所有DNS查询必须通过内部DNS Server，这种强制策略可以用于做检测DNS Tunnel，所有到Internet的DNS流量都可以被监控到，因为大部分DNS Tunnel工具都可以正常工作即使通过内网DNS Server转发的请求。</p>\n<h5 id=\"Specific-Signatures\"><a href=\"#Specific-Signatures\" class=\"headerlink\" title=\"Specific Signatures\"></a>Specific Signatures</h5><p>有些研究者提供了特征码为一些特定的DNS Tunnel工具，通过DNS数据包头部的特殊字段识别。例如Snort Signature被开发出来用于检测NSTX DNS Tunnel。<br>    alert udp $EXTERNAL_NET any -&gt; $HOME_NET 53 (msg:”Potential NSTX DNS<br>    Tunneling”; content:”|01 00|”; offset:2; within:4; content:”cT”;<br>    offset:12; depth:3; content:”|00 10 00 01|”; within:255; classtype:badunknown;<br>    sid:1000 2;)</p>\n<h4 id=\"Traffic-Analysis\"><a href=\"#Traffic-Analysis\" class=\"headerlink\" title=\"Traffic Analysis\"></a>Traffic Analysis</h4><p>流量分析指的是通过查看一个时间段的多个请求/响应，这个数量和频率可以查看是否包括DNS Tunnel，这种技术方法主要包包括如下：</p>\n<h5 id=\"Volume-of-DNS-traffic-per-IP-address\"><a href=\"#Volume-of-DNS-traffic-per-IP-address\" class=\"headerlink\" title=\"Volume of DNS traffic per IP address\"></a>Volume of DNS traffic per IP address</h5><p>一个比较直接的方法检查基于单个特定的Client IP的DNS流量，因为Tunnel的请求数据包大小一般限制在512字节，需要大量的请求包保持连接，并且如果Client建立了到Server的连接，那么会持续发送请求包。</p>\n<h5 id=\"Volume-of-DNS-traffic-per-domain\"><a href=\"#Volume-of-DNS-traffic-per-domain\" class=\"headerlink\" title=\"Volume of DNS traffic per domain\"></a>Volume of DNS traffic per domain</h5><p>基于某个特定域的DNS流量分析是不是有特别大。DNS Tunnel需要设置一个域名来转发数据，所有转发到该DNS Tunnel的数据都会使用这个域。当然也有可能会使用多个域的情况，这样分到每个域的流量就小了。</p>\n<h5 id=\"Number-of-hostnames-per-domain\"><a href=\"#Number-of-hostnames-per-domain\" class=\"headerlink\" title=\"Number of hostnames per domain\"></a>Number of hostnames per domain</h5><p>统计一个给定的域名包括的hostname的数量，DNS Tunnel工具每次请求的hostname都不一样，这个比典型合法的域名要多很多，这是要很有效的流量分析方法。</p>\n<h5 id=\"Geographic-location-of-DNS-server\"><a href=\"#Geographic-location-of-DNS-server\" class=\"headerlink\" title=\"Geographic location of DNS server\"></a>Geographic location of DNS server</h5><p>将地理位置作为一个考虑因素也会被使用，很多DNS的流量都是没有实际商业用途，如果企业不是遍布全球的话，那么这个方法很实用。</p>\n<h5 id=\"Domain-history\"><a href=\"#Domain-history\" class=\"headerlink\" title=\"Domain history\"></a>Domain history</h5><p>域名历史也是可以用于提升识别DNS流量的方法，检查他们的A记录或者NS记录添加的情况，这个也常被用于检测一些恶意攻击行为，跟DNS Tunnel也相关。如果一个域名NS记录最近才被添加那么很有可能是用户DNS Tunnel的目的。</p>\n<h5 id=\"Orphan-DNS-requests\"><a href=\"#Orphan-DNS-requests\" class=\"headerlink\" title=\"Orphan DNS requests\"></a>Orphan DNS requests</h5><p>孤立的DNS请求，以上的这些方法都是基于我们能看到的流量进行分析。另外一种途径是预测我们可以看到的情况。通常DNS请求是被其他的请求的附加行为，例如Web请求，这种预测可以很容易过滤出来。安全设备可以会使用DNS反向查询，反垃圾邮件通过DNS查询确定一个给定的IP地址是不是在黑名单中，终端安全产品使用包括一个FQDN hash码的DNS查询检查信誉库或可疑的文件。</p>\n<h5 id=\"Others\"><a href=\"#Others\" class=\"headerlink\" title=\"Others\"></a>Others</h5><p>查看NSDomain响应数量，流量可视化(Visualization)。</p>\n<p>DNS[<a href=\"https://www2.cs.duke.edu/courses/fall16/compsci356/DNS/DNS-primer.pdf\" target=\"_blank\" rel=\"noopener\">数据包结构</a>]<br>DNS Tunnel数据包<a href=\"https://github.com/philippe233/dus-tunnel-capture.git\" target=\"_blank\" rel=\"noopener\">样本</a><br>(<a href=\"https://www.sans.org/reading-room/whitepapers/dns/detecting-dns-tunneling-34152\" target=\"_blank\" rel=\"noopener\">https://www.sans.org/reading-room/whitepapers/dns/detecting-dns-tunneling-34152</a>)</p>\n"},{"title":"boyhood","date":"2018-03-15T07:54:39.000Z","_content":"教程\n{% blockquote Liaoxuefeng  https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000 Git教程 %}\n史上最浅显易懂的Git教程！\n{% endblockquote %}\nCode\n{% codeblock useradd.sh lang:bash %}\n#!/bin/bash\nfor (i=0,i++,i<a)\n\tdo i=i++;\n\t\techo $i;\n\tdone\n{% endcodeblock %}\n\n\nLink\n{% link  互联网工程任务组（IETF）已正式批准TLS 1.3作为传输层安全（TLS）协议的下一个主要版本，IETF组织是专门批准互联网标准和协议的组织。 http://www.freebuf.com/news/166362.html IETF批准TLS 1.3为互联网标准 %}\n\n","source":"_posts/boyhood.md","raw":"---\ntitle: boyhood\ndate: 2018-03-15 15:54:39\ntags:\n\t- film\ncategory:\n\t- film\n---\n教程\n{% blockquote Liaoxuefeng  https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000 Git教程 %}\n史上最浅显易懂的Git教程！\n{% endblockquote %}\nCode\n{% codeblock useradd.sh lang:bash %}\n#!/bin/bash\nfor (i=0,i++,i<a)\n\tdo i=i++;\n\t\techo $i;\n\tdone\n{% endcodeblock %}\n\n\nLink\n{% link  互联网工程任务组（IETF）已正式批准TLS 1.3作为传输层安全（TLS）协议的下一个主要版本，IETF组织是专门批准互联网标准和协议的组织。 http://www.freebuf.com/news/166362.html IETF批准TLS 1.3为互联网标准 %}\n\n","slug":"boyhood","published":1,"updated":"2018-04-05T10:36:04.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwontj000mwgl1h5u0kn1j","content":"<p>教程<br><blockquote><p>史上最浅显易懂的Git教程！</p>\n<footer><strong>Liaoxuefeng</strong><cite><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">Git教程</a></cite></footer></blockquote><br>Code<br><pre><code>#!&#x2F;bin&#x2F;bash\nfor (i=0,i++,i&lt;a)\n\tdo i=i++;\n\t\techo $i;\n\tdone</code></pre></p>\n<p>Link<br><a href=\"http://www.freebuf.com/news/166362.html\" title=\"IETF批准TLS 1.3为互联网标准\" target=\"_blank\" rel=\"noopener\">互联网工程任务组（IETF）已正式批准TLS 1.3作为传输层安全（TLS）协议的下一个主要版本，IETF组织是专门批准互联网标准和协议的组织。</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>教程<br><blockquote><p>史上最浅显易懂的Git教程！</p>\n<footer><strong>Liaoxuefeng</strong><cite><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">Git教程</a></cite></footer></blockquote><br>Code<br><pre><code>#!&#x2F;bin&#x2F;bash\nfor (i=0,i++,i&lt;a)\n\tdo i=i++;\n\t\techo $i;\n\tdone</code></pre></p>\n<p>Link<br><a href=\"http://www.freebuf.com/news/166362.html\" title=\"IETF批准TLS 1.3为互联网标准\" target=\"_blank\" rel=\"noopener\">互联网工程任务组（IETF）已正式批准TLS 1.3作为传输层安全（TLS）协议的下一个主要版本，IETF组织是专门批准互联网标准和协议的组织。</a></p>\n"},{"title":"Markdown Quick Guide","date":"2018-03-29T10:01:39.000Z","_content":"\n*本文主要介绍Markdown的基本使用方法，基本不用了解HTML的语法。按照本文的说明编辑文本后，只要通过Markdown编辑器，就能生成一个html文件。本文阅读时间大约1-2个小时。*\n\n## 概览  \n \n### 宗旨\nMarkdown 的目标是实现「易读易写」。\n\n### 兼容 HTML\nMarkdown 语法的目标是：成为一种适用于网络的书写语言。\n\n### 特殊字符自动转换\n在 HTML 文件中，有两个字符需要特殊处理： < 和 & 。 < 符号用于起始标签，& 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;。\n\n## 区块元素\n\n### 段落和换行\n在插入处先按入两个以上的空格然后回车\n\n### 标题\n在行首插入 1 到 6 个 #，对应到标题 1 到 6 阶，例如：\n\t# 这是 H1\n\t\n\t## 这是 H2\n\t\n\t###### 这是 H6\n\t\n### 区块引用blockquotes\n用 > 的引用方式，例如：\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n区块引用可以嵌套，例如：\n>\n> > This is nested blockquote.\n>\n> Back to the first level\n\n### 列表\n序列表使用星号、加号或是减号作为列表标记：\n\t*   Red\n\t*   Green\n\t*   Blue\n\n有序列表则使用数字接着一个英文句点：\n\t1.  Bird\n\t2.  McHale\n\t3.  Parish\n\n* 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。\n* 列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：\n* 如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：\n* 在行首出现数字-句点-空白:\n\t1986\\. What a great season.\n\n### 代码区块\n要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：\n\n这是一个普通段落：\n\n    这是一个代码区块。\n一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。\n\n### 分隔线\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线\n\n\t* * *\n\n\t***\n\n\t*****\n\n\t- - -\n\n\t---------------------------------------\n\n## 区段元素\n### 链接\n行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可:\n\n\tThis is [an example](http://example.com/ \"Title\") inline link.\n\t\n\t[This link](http://example.net/) has no title attribute.\n\t\n\tSee my [About](/about/) page for details.\n参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：\n\n\tThis is [an example][id] reference-style link.\n链接内容定义的形式为：\n\t* 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字\n\t* 接着一个冒号\n\t* 接着一个以上的空格或制表符\n\t* 接着链接的网址\n\t* 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着\n下面是一个参考式链接的范例：\n\n\tI get 10 times more traffic from [Google] [1] than from\n\t[Yahoo] [2] or [MSN] [3].\n\t\n\t\t[1]: http://google.com/        \"Google\"\n\t\t[2]: http://search.yahoo.com/  \"Yahoo Search\"\n\t\t[3]: http://search.msn.com/    \"MSN Search\"\n\n### 强调\nMarkdown 使用星号（\\*）和底线（_）作为标记强调字词的符号，被 \\* 或 _ 包围的字词会被转成用 <em\\> 标签包围，用两个 \\* 或 _ 包起来的话，则会被转成 <strong\\>，例如：\n\n\t*single asterisks*\n*single asterisks*\n\n\t_single underscores_\n_single underscores_\n\n\t**double asterisks**\n**double asterisks**\n\n\t__double underscores__\n__double underscores__\n\n### 代码\n如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：\n\n\tUse the `printf()` function.\n如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：\n\n### 图片\nMarkdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。\n行内式的图片语法看起来像是：\n\n\t![Alt text](/path/to/img.jpg)\n\n\t![Alt text](/path/to/img.jpg \"Optional title\")\n参考式的图片语法则长得像这样：\n\n\t![Alt text][id]\n\t[id]: url/to/image  \"Optional title attribute\"\n\n\t\n## 其它\n### 反斜杠\n利用反斜杠来插入一些在语法中有其它意义的符号\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n\t\\   反斜线\n\t`   反引号\n\t*   星号\n\t_   底线\n\t{}  花括号\n\t[]  方括号\n\t()  括弧\n\t#   井字号\n\t+   加号\n\t-   减号\n\t.   英文句点\n\t!   惊叹号\n\n### 自动链接\n只要是用方括号包起来， Markdown 就会自动把它转成链接，一般网址的链接文字就和链接地址一样，例如：\n\n\t<http://example.com/>\n\n\n## Markdown 免费编辑器\nWindows 平台\n* [MarkdownPad](http://markdownpad.com/) \n* [MarkPad](http://code52.org/DownmarkerWPF/)\n\nLinux 平台\n* [ReText](http://sourceforge.net/p/retext/home/ReText/)\n\nMac 平台\n* [Mou](http://mouapp.com/)\n\n在线编辑器\n* [Markable.in](http://markable.in/)\n* [Dillinger.io](http://dillinger.io/)\n\n浏览器插件\n* [MaDe (Chrome)](https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog)\n\n高级应用(Sublime Text 2 + MarkdownEditing 教程)\n* [Sublime Text 2](http://www.sublimetext.com/2)\n* [MarkdownEditing](http://ttscoff.github.com/MarkdownEditing/)\n* [教程](http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/)\n\n\n## 感谢\n感谢: <http://daringfireball.net/projects/markdown/>\n\n原文：<http://www.markdown.cn/#overview> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/markdown.md","raw":"---\ntitle: Markdown Quick Guide\ndate: 2018-03-29 18:01:39\ntags:\n\t- blog\n\t- HTML\n\t- markdown\ncategory:\n\t- blog\n---\n\n*本文主要介绍Markdown的基本使用方法，基本不用了解HTML的语法。按照本文的说明编辑文本后，只要通过Markdown编辑器，就能生成一个html文件。本文阅读时间大约1-2个小时。*\n\n## 概览  \n \n### 宗旨\nMarkdown 的目标是实现「易读易写」。\n\n### 兼容 HTML\nMarkdown 语法的目标是：成为一种适用于网络的书写语言。\n\n### 特殊字符自动转换\n在 HTML 文件中，有两个字符需要特殊处理： < 和 & 。 < 符号用于起始标签，& 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;。\n\n## 区块元素\n\n### 段落和换行\n在插入处先按入两个以上的空格然后回车\n\n### 标题\n在行首插入 1 到 6 个 #，对应到标题 1 到 6 阶，例如：\n\t# 这是 H1\n\t\n\t## 这是 H2\n\t\n\t###### 这是 H6\n\t\n### 区块引用blockquotes\n用 > 的引用方式，例如：\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\nconsectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\nVestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n区块引用可以嵌套，例如：\n>\n> > This is nested blockquote.\n>\n> Back to the first level\n\n### 列表\n序列表使用星号、加号或是减号作为列表标记：\n\t*   Red\n\t*   Green\n\t*   Blue\n\n有序列表则使用数字接着一个英文句点：\n\t1.  Bird\n\t2.  McHale\n\t3.  Parish\n\n* 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。\n* 列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：\n* 如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：\n* 在行首出现数字-句点-空白:\n\t1986\\. What a great season.\n\n### 代码区块\n要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：\n\n这是一个普通段落：\n\n    这是一个代码区块。\n一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。\n\n### 分隔线\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线\n\n\t* * *\n\n\t***\n\n\t*****\n\n\t- - -\n\n\t---------------------------------------\n\n## 区段元素\n### 链接\n行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可:\n\n\tThis is [an example](http://example.com/ \"Title\") inline link.\n\t\n\t[This link](http://example.net/) has no title attribute.\n\t\n\tSee my [About](/about/) page for details.\n参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：\n\n\tThis is [an example][id] reference-style link.\n链接内容定义的形式为：\n\t* 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字\n\t* 接着一个冒号\n\t* 接着一个以上的空格或制表符\n\t* 接着链接的网址\n\t* 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着\n下面是一个参考式链接的范例：\n\n\tI get 10 times more traffic from [Google] [1] than from\n\t[Yahoo] [2] or [MSN] [3].\n\t\n\t\t[1]: http://google.com/        \"Google\"\n\t\t[2]: http://search.yahoo.com/  \"Yahoo Search\"\n\t\t[3]: http://search.msn.com/    \"MSN Search\"\n\n### 强调\nMarkdown 使用星号（\\*）和底线（_）作为标记强调字词的符号，被 \\* 或 _ 包围的字词会被转成用 <em\\> 标签包围，用两个 \\* 或 _ 包起来的话，则会被转成 <strong\\>，例如：\n\n\t*single asterisks*\n*single asterisks*\n\n\t_single underscores_\n_single underscores_\n\n\t**double asterisks**\n**double asterisks**\n\n\t__double underscores__\n__double underscores__\n\n### 代码\n如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：\n\n\tUse the `printf()` function.\n如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：\n\n### 图片\nMarkdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。\n行内式的图片语法看起来像是：\n\n\t![Alt text](/path/to/img.jpg)\n\n\t![Alt text](/path/to/img.jpg \"Optional title\")\n参考式的图片语法则长得像这样：\n\n\t![Alt text][id]\n\t[id]: url/to/image  \"Optional title attribute\"\n\n\t\n## 其它\n### 反斜杠\n利用反斜杠来插入一些在语法中有其它意义的符号\nMarkdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：\n\n\t\\   反斜线\n\t`   反引号\n\t*   星号\n\t_   底线\n\t{}  花括号\n\t[]  方括号\n\t()  括弧\n\t#   井字号\n\t+   加号\n\t-   减号\n\t.   英文句点\n\t!   惊叹号\n\n### 自动链接\n只要是用方括号包起来， Markdown 就会自动把它转成链接，一般网址的链接文字就和链接地址一样，例如：\n\n\t<http://example.com/>\n\n\n## Markdown 免费编辑器\nWindows 平台\n* [MarkdownPad](http://markdownpad.com/) \n* [MarkPad](http://code52.org/DownmarkerWPF/)\n\nLinux 平台\n* [ReText](http://sourceforge.net/p/retext/home/ReText/)\n\nMac 平台\n* [Mou](http://mouapp.com/)\n\n在线编辑器\n* [Markable.in](http://markable.in/)\n* [Dillinger.io](http://dillinger.io/)\n\n浏览器插件\n* [MaDe (Chrome)](https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog)\n\n高级应用(Sublime Text 2 + MarkdownEditing 教程)\n* [Sublime Text 2](http://www.sublimetext.com/2)\n* [MarkdownEditing](http://ttscoff.github.com/MarkdownEditing/)\n* [教程](http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/)\n\n\n## 感谢\n感谢: <http://daringfireball.net/projects/markdown/>\n\n原文：<http://www.markdown.cn/#overview> \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"markdown","published":1,"updated":"2018-04-05T10:36:04.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwontm000nwgl1mjrzhmua","content":"<p><em>本文主要介绍Markdown的基本使用方法，基本不用了解HTML的语法。按照本文的说明编辑文本后，只要通过Markdown编辑器，就能生成一个html文件。本文阅读时间大约1-2个小时。</em></p>\n<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><h3 id=\"宗旨\"><a href=\"#宗旨\" class=\"headerlink\" title=\"宗旨\"></a>宗旨</h3><p>Markdown 的目标是实现「易读易写」。</p>\n<h3 id=\"兼容-HTML\"><a href=\"#兼容-HTML\" class=\"headerlink\" title=\"兼容 HTML\"></a>兼容 HTML</h3><p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p>\n<h3 id=\"特殊字符自动转换\"><a href=\"#特殊字符自动转换\" class=\"headerlink\" title=\"特殊字符自动转换\"></a>特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;。</p>\n<h2 id=\"区块元素\"><a href=\"#区块元素\" class=\"headerlink\" title=\"区块元素\"></a>区块元素</h2><h3 id=\"段落和换行\"><a href=\"#段落和换行\" class=\"headerlink\" title=\"段落和换行\"></a>段落和换行</h3><p>在插入处先按入两个以上的空格然后回车</p>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>在行首插入 1 到 6 个 #，对应到标题 1 到 6 阶，例如：</p>\n<pre><code># 这是 H1\n\n## 这是 H2\n\n###### 这是 H6\n</code></pre><h3 id=\"区块引用blockquotes\"><a href=\"#区块引用blockquotes\" class=\"headerlink\" title=\"区块引用blockquotes\"></a>区块引用blockquotes</h3><p>用 &gt; 的引用方式，例如：</p>\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n</blockquote>\n<p>区块引用可以嵌套，例如：</p>\n<blockquote>\n<blockquote>\n<p>This is nested blockquote.</p>\n</blockquote>\n<p>Back to the first level</p>\n</blockquote>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>序列表使用星号、加号或是减号作为列表标记：</p>\n<pre><code>*   Red\n*   Green\n*   Blue\n</code></pre><p>有序列表则使用数字接着一个英文句点：</p>\n<pre><code>1.  Bird\n2.  McHale\n3.  Parish\n</code></pre><ul>\n<li>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</li>\n<li>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</li>\n<li>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</li>\n<li>在行首出现数字-句点-空白:<br>  1986. What a great season.</li>\n</ul>\n<h3 id=\"代码区块\"><a href=\"#代码区块\" class=\"headerlink\" title=\"代码区块\"></a>代码区块</h3><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>\n<p>这是一个普通段落：</p>\n<pre><code>这是一个代码区块。\n</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p>\n<h3 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线</p>\n<pre><code>* * *\n\n***\n\n*****\n\n- - -\n\n---------------------------------------\n</code></pre><h2 id=\"区段元素\"><a href=\"#区段元素\" class=\"headerlink\" title=\"区段元素\"></a>区段元素</h2><h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><p>行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可:</p>\n<pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.\n\n[This link](http://example.net/) has no title attribute.\n\nSee my [About](/about/) page for details.\n</code></pre><p>参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p>\n<pre><code>This is [an example][id] reference-style link.\n</code></pre><p>链接内容定义的形式为：</p>\n<pre><code>* 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字\n* 接着一个冒号\n* 接着一个以上的空格或制表符\n* 接着链接的网址\n* 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着\n</code></pre><p>下面是一个参考式链接的范例：</p>\n<pre><code>I get 10 times more traffic from [Google] [1] than from\n[Yahoo] [2] or [MSN] [3].\n\n    [1]: http://google.com/        &quot;Google&quot;\n    [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;\n    [3]: http://search.msn.com/    &quot;MSN Search&quot;\n</code></pre><h3 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h3><p>Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 &lt;em> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 &lt;strong>，例如：</p>\n<pre><code>*single asterisks*\n</code></pre><p><em>single asterisks</em></p>\n<pre><code>_single underscores_\n</code></pre><p><em>single underscores</em></p>\n<pre><code>**double asterisks**\n</code></pre><p><strong>double asterisks</strong></p>\n<pre><code>__double underscores__\n</code></pre><p><strong>double underscores</strong></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</p>\n<pre><code>Use the `printf()` function.\n</code></pre><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。<br>行内式的图片语法看起来像是：</p>\n<pre><code>![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg &quot;Optional title&quot;)\n</code></pre><p>参考式的图片语法则长得像这样：</p>\n<pre><code>![Alt text][id]\n[id]: url/to/image  &quot;Optional title attribute&quot;\n</code></pre><h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><h3 id=\"反斜杠\"><a href=\"#反斜杠\" class=\"headerlink\" title=\"反斜杠\"></a>反斜杠</h3><p>利用反斜杠来插入一些在语法中有其它意义的符号<br>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>\n<pre><code>\\   反斜线\n`   反引号\n*   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括弧\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   惊叹号\n</code></pre><h3 id=\"自动链接\"><a href=\"#自动链接\" class=\"headerlink\" title=\"自动链接\"></a>自动链接</h3><p>只要是用方括号包起来， Markdown 就会自动把它转成链接，一般网址的链接文字就和链接地址一样，例如：</p>\n<pre><code>&lt;http://example.com/&gt;\n</code></pre><h2 id=\"Markdown-免费编辑器\"><a href=\"#Markdown-免费编辑器\" class=\"headerlink\" title=\"Markdown 免费编辑器\"></a>Markdown 免费编辑器</h2><p>Windows 平台</p>\n<ul>\n<li><a href=\"http://markdownpad.com/\" target=\"_blank\" rel=\"noopener\">MarkdownPad</a> </li>\n<li><a href=\"http://code52.org/DownmarkerWPF/\" target=\"_blank\" rel=\"noopener\">MarkPad</a></li>\n</ul>\n<p>Linux 平台</p>\n<ul>\n<li><a href=\"http://sourceforge.net/p/retext/home/ReText/\" target=\"_blank\" rel=\"noopener\">ReText</a></li>\n</ul>\n<p>Mac 平台</p>\n<ul>\n<li><a href=\"http://mouapp.com/\" target=\"_blank\" rel=\"noopener\">Mou</a></li>\n</ul>\n<p>在线编辑器</p>\n<ul>\n<li><a href=\"http://markable.in/\" target=\"_blank\" rel=\"noopener\">Markable.in</a></li>\n<li><a href=\"http://dillinger.io/\" target=\"_blank\" rel=\"noopener\">Dillinger.io</a></li>\n</ul>\n<p>浏览器插件</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog\" target=\"_blank\" rel=\"noopener\">MaDe (Chrome)</a></li>\n</ul>\n<p>高级应用(Sublime Text 2 + MarkdownEditing 教程)</p>\n<ul>\n<li><a href=\"http://www.sublimetext.com/2\" target=\"_blank\" rel=\"noopener\">Sublime Text 2</a></li>\n<li><a href=\"http://ttscoff.github.com/MarkdownEditing/\" target=\"_blank\" rel=\"noopener\">MarkdownEditing</a></li>\n<li><a href=\"http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/\" target=\"_blank\" rel=\"noopener\">教程</a></li>\n</ul>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>感谢: <a href=\"http://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"noopener\">http://daringfireball.net/projects/markdown/</a></p>\n<p>原文：<a href=\"http://www.markdown.cn/#overview\" target=\"_blank\" rel=\"noopener\">http://www.markdown.cn/#overview</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>本文主要介绍Markdown的基本使用方法，基本不用了解HTML的语法。按照本文的说明编辑文本后，只要通过Markdown编辑器，就能生成一个html文件。本文阅读时间大约1-2个小时。</em></p>\n<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><h3 id=\"宗旨\"><a href=\"#宗旨\" class=\"headerlink\" title=\"宗旨\"></a>宗旨</h3><p>Markdown 的目标是实现「易读易写」。</p>\n<h3 id=\"兼容-HTML\"><a href=\"#兼容-HTML\" class=\"headerlink\" title=\"兼容 HTML\"></a>兼容 HTML</h3><p>Markdown 语法的目标是：成为一种适用于网络的书写语言。</p>\n<h3 id=\"特殊字符自动转换\"><a href=\"#特殊字符自动转换\" class=\"headerlink\" title=\"特殊字符自动转换\"></a>特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;。</p>\n<h2 id=\"区块元素\"><a href=\"#区块元素\" class=\"headerlink\" title=\"区块元素\"></a>区块元素</h2><h3 id=\"段落和换行\"><a href=\"#段落和换行\" class=\"headerlink\" title=\"段落和换行\"></a>段落和换行</h3><p>在插入处先按入两个以上的空格然后回车</p>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>在行首插入 1 到 6 个 #，对应到标题 1 到 6 阶，例如：</p>\n<pre><code># 这是 H1\n\n## 这是 H2\n\n###### 这是 H6\n</code></pre><h3 id=\"区块引用blockquotes\"><a href=\"#区块引用blockquotes\" class=\"headerlink\" title=\"区块引用blockquotes\"></a>区块引用blockquotes</h3><p>用 &gt; 的引用方式，例如：</p>\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n</blockquote>\n<p>区块引用可以嵌套，例如：</p>\n<blockquote>\n<blockquote>\n<p>This is nested blockquote.</p>\n</blockquote>\n<p>Back to the first level</p>\n</blockquote>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>序列表使用星号、加号或是减号作为列表标记：</p>\n<pre><code>*   Red\n*   Green\n*   Blue\n</code></pre><p>有序列表则使用数字接着一个英文句点：</p>\n<pre><code>1.  Bird\n2.  McHale\n3.  Parish\n</code></pre><ul>\n<li>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</li>\n<li>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</li>\n<li>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</li>\n<li>在行首出现数字-句点-空白:<br>  1986. What a great season.</li>\n</ul>\n<h3 id=\"代码区块\"><a href=\"#代码区块\" class=\"headerlink\" title=\"代码区块\"></a>代码区块</h3><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>\n<p>这是一个普通段落：</p>\n<pre><code>这是一个代码区块。\n</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p>\n<h3 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线</p>\n<pre><code>* * *\n\n***\n\n*****\n\n- - -\n\n---------------------------------------\n</code></pre><h2 id=\"区段元素\"><a href=\"#区段元素\" class=\"headerlink\" title=\"区段元素\"></a>区段元素</h2><h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><p>行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可:</p>\n<pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.\n\n[This link](http://example.net/) has no title attribute.\n\nSee my [About](/about/) page for details.\n</code></pre><p>参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p>\n<pre><code>This is [an example][id] reference-style link.\n</code></pre><p>链接内容定义的形式为：</p>\n<pre><code>* 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字\n* 接着一个冒号\n* 接着一个以上的空格或制表符\n* 接着链接的网址\n* 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着\n</code></pre><p>下面是一个参考式链接的范例：</p>\n<pre><code>I get 10 times more traffic from [Google] [1] than from\n[Yahoo] [2] or [MSN] [3].\n\n    [1]: http://google.com/        &quot;Google&quot;\n    [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;\n    [3]: http://search.msn.com/    &quot;MSN Search&quot;\n</code></pre><h3 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h3><p>Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 &lt;em> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 &lt;strong>，例如：</p>\n<pre><code>*single asterisks*\n</code></pre><p><em>single asterisks</em></p>\n<pre><code>_single underscores_\n</code></pre><p><em>single underscores</em></p>\n<pre><code>**double asterisks**\n</code></pre><p><strong>double asterisks</strong></p>\n<pre><code>__double underscores__\n</code></pre><p><strong>double underscores</strong></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</p>\n<pre><code>Use the `printf()` function.\n</code></pre><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。<br>行内式的图片语法看起来像是：</p>\n<pre><code>![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg &quot;Optional title&quot;)\n</code></pre><p>参考式的图片语法则长得像这样：</p>\n<pre><code>![Alt text][id]\n[id]: url/to/image  &quot;Optional title attribute&quot;\n</code></pre><h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><h3 id=\"反斜杠\"><a href=\"#反斜杠\" class=\"headerlink\" title=\"反斜杠\"></a>反斜杠</h3><p>利用反斜杠来插入一些在语法中有其它意义的符号<br>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>\n<pre><code>\\   反斜线\n`   反引号\n*   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括弧\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   惊叹号\n</code></pre><h3 id=\"自动链接\"><a href=\"#自动链接\" class=\"headerlink\" title=\"自动链接\"></a>自动链接</h3><p>只要是用方括号包起来， Markdown 就会自动把它转成链接，一般网址的链接文字就和链接地址一样，例如：</p>\n<pre><code>&lt;http://example.com/&gt;\n</code></pre><h2 id=\"Markdown-免费编辑器\"><a href=\"#Markdown-免费编辑器\" class=\"headerlink\" title=\"Markdown 免费编辑器\"></a>Markdown 免费编辑器</h2><p>Windows 平台</p>\n<ul>\n<li><a href=\"http://markdownpad.com/\" target=\"_blank\" rel=\"noopener\">MarkdownPad</a> </li>\n<li><a href=\"http://code52.org/DownmarkerWPF/\" target=\"_blank\" rel=\"noopener\">MarkPad</a></li>\n</ul>\n<p>Linux 平台</p>\n<ul>\n<li><a href=\"http://sourceforge.net/p/retext/home/ReText/\" target=\"_blank\" rel=\"noopener\">ReText</a></li>\n</ul>\n<p>Mac 平台</p>\n<ul>\n<li><a href=\"http://mouapp.com/\" target=\"_blank\" rel=\"noopener\">Mou</a></li>\n</ul>\n<p>在线编辑器</p>\n<ul>\n<li><a href=\"http://markable.in/\" target=\"_blank\" rel=\"noopener\">Markable.in</a></li>\n<li><a href=\"http://dillinger.io/\" target=\"_blank\" rel=\"noopener\">Dillinger.io</a></li>\n</ul>\n<p>浏览器插件</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog\" target=\"_blank\" rel=\"noopener\">MaDe (Chrome)</a></li>\n</ul>\n<p>高级应用(Sublime Text 2 + MarkdownEditing 教程)</p>\n<ul>\n<li><a href=\"http://www.sublimetext.com/2\" target=\"_blank\" rel=\"noopener\">Sublime Text 2</a></li>\n<li><a href=\"http://ttscoff.github.com/MarkdownEditing/\" target=\"_blank\" rel=\"noopener\">MarkdownEditing</a></li>\n<li><a href=\"http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/\" target=\"_blank\" rel=\"noopener\">教程</a></li>\n</ul>\n<h2 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h2><p>感谢: <a href=\"http://daringfireball.net/projects/markdown/\" target=\"_blank\" rel=\"noopener\">http://daringfireball.net/projects/markdown/</a></p>\n<p>原文：<a href=\"http://www.markdown.cn/#overview\" target=\"_blank\" rel=\"noopener\">http://www.markdown.cn/#overview</a> </p>\n"},{"title":"encoding彻底理解字符编码","date":"2018-04-23T06:00:02.000Z","_content":"_为什么要进行编码，这些编码的关系如何，如ASCII，IOS-8859-1，GB2312，GBK，Unicode之间的关系，笔者想要彻底理解字符编码背后的故事，遂进行了探索，具体笔记如下。如能读完本篇文章，我相信会解开很多疑惑。_\n\n### 字符编码\n\n#### 为何需要编码？\n\n我们知道，所有的信息最终都表示为一个二进制的字符串，每一个二进制位（bit）有0和1两种状态。当我们需要把字符'A'存入计算机时，应该对应哪种状态呢，存储时，我们可以将字符'A'用01000010（这个随便编的）二进制字符串表示，存入计算机；读取时，再将01000010还原成字符'A'。那么问题来了，存储时，字符'A'应该对应哪一串二进制数呢，是01000010？或者是10000000 11110101？说白了，就是需要一个规则。这个规则可以将字符映射到唯一一种状态(二进制字符串)，这就是编码。而最早出现的编码规则就是ASCII编码，在ASCII编码规则中，字符'A'既不对应01000010，也不对应1000 0000 11110101，而是对应01000001（不要问为什么，这是规则）。\n\n#### ASCII\n\n这套编码规则是由美国定制，一共规定了128个字符的编码，比如空格\"SPACE\"是32（十进制）（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括 32个不能打印出来的控制符号），只占用了一个字节（8 bit）的后面7位，最前面的1位统一规定为0。总共才有128个字符编码，一个字节都没有用完，这好像似乎有点太少了。于是乎，就开始压榨最高位，对其为1时也进行编码，利用最高位进行编码的方式就称为非ASCII编码，如ISO-8859-1编码。\n\n#### ISO-8859-1\n\n这套编码规则由ISO组织制定。是在 ASCII 码基础上又制定了一些标准用来扩展ASCII编码，即 00000000（0） ~ 01111111（127） 与ASCII的编码一样，对 10000000（128） ~ 11111111（255）这一段进行了编码，如将字符§编码成 10100111（167）。ISO-8859-1编码也是单字节编码，最多能够表示256个字符。Latin1是ISO-8859-1的别名，有些环境下写作Latin-1。但是，即使能够表示256个字符，对中文而言，还是太少了，一个字节肯定不够，必须用多个字节表示。但是，由于是单字节编码，和计算机最基础的表示单位一致，所以很多时候，仍旧使用 ISO8859-1编码来表示。而且在很多协议上，默认使用该编码。比如，虽然\"中文\"两个字不存在ISO8859-1编码，以GB2312编码为例，应该是D6D0 CEC4两个字符，使用ISO8859-1编码的时候则将它拆开为4个字节来表示：D6D0 CEC4（事实上，在进行存储的时候，也是以字节为单位进行处理）。而如果是UTF编码，则是6个字节e4 b8 ad e6 96 87。很明显，这种表示方法还需要以另一种编码为基础才能正确显示。而常见的中文编码方式有GB2312、BIG5、GBK。\n\n#### GB2312\n\nGB2312其对所收录字符进行了\"分区\"处理，共94个区，区从1（十进制）开始，一直到94（十进制），每区含有94个位，位从1（十进制）开始，一直到94（十进制），共8836（94 * 94）个码位，这种表示方式也称为区位码，GB2312是双字节编码，其中高字节表示区，低字节表示位。各区具体说明如下：\n\n* 01-09区收录除汉字外的682个字符，有164个空位（9 * 94 - 682）。\n* 10-15区为空白区，没有使用。\n* 16-55区收录3755个一级汉字（简体），按拼音排序。\n* 56-87区收录3008个二级汉字（简体），按部首/笔画排序。\n* 88-94区为空白区，没有使用。\n\n那么根据区位码如何算出GBK2312编码呢？区位码的表示范围为0101 - 9494（包含了空的区位码）。[点击这里](http://www.qqxiuzi.cn/zh/hanzi-gb2312-bianma.php)，查看中GB2312编码区位码。之后只需要按照如下规则进行转化即可。\n\n　　1. 将区（十进制）转化为十六进制。\n\n　　2. 将转化的十六进制加上A0，得到GB2312编码的高字节。\n\n　　3. 将位（十进制）转化为十六进制。\n\n　　4. 将转化的十六进制加上A0，得到GB2312编码的低字节。\n\n　　5. 组合区和位，区在高字节，位在低字节。\n\n　　6. 得到GB2312编码。\n\n具体的流程图如下：\n{% img gb2312 /2018/04/23/encoding/gb2312-traslation.png %}\n\n_例如：'李'字的区位码为3278（表示在32区，78位）。1. 将32（区）转化为十六进制为20。2. 加上A0为C0。3. 将78（位）转化为十六进制为4E。4. 加上A0为EE。5. 组合区和位，为C0EE。6. 得到GB2312编码，即'李'字的GB2312编码为C0EE。_\n\nGB2312用两个字节编码，采用分区编码，总共编码的中文个数为6763（3755 + 3008）。这些汉字只是最常用的汉字，已经覆盖中国大陆99.75%的使用频率。但是，还有一些汉字在GB2312中没有被编码，如'镕'字，在GB2312中就没有被编码，这样就导致了问题，随之就出现了主流的GBK编码。在讲解GBK编码之前，我们另外讲解一下BIG5编码。\n\n#### BIG5\n\nBIG5采用双字节编码，使用两个字节来表示一个字符。高位字节使用了0x81-0xFE，低位字节使用了0x40-0x7E，及0xA1-0xFE。该编码是繁体中文字符集编码标准，共收录13060个中文字，其中有二字为重复编码，即“兀、兀”（A461及C94A)和“嗀、嗀”(DCD1及DDFC)。具体的分区如下：　　\n\n\t8140-A0FE 保留给使用者自定义字符（造字区）\n\tA140-A3BF 标点符号、希腊字母及特殊符号。其中在A259-A261，收录了度量衡单位用字：兙兛兞兝兡兣嗧瓩糎。\n\tA3C0-A3FE 保留。此区没有开放作造字区用。\n\tA440-C67E 常用汉字，先按笔划再按部首排序。\n\tC6A1-F9DC 其它汉字。\n\tF9DD-F9FE 制表符。\n\n　　[点击这里](http://www.qqxiuzi.cn/zh/hanzi-big5-bianma.php)，查看BIG5编码。注意，BIG5编码与GBK编码没有什么关系。\n\n#### GBK\n\nGBK编码扩展了GB2312，完全兼容GB2312编码（如'李'字的GBK、GB2312编码均为C0EE），但其不兼容BIG5编码（'長'字的BIG5编码为AAF8，GBK编码为E94C，'李'字的BIG5编码为A7F5 不等于C0EE），即如果使用GB2312编码，使用GBK解码是完全正常的，但是如果使用BIG5编码，使用GBK解码，会出现乱码。相比于GB2312编码，GBK编码了更多汉字，如'镕'字。GBK编码依然采用双字节编码方案，其编码范围：8140－FEFE，剔除xx7F码位，共23940个码位。能表示 21003 个汉字。[点击这里](http://www.qqxiuzi.cn/zh/hanzi-gbk-bianma.php)，查看GBK编码。[点击这里](http://www.qqxiuzi.cn/bianma/zifuji.php)，可以查询中文的其他编码。在GBK之后又出现了GB18030编码，但是没有形成主流，故不做介绍，至此，中文编码的问题已经讲解完成。那么问题又来了，大陆网民与在海峡两岸网民交流时，若都使用GBK编码，则没有问题，若一方使用GBK编码，一方使用BIG5编码，那么就会出现乱码问题，这是在海峡两岸网民交流，如果漂洋过海进行交流呢？那就更容易出现乱码问题，这时候我们可能想，要是有一套全世界都通用的编码就好了，不要担心，这样的编码确实是存在的，那就是Unicode。\n\n#### Unicode\n\n有两个独立的, 创立单一字符集的尝试. 一个是国际标准化组织(ISO)的 ISO 10646 项目, 另一个是由多语言软件制造商组成的协会组织的 Unicode 项目. 在1991年前后, 两个项目的参与者都认识到, 世界不需要两个不同的单一字符集. 它们合并双方的工作成果, 并为创立一个单一编码表而协同工作. 两个项目仍都存在并独立地公布各自的标准, 但 Unicode 协会和 ISO/IEC JTC1/SC2 都同意保持 Unicode 和 ISO 10646 标准的码表兼容, 并紧密地共同调整任何未来的扩展。\n\nUnicode是指一张表，里面包含了可能出现的所有字符，每个字符对应一个数字，这个数字称为码点(Code Point)，如字符'H'的码点为72（十进制），字符'李'的码点为26446（十进制）。Unicode表包含了1114112个码点，即从000000（十六进制） - 10FFFF（十六进制）。地球上所有字符都可以在Unicode表中找到对应的唯一码点。点击这里，查询字符对应的码点。Unicode将码空间划分为17个平面，从00 - 10（十六进制，最高两位），即从0 - 16（十进制），每个平面有65536个码点（2^16），其中最重要的是第一个Unicode平面(码位从0000 - FFFF)，包含了最常用的字符，该平面被称为基本多语言平面（Basic Multilingual Plane），缩写为BMP，其他平面称为辅助平面(Supplementary Planes)，在基本多文种平面內， 从D800到DFFF之间的码位区段是永久保留不映射到字符的， 因此UTF-16编码巧妙的利用了这保留下来的码位来对辅助平面内的字符进行编码，这点后面进行讲解。Unicode只是一个符号集，只规定的字符所对应的码点，并没有指定如何存储，如何进行存储出现了不同的编码方案，关于Unicode编码方案主要有两条主线：UCS和UTF。UTF主线由Unicode Consortium进行维护管理，UCS主线由ISO/IEC进行维护管理。\n\n#### UCS\n\nUCS全称为\"Universal Character Set\"，在UCS中主要有UCS-2和UCS-4。\n\n　　1. UCS-2\n\nUCS-2是定长字节的，固定使用2个字节进行编码，从0000（十六进制）- FFFF（十六进制）的码位范围，对应第一个Unicode平面。采用BOM(Byte Order Mark)机制，该机制作用如下：1. 确定字节流采用的是大端序还是小端序。2. 确定字节流的Unicode编码方案。\n\n　　2. UCS-4\n\nUCS-4是定长字节的，固定使用4个字节进行编码。也采用了BOM机制。\n\n#### UTF\n\nUTF全称为\"Unicode Transformation Format\"，在UTF中主要有UTF-8，UTF-16和UTF-32。\n\n　　1. UTF-8\n\nUTF-8是一种变长编码方式，使用1-4个字节进行编码。UTF-8完全兼容ASCII，对于ASCII中的字符，UTF-8采用的编码值跟ASCII完全一致。UTF-8是Unicode一种具体的编码实现。UTF-8是在互联网上使用最广的一种Unicode的编码规则，因为这种编码有利于节约网络流量（因为变长编码，而非统一长度编码）。关于Unicode码点如何转化为UTF-8编码，可以参照如下规则：\n\n　　① 对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。\n\n　　② 对于n字节的符号（n>1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。\n\n总结的编码规则如下：\n\n\n                   Unicode符号范围　　           | 　　UTF-8编码方式\n\t　　　         (十六进制) (十进制)　　　　     | 　　（二进制）\n\t　　----------------------------------------------------------------------------------------------------\n\t　　  0000 0000-0000 007F (0-127)           | 　　 0xxxxxxx\n\t　　  0000 0080-0000 07FF (128-2047)        | 　　 110xxxxx 10xxxxxx\n\t　　  0000 0800-0000 FFFF (2048-65535)      | 　   1110xxxx 10xxxxxx 10xxxxxx\n\t　　  0001 0000-0010 FFFF (65536-1114111)   | 　　 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n　　说明：字符'A'的Unicode码点为65（十进制），根据上表，在第一行范围，则字符'A'的UTF-8编码为01000001，中文字符'李'的Unicode码点为26446（十进制），二进制为01100111 01001110，十六进制为674E。根据上表，在第三行范围，则将'李'二进制代码从低位到高位依次填入x中，不足的填入0。得到UTF-8编码为11100110 10011101 10001110，即E69D8E（十六进制）。\n\n　　由上述编码规则可知，0000 0000 - 0000 FFFF（第一行到第三行）为Unicode第一个平面（基本多语言平面），而0001 0000 - 10 FFFF（第四行）为Unicode其他平面（辅助平面）。在基本多语言平面对应了绝大多数常用的字符。对于大于65535（十进制）的码点，即在辅助平面上的码点，需要使用4个字节来进行UTF-8编码。\n\n　　2. UTF-16\n\nUTF-8是不定长的编码，使用1、2、3、4个字节编码，而UTF-16则只使用2或4个字节编码。UTF-16也是Unicode一种具体的编码实现。关于Unicode如何转化为UTf-16编码规则如下\n\n　　① 若Unicode码点在第一平面（BPM）中，则使用2个字节进行编码。 \n\n　　② 若Unicode码点在其他平面（辅助平面），则使用4个字节进行编码。\n\n关于辅助平面的码点编码更详细解析如下：辅助平面码点被编码为一对16比特（四个字节）长的码元, 称之为代理对(surrogate pair), 第一部分称为高位代理(high surrogate)或前导代理(lead surrogates)，码位范围为：D800-DBFF. 第二部分称为低位代理(low surrogate)或后尾代理(trail surrogates)， 码位范围为：DC00-DFFF。注意，高位代理的码位从D800到DBFF，而低位代理的码位从DC00到DFFF，总共恰好为D800-DFFF，这部分码点在第一平面内是保留的，不映射到任何字符，所以UTF-16编码巧妙的利用了这点来进行码点在辅助平面内的4字节编码。\n\n说明：字符'A'的Unicode码点为65（十进制），十六进制表示为41，在第一平面。根据规则，UTF-16采用2个字节进行编码。那么问题又来了，知道了采用两个字节编码，并且我们也知道计算机是以字节为单位进行存储，这两个字节应该表示为00 41(十六进制)？或者是41 00（十六进制）呢？这就引出了一个问题，需要用到之前提及的BOM机制来解决。\n\n表示为00 41意味着采用了大端序（Big endian），而表示为41 00意味着采用了小端序。那么计算机如何知道存储的字符信息采用了大端序还是小端虚呢？这就需要加入一些控制信息，具体是采用大端序，则在文件前加入FE FF，采用小端序，则在文件前加入FF FE。这样，当计算开始读取时发现前两个字节为FE FF，就表示之后的信息采用的是小端序，反之，则是大端序。\n\n字符 （无法显示，只能截图显示），其Unicode码点为65902（十进制），十六进制为1016E，很显然，已经超出了第一平面（BMP）所能表示的范围。其在辅助平面内，根据规则，UTF-16采用4个字节进行编码。然而其编码不是简单扩展为4个字节（00 01 01 6E），而是采用如下规则进行计算。\n\n　　① 使用Unicode码位减去100000（十六进制），得到的值扩展20位（因为Unicode最大为10 FF FF（十六进制），减去1 00 00（十六进制）后，得到的结果最大为0FFF FF（十六进制），即为20位，不足20位的，在高位加一个0，扩展至20位即可）。\n\n　　② 将步骤一得到的20位，按照高十位和低十位进行分割。\n\n　　③ 将步骤二的高十位扩展至2个字节，再加上D800（十六进制），得到高位代理或前导代理。取值范围是D800 - 0xDBFF。\n\n　　④ 将步骤二的低十位扩展至2个字节，再加上DC00（十六进制），得到低位代理或后尾代理。取值范围是DC00 - 0xDFFF。\n\n　　Unicode转UTF-16规则流程图如下：\n\n{% img utf-16 /2018/04/23/encoding/utf-16.png %}\n\n　　按照这个规则，我们计算字符的UTF-16编码，我们知道其码点为1016E，减去10000得到016E，扩展至0016E，进行分割，得到高十位为00 0000 0000，十六进制为0000，加上D800为D800；得到低十位为01 0110 1110，十六进制为016E，加上DC00为DD6E；综合得到D8 00 DD 6E。即UTF-16编码为D8 00 DD 6E（也可为D8 0 DD 6E）。\n\n　　而对于UTF-32是使用4个字节表示，也采用BOM机制，可以类比UTF-16，这里不再额外介绍。\n\n### 字符编码区别\n\n#### UCS-2 与 UTF-16区别\n\n从上面的分析知道，UCS-2采用的两个字节进行编码。在0000到FFFF的码位范围内，它和UTF-16基本一致，为什么说基本一致，因为在UTF-16中从U+D800到U+DFFF的码位不对应于任何字符，而在使用UCS-2的时代，U+D800到U+DFFF内的值被占用。\n\nUCS-2只能表示BMP内的码点（只采用2个字节），而UTF-16可以表示辅助平面内的码点（采用4个字节）。\n\n我们可以抽象的认为UTF-16可看成是UCS-2的父集。在没有辅助平面字符（surrogate code points）前，UTF-16与UCS-2所指的意思基本一致。但当引入辅助平面字符后，想要表示辅助平面字符时，就只能用UTF-16编码了。\n\n#### UCS -4与 UTF-16的区别\n\n在BMP上，UTF-16采用2个字节表示，而在辅助平面上，UTF-16采用的是4个字节表示。对于UCS-4，不管在哪个平面都采用的是四个字节表示。\n\n#### 为什么UTF-8编码不需要BOM机制\n\n因为在UTF-8编码中，其自身已经带了控制信息，如1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx，其中1110就起到了控制作用，所以不需要额外的BOM机制。\n\n### 总结\n\n如果读者有耐心看到这里，我相信对于字符编码这一块已经就已经没有什么疑问了。写到这里，就完成了主流编码的探索，探索的过程确实是不容易，最后弄清楚了，感觉相当的快乐。\n\n \n\n参考链接：\n\n<https://www.cnblogs.com/leesf456/p/5317574.html>\n\n<http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html#comment-text>\n\n<http://www.joelonsoftware.com/articles/Unicode.html>\n\n<http://blog.csdn.net/xys_777/article/details/5773763>\n\n<http://www.zhihu.com/question/19817672>\n\n<http://demon.tw/programming/utf-16-ucs-2.html>\n\n<http://blog.csdn.net/dslztx/article/details/48830887>\n\n<http://blog.csdn.net/dslztx/article/details/48947097>\n\n<http://www.zhihu.com/question/22881537>\n\n<http://blog.csdn.net/shangboerds/article/details/7498317>\n\n<http://blog.csdn.net/shuilan0066/article/details/7865715>\n\n<http://www.zhihu.com/question/23374078>\n\n<http://swiftlet.net/archives/category/char-encoding>\n\n<http://blog.csdn.net/shuilan0066/article/details/7839189>\n\n<http://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/>\n\n<http://www.freebuf.com/articles/others-articles/25623.html>\n\n<http://blog.csdn.net/qinysong/article/details/1179513>\n\n<http://unicode-table.com/cn/>","source":"_posts/encoding.md","raw":"---\ntitle: encoding彻底理解字符编码\ndate: 2018-04-23 14:00:02\ntags:\n\t- encode\ncategory:\n\t- encode\n---\n_为什么要进行编码，这些编码的关系如何，如ASCII，IOS-8859-1，GB2312，GBK，Unicode之间的关系，笔者想要彻底理解字符编码背后的故事，遂进行了探索，具体笔记如下。如能读完本篇文章，我相信会解开很多疑惑。_\n\n### 字符编码\n\n#### 为何需要编码？\n\n我们知道，所有的信息最终都表示为一个二进制的字符串，每一个二进制位（bit）有0和1两种状态。当我们需要把字符'A'存入计算机时，应该对应哪种状态呢，存储时，我们可以将字符'A'用01000010（这个随便编的）二进制字符串表示，存入计算机；读取时，再将01000010还原成字符'A'。那么问题来了，存储时，字符'A'应该对应哪一串二进制数呢，是01000010？或者是10000000 11110101？说白了，就是需要一个规则。这个规则可以将字符映射到唯一一种状态(二进制字符串)，这就是编码。而最早出现的编码规则就是ASCII编码，在ASCII编码规则中，字符'A'既不对应01000010，也不对应1000 0000 11110101，而是对应01000001（不要问为什么，这是规则）。\n\n#### ASCII\n\n这套编码规则是由美国定制，一共规定了128个字符的编码，比如空格\"SPACE\"是32（十进制）（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括 32个不能打印出来的控制符号），只占用了一个字节（8 bit）的后面7位，最前面的1位统一规定为0。总共才有128个字符编码，一个字节都没有用完，这好像似乎有点太少了。于是乎，就开始压榨最高位，对其为1时也进行编码，利用最高位进行编码的方式就称为非ASCII编码，如ISO-8859-1编码。\n\n#### ISO-8859-1\n\n这套编码规则由ISO组织制定。是在 ASCII 码基础上又制定了一些标准用来扩展ASCII编码，即 00000000（0） ~ 01111111（127） 与ASCII的编码一样，对 10000000（128） ~ 11111111（255）这一段进行了编码，如将字符§编码成 10100111（167）。ISO-8859-1编码也是单字节编码，最多能够表示256个字符。Latin1是ISO-8859-1的别名，有些环境下写作Latin-1。但是，即使能够表示256个字符，对中文而言，还是太少了，一个字节肯定不够，必须用多个字节表示。但是，由于是单字节编码，和计算机最基础的表示单位一致，所以很多时候，仍旧使用 ISO8859-1编码来表示。而且在很多协议上，默认使用该编码。比如，虽然\"中文\"两个字不存在ISO8859-1编码，以GB2312编码为例，应该是D6D0 CEC4两个字符，使用ISO8859-1编码的时候则将它拆开为4个字节来表示：D6D0 CEC4（事实上，在进行存储的时候，也是以字节为单位进行处理）。而如果是UTF编码，则是6个字节e4 b8 ad e6 96 87。很明显，这种表示方法还需要以另一种编码为基础才能正确显示。而常见的中文编码方式有GB2312、BIG5、GBK。\n\n#### GB2312\n\nGB2312其对所收录字符进行了\"分区\"处理，共94个区，区从1（十进制）开始，一直到94（十进制），每区含有94个位，位从1（十进制）开始，一直到94（十进制），共8836（94 * 94）个码位，这种表示方式也称为区位码，GB2312是双字节编码，其中高字节表示区，低字节表示位。各区具体说明如下：\n\n* 01-09区收录除汉字外的682个字符，有164个空位（9 * 94 - 682）。\n* 10-15区为空白区，没有使用。\n* 16-55区收录3755个一级汉字（简体），按拼音排序。\n* 56-87区收录3008个二级汉字（简体），按部首/笔画排序。\n* 88-94区为空白区，没有使用。\n\n那么根据区位码如何算出GBK2312编码呢？区位码的表示范围为0101 - 9494（包含了空的区位码）。[点击这里](http://www.qqxiuzi.cn/zh/hanzi-gb2312-bianma.php)，查看中GB2312编码区位码。之后只需要按照如下规则进行转化即可。\n\n　　1. 将区（十进制）转化为十六进制。\n\n　　2. 将转化的十六进制加上A0，得到GB2312编码的高字节。\n\n　　3. 将位（十进制）转化为十六进制。\n\n　　4. 将转化的十六进制加上A0，得到GB2312编码的低字节。\n\n　　5. 组合区和位，区在高字节，位在低字节。\n\n　　6. 得到GB2312编码。\n\n具体的流程图如下：\n{% img gb2312 /2018/04/23/encoding/gb2312-traslation.png %}\n\n_例如：'李'字的区位码为3278（表示在32区，78位）。1. 将32（区）转化为十六进制为20。2. 加上A0为C0。3. 将78（位）转化为十六进制为4E。4. 加上A0为EE。5. 组合区和位，为C0EE。6. 得到GB2312编码，即'李'字的GB2312编码为C0EE。_\n\nGB2312用两个字节编码，采用分区编码，总共编码的中文个数为6763（3755 + 3008）。这些汉字只是最常用的汉字，已经覆盖中国大陆99.75%的使用频率。但是，还有一些汉字在GB2312中没有被编码，如'镕'字，在GB2312中就没有被编码，这样就导致了问题，随之就出现了主流的GBK编码。在讲解GBK编码之前，我们另外讲解一下BIG5编码。\n\n#### BIG5\n\nBIG5采用双字节编码，使用两个字节来表示一个字符。高位字节使用了0x81-0xFE，低位字节使用了0x40-0x7E，及0xA1-0xFE。该编码是繁体中文字符集编码标准，共收录13060个中文字，其中有二字为重复编码，即“兀、兀”（A461及C94A)和“嗀、嗀”(DCD1及DDFC)。具体的分区如下：　　\n\n\t8140-A0FE 保留给使用者自定义字符（造字区）\n\tA140-A3BF 标点符号、希腊字母及特殊符号。其中在A259-A261，收录了度量衡单位用字：兙兛兞兝兡兣嗧瓩糎。\n\tA3C0-A3FE 保留。此区没有开放作造字区用。\n\tA440-C67E 常用汉字，先按笔划再按部首排序。\n\tC6A1-F9DC 其它汉字。\n\tF9DD-F9FE 制表符。\n\n　　[点击这里](http://www.qqxiuzi.cn/zh/hanzi-big5-bianma.php)，查看BIG5编码。注意，BIG5编码与GBK编码没有什么关系。\n\n#### GBK\n\nGBK编码扩展了GB2312，完全兼容GB2312编码（如'李'字的GBK、GB2312编码均为C0EE），但其不兼容BIG5编码（'長'字的BIG5编码为AAF8，GBK编码为E94C，'李'字的BIG5编码为A7F5 不等于C0EE），即如果使用GB2312编码，使用GBK解码是完全正常的，但是如果使用BIG5编码，使用GBK解码，会出现乱码。相比于GB2312编码，GBK编码了更多汉字，如'镕'字。GBK编码依然采用双字节编码方案，其编码范围：8140－FEFE，剔除xx7F码位，共23940个码位。能表示 21003 个汉字。[点击这里](http://www.qqxiuzi.cn/zh/hanzi-gbk-bianma.php)，查看GBK编码。[点击这里](http://www.qqxiuzi.cn/bianma/zifuji.php)，可以查询中文的其他编码。在GBK之后又出现了GB18030编码，但是没有形成主流，故不做介绍，至此，中文编码的问题已经讲解完成。那么问题又来了，大陆网民与在海峡两岸网民交流时，若都使用GBK编码，则没有问题，若一方使用GBK编码，一方使用BIG5编码，那么就会出现乱码问题，这是在海峡两岸网民交流，如果漂洋过海进行交流呢？那就更容易出现乱码问题，这时候我们可能想，要是有一套全世界都通用的编码就好了，不要担心，这样的编码确实是存在的，那就是Unicode。\n\n#### Unicode\n\n有两个独立的, 创立单一字符集的尝试. 一个是国际标准化组织(ISO)的 ISO 10646 项目, 另一个是由多语言软件制造商组成的协会组织的 Unicode 项目. 在1991年前后, 两个项目的参与者都认识到, 世界不需要两个不同的单一字符集. 它们合并双方的工作成果, 并为创立一个单一编码表而协同工作. 两个项目仍都存在并独立地公布各自的标准, 但 Unicode 协会和 ISO/IEC JTC1/SC2 都同意保持 Unicode 和 ISO 10646 标准的码表兼容, 并紧密地共同调整任何未来的扩展。\n\nUnicode是指一张表，里面包含了可能出现的所有字符，每个字符对应一个数字，这个数字称为码点(Code Point)，如字符'H'的码点为72（十进制），字符'李'的码点为26446（十进制）。Unicode表包含了1114112个码点，即从000000（十六进制） - 10FFFF（十六进制）。地球上所有字符都可以在Unicode表中找到对应的唯一码点。点击这里，查询字符对应的码点。Unicode将码空间划分为17个平面，从00 - 10（十六进制，最高两位），即从0 - 16（十进制），每个平面有65536个码点（2^16），其中最重要的是第一个Unicode平面(码位从0000 - FFFF)，包含了最常用的字符，该平面被称为基本多语言平面（Basic Multilingual Plane），缩写为BMP，其他平面称为辅助平面(Supplementary Planes)，在基本多文种平面內， 从D800到DFFF之间的码位区段是永久保留不映射到字符的， 因此UTF-16编码巧妙的利用了这保留下来的码位来对辅助平面内的字符进行编码，这点后面进行讲解。Unicode只是一个符号集，只规定的字符所对应的码点，并没有指定如何存储，如何进行存储出现了不同的编码方案，关于Unicode编码方案主要有两条主线：UCS和UTF。UTF主线由Unicode Consortium进行维护管理，UCS主线由ISO/IEC进行维护管理。\n\n#### UCS\n\nUCS全称为\"Universal Character Set\"，在UCS中主要有UCS-2和UCS-4。\n\n　　1. UCS-2\n\nUCS-2是定长字节的，固定使用2个字节进行编码，从0000（十六进制）- FFFF（十六进制）的码位范围，对应第一个Unicode平面。采用BOM(Byte Order Mark)机制，该机制作用如下：1. 确定字节流采用的是大端序还是小端序。2. 确定字节流的Unicode编码方案。\n\n　　2. UCS-4\n\nUCS-4是定长字节的，固定使用4个字节进行编码。也采用了BOM机制。\n\n#### UTF\n\nUTF全称为\"Unicode Transformation Format\"，在UTF中主要有UTF-8，UTF-16和UTF-32。\n\n　　1. UTF-8\n\nUTF-8是一种变长编码方式，使用1-4个字节进行编码。UTF-8完全兼容ASCII，对于ASCII中的字符，UTF-8采用的编码值跟ASCII完全一致。UTF-8是Unicode一种具体的编码实现。UTF-8是在互联网上使用最广的一种Unicode的编码规则，因为这种编码有利于节约网络流量（因为变长编码，而非统一长度编码）。关于Unicode码点如何转化为UTF-8编码，可以参照如下规则：\n\n　　① 对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。\n\n　　② 对于n字节的符号（n>1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。\n\n总结的编码规则如下：\n\n\n                   Unicode符号范围　　           | 　　UTF-8编码方式\n\t　　　         (十六进制) (十进制)　　　　     | 　　（二进制）\n\t　　----------------------------------------------------------------------------------------------------\n\t　　  0000 0000-0000 007F (0-127)           | 　　 0xxxxxxx\n\t　　  0000 0080-0000 07FF (128-2047)        | 　　 110xxxxx 10xxxxxx\n\t　　  0000 0800-0000 FFFF (2048-65535)      | 　   1110xxxx 10xxxxxx 10xxxxxx\n\t　　  0001 0000-0010 FFFF (65536-1114111)   | 　　 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n　　说明：字符'A'的Unicode码点为65（十进制），根据上表，在第一行范围，则字符'A'的UTF-8编码为01000001，中文字符'李'的Unicode码点为26446（十进制），二进制为01100111 01001110，十六进制为674E。根据上表，在第三行范围，则将'李'二进制代码从低位到高位依次填入x中，不足的填入0。得到UTF-8编码为11100110 10011101 10001110，即E69D8E（十六进制）。\n\n　　由上述编码规则可知，0000 0000 - 0000 FFFF（第一行到第三行）为Unicode第一个平面（基本多语言平面），而0001 0000 - 10 FFFF（第四行）为Unicode其他平面（辅助平面）。在基本多语言平面对应了绝大多数常用的字符。对于大于65535（十进制）的码点，即在辅助平面上的码点，需要使用4个字节来进行UTF-8编码。\n\n　　2. UTF-16\n\nUTF-8是不定长的编码，使用1、2、3、4个字节编码，而UTF-16则只使用2或4个字节编码。UTF-16也是Unicode一种具体的编码实现。关于Unicode如何转化为UTf-16编码规则如下\n\n　　① 若Unicode码点在第一平面（BPM）中，则使用2个字节进行编码。 \n\n　　② 若Unicode码点在其他平面（辅助平面），则使用4个字节进行编码。\n\n关于辅助平面的码点编码更详细解析如下：辅助平面码点被编码为一对16比特（四个字节）长的码元, 称之为代理对(surrogate pair), 第一部分称为高位代理(high surrogate)或前导代理(lead surrogates)，码位范围为：D800-DBFF. 第二部分称为低位代理(low surrogate)或后尾代理(trail surrogates)， 码位范围为：DC00-DFFF。注意，高位代理的码位从D800到DBFF，而低位代理的码位从DC00到DFFF，总共恰好为D800-DFFF，这部分码点在第一平面内是保留的，不映射到任何字符，所以UTF-16编码巧妙的利用了这点来进行码点在辅助平面内的4字节编码。\n\n说明：字符'A'的Unicode码点为65（十进制），十六进制表示为41，在第一平面。根据规则，UTF-16采用2个字节进行编码。那么问题又来了，知道了采用两个字节编码，并且我们也知道计算机是以字节为单位进行存储，这两个字节应该表示为00 41(十六进制)？或者是41 00（十六进制）呢？这就引出了一个问题，需要用到之前提及的BOM机制来解决。\n\n表示为00 41意味着采用了大端序（Big endian），而表示为41 00意味着采用了小端序。那么计算机如何知道存储的字符信息采用了大端序还是小端虚呢？这就需要加入一些控制信息，具体是采用大端序，则在文件前加入FE FF，采用小端序，则在文件前加入FF FE。这样，当计算开始读取时发现前两个字节为FE FF，就表示之后的信息采用的是小端序，反之，则是大端序。\n\n字符 （无法显示，只能截图显示），其Unicode码点为65902（十进制），十六进制为1016E，很显然，已经超出了第一平面（BMP）所能表示的范围。其在辅助平面内，根据规则，UTF-16采用4个字节进行编码。然而其编码不是简单扩展为4个字节（00 01 01 6E），而是采用如下规则进行计算。\n\n　　① 使用Unicode码位减去100000（十六进制），得到的值扩展20位（因为Unicode最大为10 FF FF（十六进制），减去1 00 00（十六进制）后，得到的结果最大为0FFF FF（十六进制），即为20位，不足20位的，在高位加一个0，扩展至20位即可）。\n\n　　② 将步骤一得到的20位，按照高十位和低十位进行分割。\n\n　　③ 将步骤二的高十位扩展至2个字节，再加上D800（十六进制），得到高位代理或前导代理。取值范围是D800 - 0xDBFF。\n\n　　④ 将步骤二的低十位扩展至2个字节，再加上DC00（十六进制），得到低位代理或后尾代理。取值范围是DC00 - 0xDFFF。\n\n　　Unicode转UTF-16规则流程图如下：\n\n{% img utf-16 /2018/04/23/encoding/utf-16.png %}\n\n　　按照这个规则，我们计算字符的UTF-16编码，我们知道其码点为1016E，减去10000得到016E，扩展至0016E，进行分割，得到高十位为00 0000 0000，十六进制为0000，加上D800为D800；得到低十位为01 0110 1110，十六进制为016E，加上DC00为DD6E；综合得到D8 00 DD 6E。即UTF-16编码为D8 00 DD 6E（也可为D8 0 DD 6E）。\n\n　　而对于UTF-32是使用4个字节表示，也采用BOM机制，可以类比UTF-16，这里不再额外介绍。\n\n### 字符编码区别\n\n#### UCS-2 与 UTF-16区别\n\n从上面的分析知道，UCS-2采用的两个字节进行编码。在0000到FFFF的码位范围内，它和UTF-16基本一致，为什么说基本一致，因为在UTF-16中从U+D800到U+DFFF的码位不对应于任何字符，而在使用UCS-2的时代，U+D800到U+DFFF内的值被占用。\n\nUCS-2只能表示BMP内的码点（只采用2个字节），而UTF-16可以表示辅助平面内的码点（采用4个字节）。\n\n我们可以抽象的认为UTF-16可看成是UCS-2的父集。在没有辅助平面字符（surrogate code points）前，UTF-16与UCS-2所指的意思基本一致。但当引入辅助平面字符后，想要表示辅助平面字符时，就只能用UTF-16编码了。\n\n#### UCS -4与 UTF-16的区别\n\n在BMP上，UTF-16采用2个字节表示，而在辅助平面上，UTF-16采用的是4个字节表示。对于UCS-4，不管在哪个平面都采用的是四个字节表示。\n\n#### 为什么UTF-8编码不需要BOM机制\n\n因为在UTF-8编码中，其自身已经带了控制信息，如1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx，其中1110就起到了控制作用，所以不需要额外的BOM机制。\n\n### 总结\n\n如果读者有耐心看到这里，我相信对于字符编码这一块已经就已经没有什么疑问了。写到这里，就完成了主流编码的探索，探索的过程确实是不容易，最后弄清楚了，感觉相当的快乐。\n\n \n\n参考链接：\n\n<https://www.cnblogs.com/leesf456/p/5317574.html>\n\n<http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html#comment-text>\n\n<http://www.joelonsoftware.com/articles/Unicode.html>\n\n<http://blog.csdn.net/xys_777/article/details/5773763>\n\n<http://www.zhihu.com/question/19817672>\n\n<http://demon.tw/programming/utf-16-ucs-2.html>\n\n<http://blog.csdn.net/dslztx/article/details/48830887>\n\n<http://blog.csdn.net/dslztx/article/details/48947097>\n\n<http://www.zhihu.com/question/22881537>\n\n<http://blog.csdn.net/shangboerds/article/details/7498317>\n\n<http://blog.csdn.net/shuilan0066/article/details/7865715>\n\n<http://www.zhihu.com/question/23374078>\n\n<http://swiftlet.net/archives/category/char-encoding>\n\n<http://blog.csdn.net/shuilan0066/article/details/7839189>\n\n<http://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/>\n\n<http://www.freebuf.com/articles/others-articles/25623.html>\n\n<http://blog.csdn.net/qinysong/article/details/1179513>\n\n<http://unicode-table.com/cn/>","slug":"encoding","published":1,"updated":"2018-04-23T07:31:31.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwontp000rwgl17vohixe1","content":"<p><em>为什么要进行编码，这些编码的关系如何，如ASCII，IOS-8859-1，GB2312，GBK，Unicode之间的关系，笔者想要彻底理解字符编码背后的故事，遂进行了探索，具体笔记如下。如能读完本篇文章，我相信会解开很多疑惑。</em></p>\n<h3 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h3><h4 id=\"为何需要编码？\"><a href=\"#为何需要编码？\" class=\"headerlink\" title=\"为何需要编码？\"></a>为何需要编码？</h4><p>我们知道，所有的信息最终都表示为一个二进制的字符串，每一个二进制位（bit）有0和1两种状态。当我们需要把字符’A’存入计算机时，应该对应哪种状态呢，存储时，我们可以将字符’A’用01000010（这个随便编的）二进制字符串表示，存入计算机；读取时，再将01000010还原成字符’A’。那么问题来了，存储时，字符’A’应该对应哪一串二进制数呢，是01000010？或者是10000000 11110101？说白了，就是需要一个规则。这个规则可以将字符映射到唯一一种状态(二进制字符串)，这就是编码。而最早出现的编码规则就是ASCII编码，在ASCII编码规则中，字符’A’既不对应01000010，也不对应1000 0000 11110101，而是对应01000001（不要问为什么，这是规则）。</p>\n<h4 id=\"ASCII\"><a href=\"#ASCII\" class=\"headerlink\" title=\"ASCII\"></a>ASCII</h4><p>这套编码规则是由美国定制，一共规定了128个字符的编码，比如空格”SPACE”是32（十进制）（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括 32个不能打印出来的控制符号），只占用了一个字节（8 bit）的后面7位，最前面的1位统一规定为0。总共才有128个字符编码，一个字节都没有用完，这好像似乎有点太少了。于是乎，就开始压榨最高位，对其为1时也进行编码，利用最高位进行编码的方式就称为非ASCII编码，如ISO-8859-1编码。</p>\n<h4 id=\"ISO-8859-1\"><a href=\"#ISO-8859-1\" class=\"headerlink\" title=\"ISO-8859-1\"></a>ISO-8859-1</h4><p>这套编码规则由ISO组织制定。是在 ASCII 码基础上又制定了一些标准用来扩展ASCII编码，即 00000000（0） ~ 01111111（127） 与ASCII的编码一样，对 10000000（128） ~ 11111111（255）这一段进行了编码，如将字符§编码成 10100111（167）。ISO-8859-1编码也是单字节编码，最多能够表示256个字符。Latin1是ISO-8859-1的别名，有些环境下写作Latin-1。但是，即使能够表示256个字符，对中文而言，还是太少了，一个字节肯定不够，必须用多个字节表示。但是，由于是单字节编码，和计算机最基础的表示单位一致，所以很多时候，仍旧使用 ISO8859-1编码来表示。而且在很多协议上，默认使用该编码。比如，虽然”中文”两个字不存在ISO8859-1编码，以GB2312编码为例，应该是D6D0 CEC4两个字符，使用ISO8859-1编码的时候则将它拆开为4个字节来表示：D6D0 CEC4（事实上，在进行存储的时候，也是以字节为单位进行处理）。而如果是UTF编码，则是6个字节e4 b8 ad e6 96 87。很明显，这种表示方法还需要以另一种编码为基础才能正确显示。而常见的中文编码方式有GB2312、BIG5、GBK。</p>\n<h4 id=\"GB2312\"><a href=\"#GB2312\" class=\"headerlink\" title=\"GB2312\"></a>GB2312</h4><p>GB2312其对所收录字符进行了”分区”处理，共94个区，区从1（十进制）开始，一直到94（十进制），每区含有94个位，位从1（十进制）开始，一直到94（十进制），共8836（94 * 94）个码位，这种表示方式也称为区位码，GB2312是双字节编码，其中高字节表示区，低字节表示位。各区具体说明如下：</p>\n<ul>\n<li>01-09区收录除汉字外的682个字符，有164个空位（9 * 94 - 682）。</li>\n<li>10-15区为空白区，没有使用。</li>\n<li>16-55区收录3755个一级汉字（简体），按拼音排序。</li>\n<li>56-87区收录3008个二级汉字（简体），按部首/笔画排序。</li>\n<li>88-94区为空白区，没有使用。</li>\n</ul>\n<p>那么根据区位码如何算出GBK2312编码呢？区位码的表示范围为0101 - 9494（包含了空的区位码）。<a href=\"http://www.qqxiuzi.cn/zh/hanzi-gb2312-bianma.php\" target=\"_blank\" rel=\"noopener\">点击这里</a>，查看中GB2312编码区位码。之后只需要按照如下规则进行转化即可。</p>\n<p>　　1. 将区（十进制）转化为十六进制。</p>\n<p>　　2. 将转化的十六进制加上A0，得到GB2312编码的高字节。</p>\n<p>　　3. 将位（十进制）转化为十六进制。</p>\n<p>　　4. 将转化的十六进制加上A0，得到GB2312编码的低字节。</p>\n<p>　　5. 组合区和位，区在高字节，位在低字节。</p>\n<p>　　6. 得到GB2312编码。</p>\n<p>具体的流程图如下：<br><img src=\"/2018/04/23/encoding/gb2312-traslation.png\" class=\"gb2312\"></p>\n<p><em>例如：’李’字的区位码为3278（表示在32区，78位）。1. 将32（区）转化为十六进制为20。2. 加上A0为C0。3. 将78（位）转化为十六进制为4E。4. 加上A0为EE。5. 组合区和位，为C0EE。6. 得到GB2312编码，即’李’字的GB2312编码为C0EE。</em></p>\n<p>GB2312用两个字节编码，采用分区编码，总共编码的中文个数为6763（3755 + 3008）。这些汉字只是最常用的汉字，已经覆盖中国大陆99.75%的使用频率。但是，还有一些汉字在GB2312中没有被编码，如’镕’字，在GB2312中就没有被编码，这样就导致了问题，随之就出现了主流的GBK编码。在讲解GBK编码之前，我们另外讲解一下BIG5编码。</p>\n<h4 id=\"BIG5\"><a href=\"#BIG5\" class=\"headerlink\" title=\"BIG5\"></a>BIG5</h4><p>BIG5采用双字节编码，使用两个字节来表示一个字符。高位字节使用了0x81-0xFE，低位字节使用了0x40-0x7E，及0xA1-0xFE。该编码是繁体中文字符集编码标准，共收录13060个中文字，其中有二字为重复编码，即“兀、兀”（A461及C94A)和“嗀、嗀”(DCD1及DDFC)。具体的分区如下：　　</p>\n<pre><code>8140-A0FE 保留给使用者自定义字符（造字区）\nA140-A3BF 标点符号、希腊字母及特殊符号。其中在A259-A261，收录了度量衡单位用字：兙兛兞兝兡兣嗧瓩糎。\nA3C0-A3FE 保留。此区没有开放作造字区用。\nA440-C67E 常用汉字，先按笔划再按部首排序。\nC6A1-F9DC 其它汉字。\nF9DD-F9FE 制表符。\n</code></pre><p>　　<a href=\"http://www.qqxiuzi.cn/zh/hanzi-big5-bianma.php\" target=\"_blank\" rel=\"noopener\">点击这里</a>，查看BIG5编码。注意，BIG5编码与GBK编码没有什么关系。</p>\n<h4 id=\"GBK\"><a href=\"#GBK\" class=\"headerlink\" title=\"GBK\"></a>GBK</h4><p>GBK编码扩展了GB2312，完全兼容GB2312编码（如’李’字的GBK、GB2312编码均为C0EE），但其不兼容BIG5编码（’長’字的BIG5编码为AAF8，GBK编码为E94C，’李’字的BIG5编码为A7F5 不等于C0EE），即如果使用GB2312编码，使用GBK解码是完全正常的，但是如果使用BIG5编码，使用GBK解码，会出现乱码。相比于GB2312编码，GBK编码了更多汉字，如’镕’字。GBK编码依然采用双字节编码方案，其编码范围：8140－FEFE，剔除xx7F码位，共23940个码位。能表示 21003 个汉字。<a href=\"http://www.qqxiuzi.cn/zh/hanzi-gbk-bianma.php\" target=\"_blank\" rel=\"noopener\">点击这里</a>，查看GBK编码。<a href=\"http://www.qqxiuzi.cn/bianma/zifuji.php\" target=\"_blank\" rel=\"noopener\">点击这里</a>，可以查询中文的其他编码。在GBK之后又出现了GB18030编码，但是没有形成主流，故不做介绍，至此，中文编码的问题已经讲解完成。那么问题又来了，大陆网民与在海峡两岸网民交流时，若都使用GBK编码，则没有问题，若一方使用GBK编码，一方使用BIG5编码，那么就会出现乱码问题，这是在海峡两岸网民交流，如果漂洋过海进行交流呢？那就更容易出现乱码问题，这时候我们可能想，要是有一套全世界都通用的编码就好了，不要担心，这样的编码确实是存在的，那就是Unicode。</p>\n<h4 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h4><p>有两个独立的, 创立单一字符集的尝试. 一个是国际标准化组织(ISO)的 ISO 10646 项目, 另一个是由多语言软件制造商组成的协会组织的 Unicode 项目. 在1991年前后, 两个项目的参与者都认识到, 世界不需要两个不同的单一字符集. 它们合并双方的工作成果, 并为创立一个单一编码表而协同工作. 两个项目仍都存在并独立地公布各自的标准, 但 Unicode 协会和 ISO/IEC JTC1/SC2 都同意保持 Unicode 和 ISO 10646 标准的码表兼容, 并紧密地共同调整任何未来的扩展。</p>\n<p>Unicode是指一张表，里面包含了可能出现的所有字符，每个字符对应一个数字，这个数字称为码点(Code Point)，如字符’H’的码点为72（十进制），字符’李’的码点为26446（十进制）。Unicode表包含了1114112个码点，即从000000（十六进制） - 10FFFF（十六进制）。地球上所有字符都可以在Unicode表中找到对应的唯一码点。点击这里，查询字符对应的码点。Unicode将码空间划分为17个平面，从00 - 10（十六进制，最高两位），即从0 - 16（十进制），每个平面有65536个码点（2^16），其中最重要的是第一个Unicode平面(码位从0000 - FFFF)，包含了最常用的字符，该平面被称为基本多语言平面（Basic Multilingual Plane），缩写为BMP，其他平面称为辅助平面(Supplementary Planes)，在基本多文种平面內， 从D800到DFFF之间的码位区段是永久保留不映射到字符的， 因此UTF-16编码巧妙的利用了这保留下来的码位来对辅助平面内的字符进行编码，这点后面进行讲解。Unicode只是一个符号集，只规定的字符所对应的码点，并没有指定如何存储，如何进行存储出现了不同的编码方案，关于Unicode编码方案主要有两条主线：UCS和UTF。UTF主线由Unicode Consortium进行维护管理，UCS主线由ISO/IEC进行维护管理。</p>\n<h4 id=\"UCS\"><a href=\"#UCS\" class=\"headerlink\" title=\"UCS\"></a>UCS</h4><p>UCS全称为”Universal Character Set”，在UCS中主要有UCS-2和UCS-4。</p>\n<p>　　1. UCS-2</p>\n<p>UCS-2是定长字节的，固定使用2个字节进行编码，从0000（十六进制）- FFFF（十六进制）的码位范围，对应第一个Unicode平面。采用BOM(Byte Order Mark)机制，该机制作用如下：1. 确定字节流采用的是大端序还是小端序。2. 确定字节流的Unicode编码方案。</p>\n<p>　　2. UCS-4</p>\n<p>UCS-4是定长字节的，固定使用4个字节进行编码。也采用了BOM机制。</p>\n<h4 id=\"UTF\"><a href=\"#UTF\" class=\"headerlink\" title=\"UTF\"></a>UTF</h4><p>UTF全称为”Unicode Transformation Format”，在UTF中主要有UTF-8，UTF-16和UTF-32。</p>\n<p>　　1. UTF-8</p>\n<p>UTF-8是一种变长编码方式，使用1-4个字节进行编码。UTF-8完全兼容ASCII，对于ASCII中的字符，UTF-8采用的编码值跟ASCII完全一致。UTF-8是Unicode一种具体的编码实现。UTF-8是在互联网上使用最广的一种Unicode的编码规则，因为这种编码有利于节约网络流量（因为变长编码，而非统一长度编码）。关于Unicode码点如何转化为UTF-8编码，可以参照如下规则：</p>\n<p>　　① 对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</p>\n<p>　　② 对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p>\n<p>总结的编码规则如下：</p>\n<pre><code>               Unicode符号范围　　           | 　　UTF-8编码方式\n　　　         (十六进制) (十进制)　　　　     | 　　（二进制）\n　　----------------------------------------------------------------------------------------------------\n　　  0000 0000-0000 007F (0-127)           | 　　 0xxxxxxx\n　　  0000 0080-0000 07FF (128-2047)        | 　　 110xxxxx 10xxxxxx\n　　  0000 0800-0000 FFFF (2048-65535)      | 　   1110xxxx 10xxxxxx 10xxxxxx\n　　  0001 0000-0010 FFFF (65536-1114111)   | 　　 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n</code></pre><p>　　说明：字符’A’的Unicode码点为65（十进制），根据上表，在第一行范围，则字符’A’的UTF-8编码为01000001，中文字符’李’的Unicode码点为26446（十进制），二进制为01100111 01001110，十六进制为674E。根据上表，在第三行范围，则将’李’二进制代码从低位到高位依次填入x中，不足的填入0。得到UTF-8编码为11100110 10011101 10001110，即E69D8E（十六进制）。</p>\n<p>　　由上述编码规则可知，0000 0000 - 0000 FFFF（第一行到第三行）为Unicode第一个平面（基本多语言平面），而0001 0000 - 10 FFFF（第四行）为Unicode其他平面（辅助平面）。在基本多语言平面对应了绝大多数常用的字符。对于大于65535（十进制）的码点，即在辅助平面上的码点，需要使用4个字节来进行UTF-8编码。</p>\n<p>　　2. UTF-16</p>\n<p>UTF-8是不定长的编码，使用1、2、3、4个字节编码，而UTF-16则只使用2或4个字节编码。UTF-16也是Unicode一种具体的编码实现。关于Unicode如何转化为UTf-16编码规则如下</p>\n<p>　　① 若Unicode码点在第一平面（BPM）中，则使用2个字节进行编码。 </p>\n<p>　　② 若Unicode码点在其他平面（辅助平面），则使用4个字节进行编码。</p>\n<p>关于辅助平面的码点编码更详细解析如下：辅助平面码点被编码为一对16比特（四个字节）长的码元, 称之为代理对(surrogate pair), 第一部分称为高位代理(high surrogate)或前导代理(lead surrogates)，码位范围为：D800-DBFF. 第二部分称为低位代理(low surrogate)或后尾代理(trail surrogates)， 码位范围为：DC00-DFFF。注意，高位代理的码位从D800到DBFF，而低位代理的码位从DC00到DFFF，总共恰好为D800-DFFF，这部分码点在第一平面内是保留的，不映射到任何字符，所以UTF-16编码巧妙的利用了这点来进行码点在辅助平面内的4字节编码。</p>\n<p>说明：字符’A’的Unicode码点为65（十进制），十六进制表示为41，在第一平面。根据规则，UTF-16采用2个字节进行编码。那么问题又来了，知道了采用两个字节编码，并且我们也知道计算机是以字节为单位进行存储，这两个字节应该表示为00 41(十六进制)？或者是41 00（十六进制）呢？这就引出了一个问题，需要用到之前提及的BOM机制来解决。</p>\n<p>表示为00 41意味着采用了大端序（Big endian），而表示为41 00意味着采用了小端序。那么计算机如何知道存储的字符信息采用了大端序还是小端虚呢？这就需要加入一些控制信息，具体是采用大端序，则在文件前加入FE FF，采用小端序，则在文件前加入FF FE。这样，当计算开始读取时发现前两个字节为FE FF，就表示之后的信息采用的是小端序，反之，则是大端序。</p>\n<p>字符 （无法显示，只能截图显示），其Unicode码点为65902（十进制），十六进制为1016E，很显然，已经超出了第一平面（BMP）所能表示的范围。其在辅助平面内，根据规则，UTF-16采用4个字节进行编码。然而其编码不是简单扩展为4个字节（00 01 01 6E），而是采用如下规则进行计算。</p>\n<p>　　① 使用Unicode码位减去100000（十六进制），得到的值扩展20位（因为Unicode最大为10 FF FF（十六进制），减去1 00 00（十六进制）后，得到的结果最大为0FFF FF（十六进制），即为20位，不足20位的，在高位加一个0，扩展至20位即可）。</p>\n<p>　　② 将步骤一得到的20位，按照高十位和低十位进行分割。</p>\n<p>　　③ 将步骤二的高十位扩展至2个字节，再加上D800（十六进制），得到高位代理或前导代理。取值范围是D800 - 0xDBFF。</p>\n<p>　　④ 将步骤二的低十位扩展至2个字节，再加上DC00（十六进制），得到低位代理或后尾代理。取值范围是DC00 - 0xDFFF。</p>\n<p>　　Unicode转UTF-16规则流程图如下：</p>\n<img src=\"/2018/04/23/encoding/utf-16.png\" class=\"utf-16\">\n<p>　　按照这个规则，我们计算字符的UTF-16编码，我们知道其码点为1016E，减去10000得到016E，扩展至0016E，进行分割，得到高十位为00 0000 0000，十六进制为0000，加上D800为D800；得到低十位为01 0110 1110，十六进制为016E，加上DC00为DD6E；综合得到D8 00 DD 6E。即UTF-16编码为D8 00 DD 6E（也可为D8 0 DD 6E）。</p>\n<p>　　而对于UTF-32是使用4个字节表示，也采用BOM机制，可以类比UTF-16，这里不再额外介绍。</p>\n<h3 id=\"字符编码区别\"><a href=\"#字符编码区别\" class=\"headerlink\" title=\"字符编码区别\"></a>字符编码区别</h3><h4 id=\"UCS-2-与-UTF-16区别\"><a href=\"#UCS-2-与-UTF-16区别\" class=\"headerlink\" title=\"UCS-2 与 UTF-16区别\"></a>UCS-2 与 UTF-16区别</h4><p>从上面的分析知道，UCS-2采用的两个字节进行编码。在0000到FFFF的码位范围内，它和UTF-16基本一致，为什么说基本一致，因为在UTF-16中从U+D800到U+DFFF的码位不对应于任何字符，而在使用UCS-2的时代，U+D800到U+DFFF内的值被占用。</p>\n<p>UCS-2只能表示BMP内的码点（只采用2个字节），而UTF-16可以表示辅助平面内的码点（采用4个字节）。</p>\n<p>我们可以抽象的认为UTF-16可看成是UCS-2的父集。在没有辅助平面字符（surrogate code points）前，UTF-16与UCS-2所指的意思基本一致。但当引入辅助平面字符后，想要表示辅助平面字符时，就只能用UTF-16编码了。</p>\n<h4 id=\"UCS-4与-UTF-16的区别\"><a href=\"#UCS-4与-UTF-16的区别\" class=\"headerlink\" title=\"UCS -4与 UTF-16的区别\"></a>UCS -4与 UTF-16的区别</h4><p>在BMP上，UTF-16采用2个字节表示，而在辅助平面上，UTF-16采用的是4个字节表示。对于UCS-4，不管在哪个平面都采用的是四个字节表示。</p>\n<h4 id=\"为什么UTF-8编码不需要BOM机制\"><a href=\"#为什么UTF-8编码不需要BOM机制\" class=\"headerlink\" title=\"为什么UTF-8编码不需要BOM机制\"></a>为什么UTF-8编码不需要BOM机制</h4><p>因为在UTF-8编码中，其自身已经带了控制信息，如1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx，其中1110就起到了控制作用，所以不需要额外的BOM机制。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>如果读者有耐心看到这里，我相信对于字符编码这一块已经就已经没有什么疑问了。写到这里，就完成了主流编码的探索，探索的过程确实是不容易，最后弄清楚了，感觉相当的快乐。</p>\n<p>参考链接：</p>\n<p><a href=\"https://www.cnblogs.com/leesf456/p/5317574.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/leesf456/p/5317574.html</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html#comment-text\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html#comment-text</a></p>\n<p><a href=\"http://www.joelonsoftware.com/articles/Unicode.html\" target=\"_blank\" rel=\"noopener\">http://www.joelonsoftware.com/articles/Unicode.html</a></p>\n<p><a href=\"http://blog.csdn.net/xys_777/article/details/5773763\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/xys_777/article/details/5773763</a></p>\n<p><a href=\"http://www.zhihu.com/question/19817672\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/19817672</a></p>\n<p><a href=\"http://demon.tw/programming/utf-16-ucs-2.html\" target=\"_blank\" rel=\"noopener\">http://demon.tw/programming/utf-16-ucs-2.html</a></p>\n<p><a href=\"http://blog.csdn.net/dslztx/article/details/48830887\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dslztx/article/details/48830887</a></p>\n<p><a href=\"http://blog.csdn.net/dslztx/article/details/48947097\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dslztx/article/details/48947097</a></p>\n<p><a href=\"http://www.zhihu.com/question/22881537\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/22881537</a></p>\n<p><a href=\"http://blog.csdn.net/shangboerds/article/details/7498317\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/shangboerds/article/details/7498317</a></p>\n<p><a href=\"http://blog.csdn.net/shuilan0066/article/details/7865715\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/shuilan0066/article/details/7865715</a></p>\n<p><a href=\"http://www.zhihu.com/question/23374078\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/23374078</a></p>\n<p><a href=\"http://swiftlet.net/archives/category/char-encoding\" target=\"_blank\" rel=\"noopener\">http://swiftlet.net/archives/category/char-encoding</a></p>\n<p><a href=\"http://blog.csdn.net/shuilan0066/article/details/7839189\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/shuilan0066/article/details/7839189</a></p>\n<p><a href=\"http://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/\" target=\"_blank\" rel=\"noopener\">http://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/</a></p>\n<p><a href=\"http://www.freebuf.com/articles/others-articles/25623.html\" target=\"_blank\" rel=\"noopener\">http://www.freebuf.com/articles/others-articles/25623.html</a></p>\n<p><a href=\"http://blog.csdn.net/qinysong/article/details/1179513\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qinysong/article/details/1179513</a></p>\n<p><a href=\"http://unicode-table.com/cn/\" target=\"_blank\" rel=\"noopener\">http://unicode-table.com/cn/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>为什么要进行编码，这些编码的关系如何，如ASCII，IOS-8859-1，GB2312，GBK，Unicode之间的关系，笔者想要彻底理解字符编码背后的故事，遂进行了探索，具体笔记如下。如能读完本篇文章，我相信会解开很多疑惑。</em></p>\n<h3 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h3><h4 id=\"为何需要编码？\"><a href=\"#为何需要编码？\" class=\"headerlink\" title=\"为何需要编码？\"></a>为何需要编码？</h4><p>我们知道，所有的信息最终都表示为一个二进制的字符串，每一个二进制位（bit）有0和1两种状态。当我们需要把字符’A’存入计算机时，应该对应哪种状态呢，存储时，我们可以将字符’A’用01000010（这个随便编的）二进制字符串表示，存入计算机；读取时，再将01000010还原成字符’A’。那么问题来了，存储时，字符’A’应该对应哪一串二进制数呢，是01000010？或者是10000000 11110101？说白了，就是需要一个规则。这个规则可以将字符映射到唯一一种状态(二进制字符串)，这就是编码。而最早出现的编码规则就是ASCII编码，在ASCII编码规则中，字符’A’既不对应01000010，也不对应1000 0000 11110101，而是对应01000001（不要问为什么，这是规则）。</p>\n<h4 id=\"ASCII\"><a href=\"#ASCII\" class=\"headerlink\" title=\"ASCII\"></a>ASCII</h4><p>这套编码规则是由美国定制，一共规定了128个字符的编码，比如空格”SPACE”是32（十进制）（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括 32个不能打印出来的控制符号），只占用了一个字节（8 bit）的后面7位，最前面的1位统一规定为0。总共才有128个字符编码，一个字节都没有用完，这好像似乎有点太少了。于是乎，就开始压榨最高位，对其为1时也进行编码，利用最高位进行编码的方式就称为非ASCII编码，如ISO-8859-1编码。</p>\n<h4 id=\"ISO-8859-1\"><a href=\"#ISO-8859-1\" class=\"headerlink\" title=\"ISO-8859-1\"></a>ISO-8859-1</h4><p>这套编码规则由ISO组织制定。是在 ASCII 码基础上又制定了一些标准用来扩展ASCII编码，即 00000000（0） ~ 01111111（127） 与ASCII的编码一样，对 10000000（128） ~ 11111111（255）这一段进行了编码，如将字符§编码成 10100111（167）。ISO-8859-1编码也是单字节编码，最多能够表示256个字符。Latin1是ISO-8859-1的别名，有些环境下写作Latin-1。但是，即使能够表示256个字符，对中文而言，还是太少了，一个字节肯定不够，必须用多个字节表示。但是，由于是单字节编码，和计算机最基础的表示单位一致，所以很多时候，仍旧使用 ISO8859-1编码来表示。而且在很多协议上，默认使用该编码。比如，虽然”中文”两个字不存在ISO8859-1编码，以GB2312编码为例，应该是D6D0 CEC4两个字符，使用ISO8859-1编码的时候则将它拆开为4个字节来表示：D6D0 CEC4（事实上，在进行存储的时候，也是以字节为单位进行处理）。而如果是UTF编码，则是6个字节e4 b8 ad e6 96 87。很明显，这种表示方法还需要以另一种编码为基础才能正确显示。而常见的中文编码方式有GB2312、BIG5、GBK。</p>\n<h4 id=\"GB2312\"><a href=\"#GB2312\" class=\"headerlink\" title=\"GB2312\"></a>GB2312</h4><p>GB2312其对所收录字符进行了”分区”处理，共94个区，区从1（十进制）开始，一直到94（十进制），每区含有94个位，位从1（十进制）开始，一直到94（十进制），共8836（94 * 94）个码位，这种表示方式也称为区位码，GB2312是双字节编码，其中高字节表示区，低字节表示位。各区具体说明如下：</p>\n<ul>\n<li>01-09区收录除汉字外的682个字符，有164个空位（9 * 94 - 682）。</li>\n<li>10-15区为空白区，没有使用。</li>\n<li>16-55区收录3755个一级汉字（简体），按拼音排序。</li>\n<li>56-87区收录3008个二级汉字（简体），按部首/笔画排序。</li>\n<li>88-94区为空白区，没有使用。</li>\n</ul>\n<p>那么根据区位码如何算出GBK2312编码呢？区位码的表示范围为0101 - 9494（包含了空的区位码）。<a href=\"http://www.qqxiuzi.cn/zh/hanzi-gb2312-bianma.php\" target=\"_blank\" rel=\"noopener\">点击这里</a>，查看中GB2312编码区位码。之后只需要按照如下规则进行转化即可。</p>\n<p>　　1. 将区（十进制）转化为十六进制。</p>\n<p>　　2. 将转化的十六进制加上A0，得到GB2312编码的高字节。</p>\n<p>　　3. 将位（十进制）转化为十六进制。</p>\n<p>　　4. 将转化的十六进制加上A0，得到GB2312编码的低字节。</p>\n<p>　　5. 组合区和位，区在高字节，位在低字节。</p>\n<p>　　6. 得到GB2312编码。</p>\n<p>具体的流程图如下：<br><img src=\"/2018/04/23/encoding/gb2312-traslation.png\" class=\"gb2312\"></p>\n<p><em>例如：’李’字的区位码为3278（表示在32区，78位）。1. 将32（区）转化为十六进制为20。2. 加上A0为C0。3. 将78（位）转化为十六进制为4E。4. 加上A0为EE。5. 组合区和位，为C0EE。6. 得到GB2312编码，即’李’字的GB2312编码为C0EE。</em></p>\n<p>GB2312用两个字节编码，采用分区编码，总共编码的中文个数为6763（3755 + 3008）。这些汉字只是最常用的汉字，已经覆盖中国大陆99.75%的使用频率。但是，还有一些汉字在GB2312中没有被编码，如’镕’字，在GB2312中就没有被编码，这样就导致了问题，随之就出现了主流的GBK编码。在讲解GBK编码之前，我们另外讲解一下BIG5编码。</p>\n<h4 id=\"BIG5\"><a href=\"#BIG5\" class=\"headerlink\" title=\"BIG5\"></a>BIG5</h4><p>BIG5采用双字节编码，使用两个字节来表示一个字符。高位字节使用了0x81-0xFE，低位字节使用了0x40-0x7E，及0xA1-0xFE。该编码是繁体中文字符集编码标准，共收录13060个中文字，其中有二字为重复编码，即“兀、兀”（A461及C94A)和“嗀、嗀”(DCD1及DDFC)。具体的分区如下：　　</p>\n<pre><code>8140-A0FE 保留给使用者自定义字符（造字区）\nA140-A3BF 标点符号、希腊字母及特殊符号。其中在A259-A261，收录了度量衡单位用字：兙兛兞兝兡兣嗧瓩糎。\nA3C0-A3FE 保留。此区没有开放作造字区用。\nA440-C67E 常用汉字，先按笔划再按部首排序。\nC6A1-F9DC 其它汉字。\nF9DD-F9FE 制表符。\n</code></pre><p>　　<a href=\"http://www.qqxiuzi.cn/zh/hanzi-big5-bianma.php\" target=\"_blank\" rel=\"noopener\">点击这里</a>，查看BIG5编码。注意，BIG5编码与GBK编码没有什么关系。</p>\n<h4 id=\"GBK\"><a href=\"#GBK\" class=\"headerlink\" title=\"GBK\"></a>GBK</h4><p>GBK编码扩展了GB2312，完全兼容GB2312编码（如’李’字的GBK、GB2312编码均为C0EE），但其不兼容BIG5编码（’長’字的BIG5编码为AAF8，GBK编码为E94C，’李’字的BIG5编码为A7F5 不等于C0EE），即如果使用GB2312编码，使用GBK解码是完全正常的，但是如果使用BIG5编码，使用GBK解码，会出现乱码。相比于GB2312编码，GBK编码了更多汉字，如’镕’字。GBK编码依然采用双字节编码方案，其编码范围：8140－FEFE，剔除xx7F码位，共23940个码位。能表示 21003 个汉字。<a href=\"http://www.qqxiuzi.cn/zh/hanzi-gbk-bianma.php\" target=\"_blank\" rel=\"noopener\">点击这里</a>，查看GBK编码。<a href=\"http://www.qqxiuzi.cn/bianma/zifuji.php\" target=\"_blank\" rel=\"noopener\">点击这里</a>，可以查询中文的其他编码。在GBK之后又出现了GB18030编码，但是没有形成主流，故不做介绍，至此，中文编码的问题已经讲解完成。那么问题又来了，大陆网民与在海峡两岸网民交流时，若都使用GBK编码，则没有问题，若一方使用GBK编码，一方使用BIG5编码，那么就会出现乱码问题，这是在海峡两岸网民交流，如果漂洋过海进行交流呢？那就更容易出现乱码问题，这时候我们可能想，要是有一套全世界都通用的编码就好了，不要担心，这样的编码确实是存在的，那就是Unicode。</p>\n<h4 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h4><p>有两个独立的, 创立单一字符集的尝试. 一个是国际标准化组织(ISO)的 ISO 10646 项目, 另一个是由多语言软件制造商组成的协会组织的 Unicode 项目. 在1991年前后, 两个项目的参与者都认识到, 世界不需要两个不同的单一字符集. 它们合并双方的工作成果, 并为创立一个单一编码表而协同工作. 两个项目仍都存在并独立地公布各自的标准, 但 Unicode 协会和 ISO/IEC JTC1/SC2 都同意保持 Unicode 和 ISO 10646 标准的码表兼容, 并紧密地共同调整任何未来的扩展。</p>\n<p>Unicode是指一张表，里面包含了可能出现的所有字符，每个字符对应一个数字，这个数字称为码点(Code Point)，如字符’H’的码点为72（十进制），字符’李’的码点为26446（十进制）。Unicode表包含了1114112个码点，即从000000（十六进制） - 10FFFF（十六进制）。地球上所有字符都可以在Unicode表中找到对应的唯一码点。点击这里，查询字符对应的码点。Unicode将码空间划分为17个平面，从00 - 10（十六进制，最高两位），即从0 - 16（十进制），每个平面有65536个码点（2^16），其中最重要的是第一个Unicode平面(码位从0000 - FFFF)，包含了最常用的字符，该平面被称为基本多语言平面（Basic Multilingual Plane），缩写为BMP，其他平面称为辅助平面(Supplementary Planes)，在基本多文种平面內， 从D800到DFFF之间的码位区段是永久保留不映射到字符的， 因此UTF-16编码巧妙的利用了这保留下来的码位来对辅助平面内的字符进行编码，这点后面进行讲解。Unicode只是一个符号集，只规定的字符所对应的码点，并没有指定如何存储，如何进行存储出现了不同的编码方案，关于Unicode编码方案主要有两条主线：UCS和UTF。UTF主线由Unicode Consortium进行维护管理，UCS主线由ISO/IEC进行维护管理。</p>\n<h4 id=\"UCS\"><a href=\"#UCS\" class=\"headerlink\" title=\"UCS\"></a>UCS</h4><p>UCS全称为”Universal Character Set”，在UCS中主要有UCS-2和UCS-4。</p>\n<p>　　1. UCS-2</p>\n<p>UCS-2是定长字节的，固定使用2个字节进行编码，从0000（十六进制）- FFFF（十六进制）的码位范围，对应第一个Unicode平面。采用BOM(Byte Order Mark)机制，该机制作用如下：1. 确定字节流采用的是大端序还是小端序。2. 确定字节流的Unicode编码方案。</p>\n<p>　　2. UCS-4</p>\n<p>UCS-4是定长字节的，固定使用4个字节进行编码。也采用了BOM机制。</p>\n<h4 id=\"UTF\"><a href=\"#UTF\" class=\"headerlink\" title=\"UTF\"></a>UTF</h4><p>UTF全称为”Unicode Transformation Format”，在UTF中主要有UTF-8，UTF-16和UTF-32。</p>\n<p>　　1. UTF-8</p>\n<p>UTF-8是一种变长编码方式，使用1-4个字节进行编码。UTF-8完全兼容ASCII，对于ASCII中的字符，UTF-8采用的编码值跟ASCII完全一致。UTF-8是Unicode一种具体的编码实现。UTF-8是在互联网上使用最广的一种Unicode的编码规则，因为这种编码有利于节约网络流量（因为变长编码，而非统一长度编码）。关于Unicode码点如何转化为UTF-8编码，可以参照如下规则：</p>\n<p>　　① 对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</p>\n<p>　　② 对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p>\n<p>总结的编码规则如下：</p>\n<pre><code>               Unicode符号范围　　           | 　　UTF-8编码方式\n　　　         (十六进制) (十进制)　　　　     | 　　（二进制）\n　　----------------------------------------------------------------------------------------------------\n　　  0000 0000-0000 007F (0-127)           | 　　 0xxxxxxx\n　　  0000 0080-0000 07FF (128-2047)        | 　　 110xxxxx 10xxxxxx\n　　  0000 0800-0000 FFFF (2048-65535)      | 　   1110xxxx 10xxxxxx 10xxxxxx\n　　  0001 0000-0010 FFFF (65536-1114111)   | 　　 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n</code></pre><p>　　说明：字符’A’的Unicode码点为65（十进制），根据上表，在第一行范围，则字符’A’的UTF-8编码为01000001，中文字符’李’的Unicode码点为26446（十进制），二进制为01100111 01001110，十六进制为674E。根据上表，在第三行范围，则将’李’二进制代码从低位到高位依次填入x中，不足的填入0。得到UTF-8编码为11100110 10011101 10001110，即E69D8E（十六进制）。</p>\n<p>　　由上述编码规则可知，0000 0000 - 0000 FFFF（第一行到第三行）为Unicode第一个平面（基本多语言平面），而0001 0000 - 10 FFFF（第四行）为Unicode其他平面（辅助平面）。在基本多语言平面对应了绝大多数常用的字符。对于大于65535（十进制）的码点，即在辅助平面上的码点，需要使用4个字节来进行UTF-8编码。</p>\n<p>　　2. UTF-16</p>\n<p>UTF-8是不定长的编码，使用1、2、3、4个字节编码，而UTF-16则只使用2或4个字节编码。UTF-16也是Unicode一种具体的编码实现。关于Unicode如何转化为UTf-16编码规则如下</p>\n<p>　　① 若Unicode码点在第一平面（BPM）中，则使用2个字节进行编码。 </p>\n<p>　　② 若Unicode码点在其他平面（辅助平面），则使用4个字节进行编码。</p>\n<p>关于辅助平面的码点编码更详细解析如下：辅助平面码点被编码为一对16比特（四个字节）长的码元, 称之为代理对(surrogate pair), 第一部分称为高位代理(high surrogate)或前导代理(lead surrogates)，码位范围为：D800-DBFF. 第二部分称为低位代理(low surrogate)或后尾代理(trail surrogates)， 码位范围为：DC00-DFFF。注意，高位代理的码位从D800到DBFF，而低位代理的码位从DC00到DFFF，总共恰好为D800-DFFF，这部分码点在第一平面内是保留的，不映射到任何字符，所以UTF-16编码巧妙的利用了这点来进行码点在辅助平面内的4字节编码。</p>\n<p>说明：字符’A’的Unicode码点为65（十进制），十六进制表示为41，在第一平面。根据规则，UTF-16采用2个字节进行编码。那么问题又来了，知道了采用两个字节编码，并且我们也知道计算机是以字节为单位进行存储，这两个字节应该表示为00 41(十六进制)？或者是41 00（十六进制）呢？这就引出了一个问题，需要用到之前提及的BOM机制来解决。</p>\n<p>表示为00 41意味着采用了大端序（Big endian），而表示为41 00意味着采用了小端序。那么计算机如何知道存储的字符信息采用了大端序还是小端虚呢？这就需要加入一些控制信息，具体是采用大端序，则在文件前加入FE FF，采用小端序，则在文件前加入FF FE。这样，当计算开始读取时发现前两个字节为FE FF，就表示之后的信息采用的是小端序，反之，则是大端序。</p>\n<p>字符 （无法显示，只能截图显示），其Unicode码点为65902（十进制），十六进制为1016E，很显然，已经超出了第一平面（BMP）所能表示的范围。其在辅助平面内，根据规则，UTF-16采用4个字节进行编码。然而其编码不是简单扩展为4个字节（00 01 01 6E），而是采用如下规则进行计算。</p>\n<p>　　① 使用Unicode码位减去100000（十六进制），得到的值扩展20位（因为Unicode最大为10 FF FF（十六进制），减去1 00 00（十六进制）后，得到的结果最大为0FFF FF（十六进制），即为20位，不足20位的，在高位加一个0，扩展至20位即可）。</p>\n<p>　　② 将步骤一得到的20位，按照高十位和低十位进行分割。</p>\n<p>　　③ 将步骤二的高十位扩展至2个字节，再加上D800（十六进制），得到高位代理或前导代理。取值范围是D800 - 0xDBFF。</p>\n<p>　　④ 将步骤二的低十位扩展至2个字节，再加上DC00（十六进制），得到低位代理或后尾代理。取值范围是DC00 - 0xDFFF。</p>\n<p>　　Unicode转UTF-16规则流程图如下：</p>\n<img src=\"/2018/04/23/encoding/utf-16.png\" class=\"utf-16\">\n<p>　　按照这个规则，我们计算字符的UTF-16编码，我们知道其码点为1016E，减去10000得到016E，扩展至0016E，进行分割，得到高十位为00 0000 0000，十六进制为0000，加上D800为D800；得到低十位为01 0110 1110，十六进制为016E，加上DC00为DD6E；综合得到D8 00 DD 6E。即UTF-16编码为D8 00 DD 6E（也可为D8 0 DD 6E）。</p>\n<p>　　而对于UTF-32是使用4个字节表示，也采用BOM机制，可以类比UTF-16，这里不再额外介绍。</p>\n<h3 id=\"字符编码区别\"><a href=\"#字符编码区别\" class=\"headerlink\" title=\"字符编码区别\"></a>字符编码区别</h3><h4 id=\"UCS-2-与-UTF-16区别\"><a href=\"#UCS-2-与-UTF-16区别\" class=\"headerlink\" title=\"UCS-2 与 UTF-16区别\"></a>UCS-2 与 UTF-16区别</h4><p>从上面的分析知道，UCS-2采用的两个字节进行编码。在0000到FFFF的码位范围内，它和UTF-16基本一致，为什么说基本一致，因为在UTF-16中从U+D800到U+DFFF的码位不对应于任何字符，而在使用UCS-2的时代，U+D800到U+DFFF内的值被占用。</p>\n<p>UCS-2只能表示BMP内的码点（只采用2个字节），而UTF-16可以表示辅助平面内的码点（采用4个字节）。</p>\n<p>我们可以抽象的认为UTF-16可看成是UCS-2的父集。在没有辅助平面字符（surrogate code points）前，UTF-16与UCS-2所指的意思基本一致。但当引入辅助平面字符后，想要表示辅助平面字符时，就只能用UTF-16编码了。</p>\n<h4 id=\"UCS-4与-UTF-16的区别\"><a href=\"#UCS-4与-UTF-16的区别\" class=\"headerlink\" title=\"UCS -4与 UTF-16的区别\"></a>UCS -4与 UTF-16的区别</h4><p>在BMP上，UTF-16采用2个字节表示，而在辅助平面上，UTF-16采用的是4个字节表示。对于UCS-4，不管在哪个平面都采用的是四个字节表示。</p>\n<h4 id=\"为什么UTF-8编码不需要BOM机制\"><a href=\"#为什么UTF-8编码不需要BOM机制\" class=\"headerlink\" title=\"为什么UTF-8编码不需要BOM机制\"></a>为什么UTF-8编码不需要BOM机制</h4><p>因为在UTF-8编码中，其自身已经带了控制信息，如1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx，其中1110就起到了控制作用，所以不需要额外的BOM机制。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>如果读者有耐心看到这里，我相信对于字符编码这一块已经就已经没有什么疑问了。写到这里，就完成了主流编码的探索，探索的过程确实是不容易，最后弄清楚了，感觉相当的快乐。</p>\n<p>参考链接：</p>\n<p><a href=\"https://www.cnblogs.com/leesf456/p/5317574.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/leesf456/p/5317574.html</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html#comment-text\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html#comment-text</a></p>\n<p><a href=\"http://www.joelonsoftware.com/articles/Unicode.html\" target=\"_blank\" rel=\"noopener\">http://www.joelonsoftware.com/articles/Unicode.html</a></p>\n<p><a href=\"http://blog.csdn.net/xys_777/article/details/5773763\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/xys_777/article/details/5773763</a></p>\n<p><a href=\"http://www.zhihu.com/question/19817672\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/19817672</a></p>\n<p><a href=\"http://demon.tw/programming/utf-16-ucs-2.html\" target=\"_blank\" rel=\"noopener\">http://demon.tw/programming/utf-16-ucs-2.html</a></p>\n<p><a href=\"http://blog.csdn.net/dslztx/article/details/48830887\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dslztx/article/details/48830887</a></p>\n<p><a href=\"http://blog.csdn.net/dslztx/article/details/48947097\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dslztx/article/details/48947097</a></p>\n<p><a href=\"http://www.zhihu.com/question/22881537\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/22881537</a></p>\n<p><a href=\"http://blog.csdn.net/shangboerds/article/details/7498317\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/shangboerds/article/details/7498317</a></p>\n<p><a href=\"http://blog.csdn.net/shuilan0066/article/details/7865715\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/shuilan0066/article/details/7865715</a></p>\n<p><a href=\"http://www.zhihu.com/question/23374078\" target=\"_blank\" rel=\"noopener\">http://www.zhihu.com/question/23374078</a></p>\n<p><a href=\"http://swiftlet.net/archives/category/char-encoding\" target=\"_blank\" rel=\"noopener\">http://swiftlet.net/archives/category/char-encoding</a></p>\n<p><a href=\"http://blog.csdn.net/shuilan0066/article/details/7839189\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/shuilan0066/article/details/7839189</a></p>\n<p><a href=\"http://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/\" target=\"_blank\" rel=\"noopener\">http://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/</a></p>\n<p><a href=\"http://www.freebuf.com/articles/others-articles/25623.html\" target=\"_blank\" rel=\"noopener\">http://www.freebuf.com/articles/others-articles/25623.html</a></p>\n<p><a href=\"http://blog.csdn.net/qinysong/article/details/1179513\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/qinysong/article/details/1179513</a></p>\n<p><a href=\"http://unicode-table.com/cn/\" target=\"_blank\" rel=\"noopener\">http://unicode-table.com/cn/</a></p>\n"},{"title":"post picture","date":"2018-03-27T06:23:10.000Z","_content":"Totoro\n{% img Totoro /2018/03/27/post-picture/download.jpg %}\n{% asset_img slug \"seems a dream\" %}\n\n{% raw %}\ncontent\n{% endraw %}\n","source":"_posts/post-picture.md","raw":"---\ntitle: post picture\ndate: 2018-03-27 14:23:10\ntags:\n\t- film\ncategory:\n\t- film\n---\nTotoro\n{% img Totoro /2018/03/27/post-picture/download.jpg %}\n{% asset_img slug \"seems a dream\" %}\n\n{% raw %}\ncontent\n{% endraw %}\n","slug":"post-picture","published":1,"updated":"2018-04-05T10:36:04.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwontr000swgl1cipy69n4","content":"<p>Totoro<br><img src=\"/2018/03/27/post-picture/download.jpg\" class=\"Totoro\"><br></p>\n\ncontent\n\n","site":{"data":{}},"excerpt":"","more":"<p>Totoro<br><img src=\"/2018/03/27/post-picture/download.jpg\" class=\"Totoro\"><br></p>\n\ncontent\n\n"},{"title":"Tech Blog最佳实践","date":"2018-03-30T04:49:52.000Z","_content":"\n*本文主要说明构建个人博客需要的所有工具和条件，以及每一个组件在构建blog的说明和作用，并不是完整的操作手册。在搭建博客前通过阅读本文，完整的明白各个组件承担的响应的角色，当遇到问题时可以清楚地确定问题可能发生的原因。推荐完整看完本文后再进入各个组件深入学习。本文阅读时间1小时。*\n\n### Tools \n\tGit + Github Pages + Node.js + Hexo + NexT Theme\n\n### knowledge Base\t\n* __Git__ -- 熟悉Git的工作原理和怎样使用Git。 推荐时间：2天\n* __Github__ -- 练习注册一个 账号[github](https://www.github.com) , 创建并练习使用repository，搭建Github pages。推荐时间： 1天\n* __Hexo__ -- 安装Hexo, 设置基本的Hexo配置练习。推荐时间： 1天\n* __NexT Theme__ --从Hexo 默认Theme切换到NexT后，练习自定义主题主要的元素。推荐时间： 0.5天\n* __Markdown__ -- 学会使用Markdown的语法编辑文档，通过Markdown编辑器练习使用各种标签。推荐时间：0.5天\n\n### Git\nGit是目前世界上最先进的分布式版本控制系统（没有之一）。那什么是版本控制系统？ \n \n在编辑文档时，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？  \n\n这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪，这个软件就是Git。\n\n还不明白，可以进入廖雪峰老师的文档继续深入学习：[Git introduction](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)  \n\nGit下载地址：[Git Download](https://git-scm.com/download)\n\n### Node.js\nNode.js并不需要我们了解怎样使用它。我们只需要知道下面的Hexo能够正常工作需要依赖Node.js。所以只需要知道如何安装：\n\n下载并安装nvm.（什么是nvm？不需要知道，只需要知道他可以方便安装node.js）\n\n* Download nvm \n  \n\t\t$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh\t\n\n* install nvm\n\n\t\t$ cd .nvm/\n\t\t$ ./install.sh\n* set bash profile\n\n\t\t$ export NVM_DIR=\"$HOME/.nvm\"\n\t\t$ [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\n* install Node.js\n\n\t\t$ nvm install stable\n\n### GitHub Page\nGithub做为Git的云端版本库，可以放任何人随时随地边编辑和发布文档，而且完全开源免费。Github Page作为Github的一个功能，**只需要将站点文件上传到Github上，你可以拥有自己的免费Blog平台，不需要托管主机，不需要域名**。\n\naccount: _yourusername_  \n通过ssh方式连接Github：  \n\n\tgit@github.com:_yourusername_/\n通过http方式连接Github：  \n \n\thttps://github.com/_yourusername_/  \n\n\t$ git config --global user.name \"Your Name\"  \n\t$ git config --global user.email \"email@example.com\"\n\n### Hexo\n[Hexo](https://hexo.io/zh-cn/docs/)  是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。什么意思呢？\n\n我们知道静网页文件都是_.html_文件，需要很多标签对格式进行控制。如果我们有Hexo后，我们可以将可读性很高的文本档使用Markdown的语法通过Hexo转换成_.html_文件，并且生成完整的完整框架。我们只需要编辑文本文件，通hexo生成网站的框架和内容，并且部署生成自己的网站。\n\n* Install hexo\n\n\t\t$npm install hexo-cli -g\n* set up hexo  \n \n\t\t$hexo init blog\n\t\t$cd blog\n\t\t$npm install\n\t\t$hexo server\n\n### NexT\n如果说Hexo为一个人的躯体，那么NexT就是这个躯体的衣服，让Hexo变得更美，这就是NexT。\n\n在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n\n为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。\n\n安装 NexT  \nHexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。  \n  \n下载主题  \n\n\t$ cd your-hexo-site\n\t$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n\n启用主题  \n\n\t#编辑系统配置文件_config.yml,找到Theme设置并将值改成next\n\ttheme: next\n验证主题  \n\t\n\t$hexo s --debug  \n\tINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n\n### Markdown\nMarkdown 是一个 Web 上使用的文本到HTML的转换工具，可以通过简单、易读易写的文本格式生成结构化的HTML文档。目前 github、Stackoverflow 等网站均支持这种格式.  \n[Markdown](http://www.markdown.cn/#acknowledgement)\t\n\nENDING  \n \n1. <http://zhaoweihao.me/2017/04/29/Hexo-Github-pages-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/>\n\n2. <https://www.cnblogs.com/fengxiongZz/p/7707219.html>\n\n","source":"_posts/tech-blog.md","raw":"---\ntitle: Tech Blog最佳实践\ndate: 2018-03-30 12:49:52\ntags:\n- blog\n- git\n- hexo\n- github\ncategories:\n- blog\n---\n\n*本文主要说明构建个人博客需要的所有工具和条件，以及每一个组件在构建blog的说明和作用，并不是完整的操作手册。在搭建博客前通过阅读本文，完整的明白各个组件承担的响应的角色，当遇到问题时可以清楚地确定问题可能发生的原因。推荐完整看完本文后再进入各个组件深入学习。本文阅读时间1小时。*\n\n### Tools \n\tGit + Github Pages + Node.js + Hexo + NexT Theme\n\n### knowledge Base\t\n* __Git__ -- 熟悉Git的工作原理和怎样使用Git。 推荐时间：2天\n* __Github__ -- 练习注册一个 账号[github](https://www.github.com) , 创建并练习使用repository，搭建Github pages。推荐时间： 1天\n* __Hexo__ -- 安装Hexo, 设置基本的Hexo配置练习。推荐时间： 1天\n* __NexT Theme__ --从Hexo 默认Theme切换到NexT后，练习自定义主题主要的元素。推荐时间： 0.5天\n* __Markdown__ -- 学会使用Markdown的语法编辑文档，通过Markdown编辑器练习使用各种标签。推荐时间：0.5天\n\n### Git\nGit是目前世界上最先进的分布式版本控制系统（没有之一）。那什么是版本控制系统？ \n \n在编辑文档时，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？  \n\n这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪，这个软件就是Git。\n\n还不明白，可以进入廖雪峰老师的文档继续深入学习：[Git introduction](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)  \n\nGit下载地址：[Git Download](https://git-scm.com/download)\n\n### Node.js\nNode.js并不需要我们了解怎样使用它。我们只需要知道下面的Hexo能够正常工作需要依赖Node.js。所以只需要知道如何安装：\n\n下载并安装nvm.（什么是nvm？不需要知道，只需要知道他可以方便安装node.js）\n\n* Download nvm \n  \n\t\t$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh\t\n\n* install nvm\n\n\t\t$ cd .nvm/\n\t\t$ ./install.sh\n* set bash profile\n\n\t\t$ export NVM_DIR=\"$HOME/.nvm\"\n\t\t$ [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\n* install Node.js\n\n\t\t$ nvm install stable\n\n### GitHub Page\nGithub做为Git的云端版本库，可以放任何人随时随地边编辑和发布文档，而且完全开源免费。Github Page作为Github的一个功能，**只需要将站点文件上传到Github上，你可以拥有自己的免费Blog平台，不需要托管主机，不需要域名**。\n\naccount: _yourusername_  \n通过ssh方式连接Github：  \n\n\tgit@github.com:_yourusername_/\n通过http方式连接Github：  \n \n\thttps://github.com/_yourusername_/  \n\n\t$ git config --global user.name \"Your Name\"  \n\t$ git config --global user.email \"email@example.com\"\n\n### Hexo\n[Hexo](https://hexo.io/zh-cn/docs/)  是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。什么意思呢？\n\n我们知道静网页文件都是_.html_文件，需要很多标签对格式进行控制。如果我们有Hexo后，我们可以将可读性很高的文本档使用Markdown的语法通过Hexo转换成_.html_文件，并且生成完整的完整框架。我们只需要编辑文本文件，通hexo生成网站的框架和内容，并且部署生成自己的网站。\n\n* Install hexo\n\n\t\t$npm install hexo-cli -g\n* set up hexo  \n \n\t\t$hexo init blog\n\t\t$cd blog\n\t\t$npm install\n\t\t$hexo server\n\n### NexT\n如果说Hexo为一个人的躯体，那么NexT就是这个躯体的衣服，让Hexo变得更美，这就是NexT。\n\n在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n\n为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。\n\n安装 NexT  \nHexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。  \n  \n下载主题  \n\n\t$ cd your-hexo-site\n\t$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n\n启用主题  \n\n\t#编辑系统配置文件_config.yml,找到Theme设置并将值改成next\n\ttheme: next\n验证主题  \n\t\n\t$hexo s --debug  \n\tINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n\n### Markdown\nMarkdown 是一个 Web 上使用的文本到HTML的转换工具，可以通过简单、易读易写的文本格式生成结构化的HTML文档。目前 github、Stackoverflow 等网站均支持这种格式.  \n[Markdown](http://www.markdown.cn/#acknowledgement)\t\n\nENDING  \n \n1. <http://zhaoweihao.me/2017/04/29/Hexo-Github-pages-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/>\n\n2. <https://www.cnblogs.com/fengxiongZz/p/7707219.html>\n\n","slug":"tech-blog","published":1,"updated":"2018-04-05T10:36:04.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwontu000uwgl1awxrqmiy","content":"<p><em>本文主要说明构建个人博客需要的所有工具和条件，以及每一个组件在构建blog的说明和作用，并不是完整的操作手册。在搭建博客前通过阅读本文，完整的明白各个组件承担的响应的角色，当遇到问题时可以清楚地确定问题可能发生的原因。推荐完整看完本文后再进入各个组件深入学习。本文阅读时间1小时。</em></p>\n<h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><pre><code>Git + Github Pages + Node.js + Hexo + NexT Theme\n</code></pre><h3 id=\"knowledge-Base\"><a href=\"#knowledge-Base\" class=\"headerlink\" title=\"knowledge Base\"></a>knowledge Base</h3><ul>\n<li><strong>Git</strong> – 熟悉Git的工作原理和怎样使用Git。 推荐时间：2天</li>\n<li><strong>Github</strong> – 练习注册一个 账号<a href=\"https://www.github.com\" target=\"_blank\" rel=\"noopener\">github</a> , 创建并练习使用repository，搭建Github pages。推荐时间： 1天</li>\n<li><strong>Hexo</strong> – 安装Hexo, 设置基本的Hexo配置练习。推荐时间： 1天</li>\n<li><strong>NexT Theme</strong> –从Hexo 默认Theme切换到NexT后，练习自定义主题主要的元素。推荐时间： 0.5天</li>\n<li><strong>Markdown</strong> – 学会使用Markdown的语法编辑文档，通过Markdown编辑器练习使用各种标签。推荐时间：0.5天</li>\n</ul>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>Git是目前世界上最先进的分布式版本控制系统（没有之一）。那什么是版本控制系统？ </p>\n<p>在编辑文档时，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？  </p>\n<p>这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪，这个软件就是Git。</p>\n<p>还不明白，可以进入廖雪峰老师的文档继续深入学习：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/\" target=\"_blank\" rel=\"noopener\">Git introduction</a>  </p>\n<p>Git下载地址：<a href=\"https://git-scm.com/download\" target=\"_blank\" rel=\"noopener\">Git Download</a></p>\n<h3 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h3><p>Node.js并不需要我们了解怎样使用它。我们只需要知道下面的Hexo能够正常工作需要依赖Node.js。所以只需要知道如何安装：</p>\n<p>下载并安装nvm.（什么是nvm？不需要知道，只需要知道他可以方便安装node.js）</p>\n<ul>\n<li><p>Download nvm </p>\n<pre><code>  $ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh    \n</code></pre></li>\n<li><p>install nvm</p>\n<pre><code>  $ cd .nvm/\n  $ ./install.sh\n</code></pre></li>\n<li><p>set bash profile</p>\n<pre><code>  $ export NVM_DIR=&quot;$HOME/.nvm&quot;\n  $ [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;\n</code></pre></li>\n<li><p>install Node.js</p>\n<pre><code>  $ nvm install stable\n</code></pre></li>\n</ul>\n<h3 id=\"GitHub-Page\"><a href=\"#GitHub-Page\" class=\"headerlink\" title=\"GitHub Page\"></a>GitHub Page</h3><p>Github做为Git的云端版本库，可以放任何人随时随地边编辑和发布文档，而且完全开源免费。Github Page作为Github的一个功能，<strong>只需要将站点文件上传到Github上，你可以拥有自己的免费Blog平台，不需要托管主机，不需要域名</strong>。</p>\n<p>account: <em>yourusername</em><br>通过ssh方式连接Github：  </p>\n<pre><code>git@github.com:_yourusername_/\n</code></pre><p>通过http方式连接Github：  </p>\n<pre><code>https://github.com/_yourusername_/  \n\n$ git config --global user.name &quot;Your Name&quot;  \n$ git config --global user.email &quot;email@example.com&quot;\n</code></pre><h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo</a>  是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。什么意思呢？</p>\n<p>我们知道静网页文件都是<em>.html</em>文件，需要很多标签对格式进行控制。如果我们有Hexo后，我们可以将可读性很高的文本档使用Markdown的语法通过Hexo转换成<em>.html</em>文件，并且生成完整的完整框架。我们只需要编辑文本文件，通hexo生成网站的框架和内容，并且部署生成自己的网站。</p>\n<ul>\n<li><p>Install hexo</p>\n<pre><code>  $npm install hexo-cli -g\n</code></pre></li>\n<li><p>set up hexo  </p>\n<pre><code>  $hexo init blog\n  $cd blog\n  $npm install\n  $hexo server\n</code></pre></li>\n</ul>\n<h3 id=\"NexT\"><a href=\"#NexT\" class=\"headerlink\" title=\"NexT\"></a>NexT</h3><p>如果说Hexo为一个人的躯体，那么NexT就是这个躯体的衣服，让Hexo变得更美，这就是NexT。</p>\n<p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>\n<p>为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。</p>\n<p>安装 NexT<br>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。  </p>\n<p>下载主题  </p>\n<pre><code>$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n</code></pre><p>启用主题  </p>\n<pre><code>#编辑系统配置文件_config.yml,找到Theme设置并将值改成next\ntheme: next\n</code></pre><p>验证主题  </p>\n<pre><code>$hexo s --debug  \nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n</code></pre><h3 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h3><p>Markdown 是一个 Web 上使用的文本到HTML的转换工具，可以通过简单、易读易写的文本格式生成结构化的HTML文档。目前 github、Stackoverflow 等网站均支持这种格式.<br><a href=\"http://www.markdown.cn/#acknowledgement\" target=\"_blank\" rel=\"noopener\">Markdown</a>    </p>\n<p>ENDING  </p>\n<ol>\n<li><p><a href=\"http://zhaoweihao.me/2017/04/29/Hexo-Github-pages-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"noopener\">http://zhaoweihao.me/2017/04/29/Hexo-Github-pages-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/fengxiongZz/p/7707219.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><em>本文主要说明构建个人博客需要的所有工具和条件，以及每一个组件在构建blog的说明和作用，并不是完整的操作手册。在搭建博客前通过阅读本文，完整的明白各个组件承担的响应的角色，当遇到问题时可以清楚地确定问题可能发生的原因。推荐完整看完本文后再进入各个组件深入学习。本文阅读时间1小时。</em></p>\n<h3 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h3><pre><code>Git + Github Pages + Node.js + Hexo + NexT Theme\n</code></pre><h3 id=\"knowledge-Base\"><a href=\"#knowledge-Base\" class=\"headerlink\" title=\"knowledge Base\"></a>knowledge Base</h3><ul>\n<li><strong>Git</strong> – 熟悉Git的工作原理和怎样使用Git。 推荐时间：2天</li>\n<li><strong>Github</strong> – 练习注册一个 账号<a href=\"https://www.github.com\" target=\"_blank\" rel=\"noopener\">github</a> , 创建并练习使用repository，搭建Github pages。推荐时间： 1天</li>\n<li><strong>Hexo</strong> – 安装Hexo, 设置基本的Hexo配置练习。推荐时间： 1天</li>\n<li><strong>NexT Theme</strong> –从Hexo 默认Theme切换到NexT后，练习自定义主题主要的元素。推荐时间： 0.5天</li>\n<li><strong>Markdown</strong> – 学会使用Markdown的语法编辑文档，通过Markdown编辑器练习使用各种标签。推荐时间：0.5天</li>\n</ul>\n<h3 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h3><p>Git是目前世界上最先进的分布式版本控制系统（没有之一）。那什么是版本控制系统？ </p>\n<p>在编辑文档时，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？  </p>\n<p>这样，你就结束了手动管理多个“版本”的史前时代，进入到版本控制的20世纪，这个软件就是Git。</p>\n<p>还不明白，可以进入廖雪峰老师的文档继续深入学习：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/\" target=\"_blank\" rel=\"noopener\">Git introduction</a>  </p>\n<p>Git下载地址：<a href=\"https://git-scm.com/download\" target=\"_blank\" rel=\"noopener\">Git Download</a></p>\n<h3 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h3><p>Node.js并不需要我们了解怎样使用它。我们只需要知道下面的Hexo能够正常工作需要依赖Node.js。所以只需要知道如何安装：</p>\n<p>下载并安装nvm.（什么是nvm？不需要知道，只需要知道他可以方便安装node.js）</p>\n<ul>\n<li><p>Download nvm </p>\n<pre><code>  $ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh    \n</code></pre></li>\n<li><p>install nvm</p>\n<pre><code>  $ cd .nvm/\n  $ ./install.sh\n</code></pre></li>\n<li><p>set bash profile</p>\n<pre><code>  $ export NVM_DIR=&quot;$HOME/.nvm&quot;\n  $ [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;\n</code></pre></li>\n<li><p>install Node.js</p>\n<pre><code>  $ nvm install stable\n</code></pre></li>\n</ul>\n<h3 id=\"GitHub-Page\"><a href=\"#GitHub-Page\" class=\"headerlink\" title=\"GitHub Page\"></a>GitHub Page</h3><p>Github做为Git的云端版本库，可以放任何人随时随地边编辑和发布文档，而且完全开源免费。Github Page作为Github的一个功能，<strong>只需要将站点文件上传到Github上，你可以拥有自己的免费Blog平台，不需要托管主机，不需要域名</strong>。</p>\n<p>account: <em>yourusername</em><br>通过ssh方式连接Github：  </p>\n<pre><code>git@github.com:_yourusername_/\n</code></pre><p>通过http方式连接Github：  </p>\n<pre><code>https://github.com/_yourusername_/  \n\n$ git config --global user.name &quot;Your Name&quot;  \n$ git config --global user.email &quot;email@example.com&quot;\n</code></pre><h3 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h3><p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">Hexo</a>  是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。什么意思呢？</p>\n<p>我们知道静网页文件都是<em>.html</em>文件，需要很多标签对格式进行控制。如果我们有Hexo后，我们可以将可读性很高的文本档使用Markdown的语法通过Hexo转换成<em>.html</em>文件，并且生成完整的完整框架。我们只需要编辑文本文件，通hexo生成网站的框架和内容，并且部署生成自己的网站。</p>\n<ul>\n<li><p>Install hexo</p>\n<pre><code>  $npm install hexo-cli -g\n</code></pre></li>\n<li><p>set up hexo  </p>\n<pre><code>  $hexo init blog\n  $cd blog\n  $npm install\n  $hexo server\n</code></pre></li>\n</ul>\n<h3 id=\"NexT\"><a href=\"#NexT\" class=\"headerlink\" title=\"NexT\"></a>NexT</h3><p>如果说Hexo为一个人的躯体，那么NexT就是这个躯体的衣服，让Hexo变得更美，这就是NexT。</p>\n<p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>\n<p>为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。</p>\n<p>安装 NexT<br>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。  </p>\n<p>下载主题  </p>\n<pre><code>$ cd your-hexo-site\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n</code></pre><p>启用主题  </p>\n<pre><code>#编辑系统配置文件_config.yml,找到Theme设置并将值改成next\ntheme: next\n</code></pre><p>验证主题  </p>\n<pre><code>$hexo s --debug  \nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n</code></pre><h3 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h3><p>Markdown 是一个 Web 上使用的文本到HTML的转换工具，可以通过简单、易读易写的文本格式生成结构化的HTML文档。目前 github、Stackoverflow 等网站均支持这种格式.<br><a href=\"http://www.markdown.cn/#acknowledgement\" target=\"_blank\" rel=\"noopener\">Markdown</a>    </p>\n<p>ENDING  </p>\n<ol>\n<li><p><a href=\"http://zhaoweihao.me/2017/04/29/Hexo-Github-pages-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/\" target=\"_blank\" rel=\"noopener\">http://zhaoweihao.me/2017/04/29/Hexo-Github-pages-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</a></p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/fengxiongZz/p/7707219.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a></p>\n</li>\n</ol>\n"},{"title":"Web安全学习计划","date":"2018-05-02T09:03:02.000Z","_content":"*通过本篇文章，您可以了解一个web安全从业人员所具备的大致知识面，同时我也制定了一个循序渐进的学习计划，用以帮您找准自己的定位，并可以自己制定适合自己的学习计划。*\n\n### 关键词\n\n以不求甚解的方式去看书，基于兴趣选择优先学习点，培养一个星期看完一本书的能力。\n\n### 塔形的知识面\n\n在我看来，人类的知识都是具有阶梯式、层级式的特点，如果不了解下层的知识面，那么对于上层知识面的学习将会止于皮毛、浮于表面。对于web安全来说，我认为有5大块知识面是必须要掌握的，其层次关系如下图：\n\n{% img tower /2018/05/02/web-security-learning/tower.jpeg %}\n\n最下层的是os（操作系统）与db（数据库）。中间层是web，也是最重要的贯通上下的知识面。最上层的是安全攻防的知识和系统开发的知识，二者是纠缠在一起的上升螺旋。\n\n### 建议的学习计划\n虽然知识面是层级式的，但是对于我们的学习来说，不应该抱有先把下层的知识学会、再学上层的知识。我推荐的学习态度是不求甚解。因为现今是知识大爆炸的时代，你不必为了一个问题而死转牛角尖，这会降低学习效率。正确的做法是快速获取主要的知识，然后进入下一阶段的学习，那些未明白的地方，总会在未来的某个时刻或触类旁通、或回头重学，到了那时，你对这些问题的掌握程度，将是异常的深刻。\n基于这种快速学习的方法，我给您的学习计划是这样的：\n\n{% img spiral /2018/05/02/web-security-learning/spiral.jpeg %}\n每个阶段所包含的学习内容和时间安排如下：\n\n|  序号 \t|  阶段 \t|  花费时间 \t|  学习内容 \t|\n|---\t|---\t|---\t|---\t|\n|   1\t|   os基础知识\t|  4天 \t|   os基础操作，os文件系统，os权限系统，os用户管理，常用系统命令\t|\n|   2\t|   web基础知识\t|  2天\t|    http协议，html&js&asp&php&jsp基础知识\t|\n|   3\t|   安全攻防基础知识\t|  7天 \t|  常见安全漏洞的典型利用，常用安全工具使用方法 \t|\n|   4\t|   db基础知识\t|   1天\t|  常见数据库简介（oracle、mysql、sqlite），常用sql语句 \t|\n|   5\t|   安全攻防进阶1\t|   7天\t|  渗透测试方法论，安全漏洞深入分析 \t|\n|   6\t|   web深入学习\t|   15天\t|  https协议，搭建个人web服务器，深入学习html&php&js \t|\n|   7\t|   os深入学习\t|   15天\t|  程序进程线程，网络通信与端口，linux & 深入学习oracle \t|\n|   8\t|   系统开发基础知识\t| 15天  \t|   学习python\t|\n|   9\t|   安全攻防进阶2\t|  15天+ \t|   大量的安全实战，编写poc，学习安全工具的插件及高级利用\t|\n|   10\t|   系统开发进阶1\t|  15天+ \t|   学习java 基础知识，java web开发\t|\n|   11\t|   安全攻防进阶3\t|  保持学习\t|   根据自己的爱好，深入某个领域\t|\n|   12\t|   系统开发进阶2\t|   保持学习\t|   根据安全攻防的需要进行学习\t|\n|  合计\t|   \t|  96天+ \t|   \t|\n\n\n### 兴趣是学习的起点\n从上面的计划可以看出，对于枯燥无味的理论知识，刚开始只安排了2-3天的常识学习，马上就是动手操作性比较强的安全攻防基础，这可以极大的激起您学习的兴趣。这也是我推崇的学习方式，基于兴趣。当您对常见漏洞的利用方法了然于胸、并不断使用的时候，您肯定会产生很多疑惑，这时候再回过头去学习下层的理论知识，您会产生恍然大悟的畅快感，如同遮天的乌云忽然间就烟消云散了。\n\n\n### 不要小瞧您的学习能力\n常听人说看一本书看了半年还没看完，一看到厚厚的书本就产生畏惧。其实您低估了不求甚解的学习效率，一个星期绝对可以看完一本书的。重要的是集中注意力，不要死转牛角尖，不要以为某个知识点没有明白就会错过了，我明确的告诉您，以后您还会再遇到那个知识点的，而那个时候稍加一想就会了。\n\n\n### 自我定位与制定学习计划\n拿出纸和笔，把您自己已经会的知识画成一个个的圈，然后选择和您已有知识关联最大的知识面去优先学习，因为让零散的知识点尽量融合成一个整体是最有效率的。然后挑出您最感兴趣的知识面去次优先学习，最后参考我给您的计划，制定您个人的学习计划。并将其打印出来，然后按部就班的学习吧。","source":"_posts/web-security-learning.md","raw":"---\ntitle: Web安全学习计划\ndate: 2018-05-02 17:03:02\ntags:\n\t- security\ncategory:\n\t- security\n---\n*通过本篇文章，您可以了解一个web安全从业人员所具备的大致知识面，同时我也制定了一个循序渐进的学习计划，用以帮您找准自己的定位，并可以自己制定适合自己的学习计划。*\n\n### 关键词\n\n以不求甚解的方式去看书，基于兴趣选择优先学习点，培养一个星期看完一本书的能力。\n\n### 塔形的知识面\n\n在我看来，人类的知识都是具有阶梯式、层级式的特点，如果不了解下层的知识面，那么对于上层知识面的学习将会止于皮毛、浮于表面。对于web安全来说，我认为有5大块知识面是必须要掌握的，其层次关系如下图：\n\n{% img tower /2018/05/02/web-security-learning/tower.jpeg %}\n\n最下层的是os（操作系统）与db（数据库）。中间层是web，也是最重要的贯通上下的知识面。最上层的是安全攻防的知识和系统开发的知识，二者是纠缠在一起的上升螺旋。\n\n### 建议的学习计划\n虽然知识面是层级式的，但是对于我们的学习来说，不应该抱有先把下层的知识学会、再学上层的知识。我推荐的学习态度是不求甚解。因为现今是知识大爆炸的时代，你不必为了一个问题而死转牛角尖，这会降低学习效率。正确的做法是快速获取主要的知识，然后进入下一阶段的学习，那些未明白的地方，总会在未来的某个时刻或触类旁通、或回头重学，到了那时，你对这些问题的掌握程度，将是异常的深刻。\n基于这种快速学习的方法，我给您的学习计划是这样的：\n\n{% img spiral /2018/05/02/web-security-learning/spiral.jpeg %}\n每个阶段所包含的学习内容和时间安排如下：\n\n|  序号 \t|  阶段 \t|  花费时间 \t|  学习内容 \t|\n|---\t|---\t|---\t|---\t|\n|   1\t|   os基础知识\t|  4天 \t|   os基础操作，os文件系统，os权限系统，os用户管理，常用系统命令\t|\n|   2\t|   web基础知识\t|  2天\t|    http协议，html&js&asp&php&jsp基础知识\t|\n|   3\t|   安全攻防基础知识\t|  7天 \t|  常见安全漏洞的典型利用，常用安全工具使用方法 \t|\n|   4\t|   db基础知识\t|   1天\t|  常见数据库简介（oracle、mysql、sqlite），常用sql语句 \t|\n|   5\t|   安全攻防进阶1\t|   7天\t|  渗透测试方法论，安全漏洞深入分析 \t|\n|   6\t|   web深入学习\t|   15天\t|  https协议，搭建个人web服务器，深入学习html&php&js \t|\n|   7\t|   os深入学习\t|   15天\t|  程序进程线程，网络通信与端口，linux & 深入学习oracle \t|\n|   8\t|   系统开发基础知识\t| 15天  \t|   学习python\t|\n|   9\t|   安全攻防进阶2\t|  15天+ \t|   大量的安全实战，编写poc，学习安全工具的插件及高级利用\t|\n|   10\t|   系统开发进阶1\t|  15天+ \t|   学习java 基础知识，java web开发\t|\n|   11\t|   安全攻防进阶3\t|  保持学习\t|   根据自己的爱好，深入某个领域\t|\n|   12\t|   系统开发进阶2\t|   保持学习\t|   根据安全攻防的需要进行学习\t|\n|  合计\t|   \t|  96天+ \t|   \t|\n\n\n### 兴趣是学习的起点\n从上面的计划可以看出，对于枯燥无味的理论知识，刚开始只安排了2-3天的常识学习，马上就是动手操作性比较强的安全攻防基础，这可以极大的激起您学习的兴趣。这也是我推崇的学习方式，基于兴趣。当您对常见漏洞的利用方法了然于胸、并不断使用的时候，您肯定会产生很多疑惑，这时候再回过头去学习下层的理论知识，您会产生恍然大悟的畅快感，如同遮天的乌云忽然间就烟消云散了。\n\n\n### 不要小瞧您的学习能力\n常听人说看一本书看了半年还没看完，一看到厚厚的书本就产生畏惧。其实您低估了不求甚解的学习效率，一个星期绝对可以看完一本书的。重要的是集中注意力，不要死转牛角尖，不要以为某个知识点没有明白就会错过了，我明确的告诉您，以后您还会再遇到那个知识点的，而那个时候稍加一想就会了。\n\n\n### 自我定位与制定学习计划\n拿出纸和笔，把您自己已经会的知识画成一个个的圈，然后选择和您已有知识关联最大的知识面去优先学习，因为让零散的知识点尽量融合成一个整体是最有效率的。然后挑出您最感兴趣的知识面去次优先学习，最后参考我给您的计划，制定您个人的学习计划。并将其打印出来，然后按部就班的学习吧。","slug":"web-security-learning","published":1,"updated":"2018-05-04T07:51:44.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwontx000ywgl1cg2e8pzx","content":"<p><em>通过本篇文章，您可以了解一个web安全从业人员所具备的大致知识面，同时我也制定了一个循序渐进的学习计划，用以帮您找准自己的定位，并可以自己制定适合自己的学习计划。</em></p>\n<h3 id=\"关键词\"><a href=\"#关键词\" class=\"headerlink\" title=\"关键词\"></a>关键词</h3><p>以不求甚解的方式去看书，基于兴趣选择优先学习点，培养一个星期看完一本书的能力。</p>\n<h3 id=\"塔形的知识面\"><a href=\"#塔形的知识面\" class=\"headerlink\" title=\"塔形的知识面\"></a>塔形的知识面</h3><p>在我看来，人类的知识都是具有阶梯式、层级式的特点，如果不了解下层的知识面，那么对于上层知识面的学习将会止于皮毛、浮于表面。对于web安全来说，我认为有5大块知识面是必须要掌握的，其层次关系如下图：</p>\n<img src=\"/2018/05/02/web-security-learning/tower.jpeg\" class=\"tower\">\n<p>最下层的是os（操作系统）与db（数据库）。中间层是web，也是最重要的贯通上下的知识面。最上层的是安全攻防的知识和系统开发的知识，二者是纠缠在一起的上升螺旋。</p>\n<h3 id=\"建议的学习计划\"><a href=\"#建议的学习计划\" class=\"headerlink\" title=\"建议的学习计划\"></a>建议的学习计划</h3><p>虽然知识面是层级式的，但是对于我们的学习来说，不应该抱有先把下层的知识学会、再学上层的知识。我推荐的学习态度是不求甚解。因为现今是知识大爆炸的时代，你不必为了一个问题而死转牛角尖，这会降低学习效率。正确的做法是快速获取主要的知识，然后进入下一阶段的学习，那些未明白的地方，总会在未来的某个时刻或触类旁通、或回头重学，到了那时，你对这些问题的掌握程度，将是异常的深刻。<br>基于这种快速学习的方法，我给您的学习计划是这样的：</p>\n<img src=\"/2018/05/02/web-security-learning/spiral.jpeg\" class=\"spiral\">\n<p>每个阶段所包含的学习内容和时间安排如下：</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>阶段</th>\n<th>花费时间</th>\n<th>学习内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>os基础知识</td>\n<td>4天</td>\n<td>os基础操作，os文件系统，os权限系统，os用户管理，常用系统命令</td>\n</tr>\n<tr>\n<td>2</td>\n<td>web基础知识</td>\n<td>2天</td>\n<td>http协议，html&amp;js&amp;asp&amp;php&amp;jsp基础知识</td>\n</tr>\n<tr>\n<td>3</td>\n<td>安全攻防基础知识</td>\n<td>7天</td>\n<td>常见安全漏洞的典型利用，常用安全工具使用方法</td>\n</tr>\n<tr>\n<td>4</td>\n<td>db基础知识</td>\n<td>1天</td>\n<td>常见数据库简介（oracle、mysql、sqlite），常用sql语句</td>\n</tr>\n<tr>\n<td>5</td>\n<td>安全攻防进阶1</td>\n<td>7天</td>\n<td>渗透测试方法论，安全漏洞深入分析</td>\n</tr>\n<tr>\n<td>6</td>\n<td>web深入学习</td>\n<td>15天</td>\n<td>https协议，搭建个人web服务器，深入学习html&amp;php&amp;js</td>\n</tr>\n<tr>\n<td>7</td>\n<td>os深入学习</td>\n<td>15天</td>\n<td>程序进程线程，网络通信与端口，linux &amp; 深入学习oracle</td>\n</tr>\n<tr>\n<td>8</td>\n<td>系统开发基础知识</td>\n<td>15天</td>\n<td>学习python</td>\n</tr>\n<tr>\n<td>9</td>\n<td>安全攻防进阶2</td>\n<td>15天+</td>\n<td>大量的安全实战，编写poc，学习安全工具的插件及高级利用</td>\n</tr>\n<tr>\n<td>10</td>\n<td>系统开发进阶1</td>\n<td>15天+</td>\n<td>学习java 基础知识，java web开发</td>\n</tr>\n<tr>\n<td>11</td>\n<td>安全攻防进阶3</td>\n<td>保持学习</td>\n<td>根据自己的爱好，深入某个领域</td>\n</tr>\n<tr>\n<td>12</td>\n<td>系统开发进阶2</td>\n<td>保持学习</td>\n<td>根据安全攻防的需要进行学习</td>\n</tr>\n<tr>\n<td>合计</td>\n<td></td>\n<td>96天+</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"兴趣是学习的起点\"><a href=\"#兴趣是学习的起点\" class=\"headerlink\" title=\"兴趣是学习的起点\"></a>兴趣是学习的起点</h3><p>从上面的计划可以看出，对于枯燥无味的理论知识，刚开始只安排了2-3天的常识学习，马上就是动手操作性比较强的安全攻防基础，这可以极大的激起您学习的兴趣。这也是我推崇的学习方式，基于兴趣。当您对常见漏洞的利用方法了然于胸、并不断使用的时候，您肯定会产生很多疑惑，这时候再回过头去学习下层的理论知识，您会产生恍然大悟的畅快感，如同遮天的乌云忽然间就烟消云散了。</p>\n<h3 id=\"不要小瞧您的学习能力\"><a href=\"#不要小瞧您的学习能力\" class=\"headerlink\" title=\"不要小瞧您的学习能力\"></a>不要小瞧您的学习能力</h3><p>常听人说看一本书看了半年还没看完，一看到厚厚的书本就产生畏惧。其实您低估了不求甚解的学习效率，一个星期绝对可以看完一本书的。重要的是集中注意力，不要死转牛角尖，不要以为某个知识点没有明白就会错过了，我明确的告诉您，以后您还会再遇到那个知识点的，而那个时候稍加一想就会了。</p>\n<h3 id=\"自我定位与制定学习计划\"><a href=\"#自我定位与制定学习计划\" class=\"headerlink\" title=\"自我定位与制定学习计划\"></a>自我定位与制定学习计划</h3><p>拿出纸和笔，把您自己已经会的知识画成一个个的圈，然后选择和您已有知识关联最大的知识面去优先学习，因为让零散的知识点尽量融合成一个整体是最有效率的。然后挑出您最感兴趣的知识面去次优先学习，最后参考我给您的计划，制定您个人的学习计划。并将其打印出来，然后按部就班的学习吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>通过本篇文章，您可以了解一个web安全从业人员所具备的大致知识面，同时我也制定了一个循序渐进的学习计划，用以帮您找准自己的定位，并可以自己制定适合自己的学习计划。</em></p>\n<h3 id=\"关键词\"><a href=\"#关键词\" class=\"headerlink\" title=\"关键词\"></a>关键词</h3><p>以不求甚解的方式去看书，基于兴趣选择优先学习点，培养一个星期看完一本书的能力。</p>\n<h3 id=\"塔形的知识面\"><a href=\"#塔形的知识面\" class=\"headerlink\" title=\"塔形的知识面\"></a>塔形的知识面</h3><p>在我看来，人类的知识都是具有阶梯式、层级式的特点，如果不了解下层的知识面，那么对于上层知识面的学习将会止于皮毛、浮于表面。对于web安全来说，我认为有5大块知识面是必须要掌握的，其层次关系如下图：</p>\n<img src=\"/2018/05/02/web-security-learning/tower.jpeg\" class=\"tower\">\n<p>最下层的是os（操作系统）与db（数据库）。中间层是web，也是最重要的贯通上下的知识面。最上层的是安全攻防的知识和系统开发的知识，二者是纠缠在一起的上升螺旋。</p>\n<h3 id=\"建议的学习计划\"><a href=\"#建议的学习计划\" class=\"headerlink\" title=\"建议的学习计划\"></a>建议的学习计划</h3><p>虽然知识面是层级式的，但是对于我们的学习来说，不应该抱有先把下层的知识学会、再学上层的知识。我推荐的学习态度是不求甚解。因为现今是知识大爆炸的时代，你不必为了一个问题而死转牛角尖，这会降低学习效率。正确的做法是快速获取主要的知识，然后进入下一阶段的学习，那些未明白的地方，总会在未来的某个时刻或触类旁通、或回头重学，到了那时，你对这些问题的掌握程度，将是异常的深刻。<br>基于这种快速学习的方法，我给您的学习计划是这样的：</p>\n<img src=\"/2018/05/02/web-security-learning/spiral.jpeg\" class=\"spiral\">\n<p>每个阶段所包含的学习内容和时间安排如下：</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>阶段</th>\n<th>花费时间</th>\n<th>学习内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>os基础知识</td>\n<td>4天</td>\n<td>os基础操作，os文件系统，os权限系统，os用户管理，常用系统命令</td>\n</tr>\n<tr>\n<td>2</td>\n<td>web基础知识</td>\n<td>2天</td>\n<td>http协议，html&amp;js&amp;asp&amp;php&amp;jsp基础知识</td>\n</tr>\n<tr>\n<td>3</td>\n<td>安全攻防基础知识</td>\n<td>7天</td>\n<td>常见安全漏洞的典型利用，常用安全工具使用方法</td>\n</tr>\n<tr>\n<td>4</td>\n<td>db基础知识</td>\n<td>1天</td>\n<td>常见数据库简介（oracle、mysql、sqlite），常用sql语句</td>\n</tr>\n<tr>\n<td>5</td>\n<td>安全攻防进阶1</td>\n<td>7天</td>\n<td>渗透测试方法论，安全漏洞深入分析</td>\n</tr>\n<tr>\n<td>6</td>\n<td>web深入学习</td>\n<td>15天</td>\n<td>https协议，搭建个人web服务器，深入学习html&amp;php&amp;js</td>\n</tr>\n<tr>\n<td>7</td>\n<td>os深入学习</td>\n<td>15天</td>\n<td>程序进程线程，网络通信与端口，linux &amp; 深入学习oracle</td>\n</tr>\n<tr>\n<td>8</td>\n<td>系统开发基础知识</td>\n<td>15天</td>\n<td>学习python</td>\n</tr>\n<tr>\n<td>9</td>\n<td>安全攻防进阶2</td>\n<td>15天+</td>\n<td>大量的安全实战，编写poc，学习安全工具的插件及高级利用</td>\n</tr>\n<tr>\n<td>10</td>\n<td>系统开发进阶1</td>\n<td>15天+</td>\n<td>学习java 基础知识，java web开发</td>\n</tr>\n<tr>\n<td>11</td>\n<td>安全攻防进阶3</td>\n<td>保持学习</td>\n<td>根据自己的爱好，深入某个领域</td>\n</tr>\n<tr>\n<td>12</td>\n<td>系统开发进阶2</td>\n<td>保持学习</td>\n<td>根据安全攻防的需要进行学习</td>\n</tr>\n<tr>\n<td>合计</td>\n<td></td>\n<td>96天+</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"兴趣是学习的起点\"><a href=\"#兴趣是学习的起点\" class=\"headerlink\" title=\"兴趣是学习的起点\"></a>兴趣是学习的起点</h3><p>从上面的计划可以看出，对于枯燥无味的理论知识，刚开始只安排了2-3天的常识学习，马上就是动手操作性比较强的安全攻防基础，这可以极大的激起您学习的兴趣。这也是我推崇的学习方式，基于兴趣。当您对常见漏洞的利用方法了然于胸、并不断使用的时候，您肯定会产生很多疑惑，这时候再回过头去学习下层的理论知识，您会产生恍然大悟的畅快感，如同遮天的乌云忽然间就烟消云散了。</p>\n<h3 id=\"不要小瞧您的学习能力\"><a href=\"#不要小瞧您的学习能力\" class=\"headerlink\" title=\"不要小瞧您的学习能力\"></a>不要小瞧您的学习能力</h3><p>常听人说看一本书看了半年还没看完，一看到厚厚的书本就产生畏惧。其实您低估了不求甚解的学习效率，一个星期绝对可以看完一本书的。重要的是集中注意力，不要死转牛角尖，不要以为某个知识点没有明白就会错过了，我明确的告诉您，以后您还会再遇到那个知识点的，而那个时候稍加一想就会了。</p>\n<h3 id=\"自我定位与制定学习计划\"><a href=\"#自我定位与制定学习计划\" class=\"headerlink\" title=\"自我定位与制定学习计划\"></a>自我定位与制定学习计划</h3><p>拿出纸和笔，把您自己已经会的知识画成一个个的圈，然后选择和您已有知识关联最大的知识面去优先学习，因为让零散的知识点尽量融合成一个整体是最有效率的。然后挑出您最感兴趣的知识面去次优先学习，最后参考我给您的计划，制定您个人的学习计划。并将其打印出来，然后按部就班的学习吧。</p>\n"},{"title":"web缓存之：基础知识","date":"2018-04-10T09:52:49.000Z","_content":">Caching is a technique that stores a copy of a given resource and serves it back when requested. When a web cache has a requested resource in its store, it intercepts the request and returns its copy instead of re-downloading from the originating server.\n \n*Web缓存是指一个Web资源（如html页面，图片，js，数据等）存在于Web服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。*\n\n### Advantagement of Web Cache\n* Improving the performance by reusing previously fetched resources. \n* Reducing latency and network traffic.\n* Web sites become more responsive.\n\n### Different kinds of caches\nCache从作用和部署位置来说有好几种类型：gateway caches, CDN, reverse proxy caches and load balancers 。这些有利于Web Server提高可用性，提升性能和横向扩展* \n{% img CacheCategory /2018/04/10/web-cache-basic-kb/CacheCategory.png %}  \n\n#### Reverse Proxy Cache\n代理服务器是浏览器和源服务器之间的中间服务器，浏览器先向这个中间服务器发起Web请求，经过处理后（比如权限验证，缓存匹配等），再将请求转发到源服务器。代理服务器缓存的运作原理跟浏览器的运作原理差不多，只是规模更大。可以把它理解为一个共享缓存，不只为一个用户服务，一般为大量用户提供服务，因此在减少相应时间和带宽使用方面很有效，同一个副本会被重用多次。常见代理服务器缓存解决方案有Squid等，这里不再详述。\n\n#### CDN\nCDN（Content delivery networks）缓存，也叫网关缓存、反向代理缓存。CDN缓存一般是由网站管理员自己部署，为了让他们的网站更容易扩展并获得更好的性能。浏览器先向CDN网关发起Web请求，网关服务器后面对应着一台或多台负载均衡源服务器，会根据它们的负载请求，动态将请求转发到合适的源服务器上。虽然这种架构负载均衡源服务器之间的缓存没法共享，但却拥有更好的处扩展性。从浏览器角度来看，整个CDN就是一个源服务器，从这个层面来说，本文讨论浏览器和服务器之间的缓存机制，在这种架构下同样适用。\n\n#### Web应用层缓存\n应用层缓存指的是从代码层面上，通过代码逻辑和缓存策略，实现对数据，页面，图片等资源的缓存，可以根据实际情况选择将数据存在文件系统或者内存中，减少数据库查询或者读写瓶颈，提高响应效率。\n\n#### 浏览器端缓存\n浏览器缓存根据一套与服务器约定的规则进行工作，在同一个会话过程中会检查一次并确定缓存的副本足够新。如果你浏览过程中，比如前进或后退，访问到同一个图片，这些图片可以从浏览器缓存中调出而即时显现。\n\n#### SQL Cache\nWeb应用，特别是SNS类型的应用，往往关系比较复杂，数据库表繁多，如果频繁进行数据库查询，很容易导致数据库不堪重荷。为了提供查询的性能，会将查询后的数据放到内存中进行缓存，下次查询时，直接从内存缓存直接返回，提供响应效率。比如常用的缓存方案有memcached等。\n\n\n### Controlling caching\nThe header: **Cache-control** \n>The Cache-Control HTTP/1.1 general-header field is used to specify directives for caching mechanisms in both requests and responses. Use this header to define your caching policies with the variety of directives it provides.\n  \n*HTTP1.1版本才添加的缓存控制机制，其在请求报文或响应报文首部添加一个cache-control的首部，用于定义资源的缓存最大时长，是相对于响应报文首部中的date首部定义的时间。一般响应报文首部会同时有Expires首部和Cache-control首部*\n\n#### No cache storage at all\n>The cache should not store anything about the client request or server response. A request is sent to the server and a full response is downloaded each and every time.  \n*完全不缓存*\n\n\tCache-Control: no-store\n\tCache-Control: no-cache, no-store, must-revalidate\n\n#### No caching\n>A cache will send the request to the origin server for validation before releasing a cached copy.  \n*会缓存，但是每次请求都会确认*\n\n\tCache-Control: no-cache\n\n#### Private and public caches\nPrivate Cache 只能被单个用户使用。Public Cache可以被多个用户复用。\n\n\tCache-Control: private\n\tCache-Control: public\n\n#### Expiration\nThe most important directive here is \"max-age=<seconds\\>\" which is the maximum amount of time a resource will be considered fresh. Contrary to Expires, this directive is relative to the time of the request. For the files in the application that will not change, you can usually add aggressive caching. This includes static files such as images, CSS files and JavaScript files, for example.\n\nFor more details, see also the **Freshness** section below.\n\n\tCache-Control: max-age=31536000\n\n#### Validation\nWhen using the \"must-revalidate\" directive, the cache must verify the status of the stale resources before using it and expired ones should not be used. For more details, see the **Validation** section below.\n\n\tCache-Control: must-revalidate\n\n\n对Cache-Control头不同的值归纳 \n\n\t\tcache-request-directive=no-cache 不接受缓存响应\n                                no-store 不缓存在本地\n                                max-age  缓存最大有效时长       \n                                min-fresh \n        \n\t\tcache-response-directive=public\n                                 private\n                                 no-cache \n                                 no-store\n                                 must-revalidate\n                                 max-age\n        \n\t\t// no-cache：可缓存，但用户每次请求都需要先到上游服务器做缓存检验\n\n#### The Pragma header\nPragma 是一个 HTTP/1.0 header，在HTTP/1.1中并没有定义它为一个HTTP response头，因为我们已经有了 Cache-Control header。这个只是为了兼容HTTP/1.0的客户端。\n\n\t<META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\">\n\n上述代码的作用是告诉浏览器当前页面不被缓存，每次访问都需要去服务器拉取。使用上很简单，但只有部分浏览器可以支持，而且所有缓存代理服务器都不支持，因为代理不解析HTML内容本身。\n\n可以通过这个页面测试你的浏览器是否支持：[Pragma No-Cache Test](http://www.procata.com/cachetest/tests/pragma/index.php)\n\n\n#### Varying responses\n**Vary** response header从在Client上多个不同的cache副本筛选合适的版本\n>The Vary HTTP response header determines how to match future request headers to decide whether a cached response can be used rather than requesting a fresh one from the origin server.\n\n>When a cache receives a request that can be satisfied by a cached response that has a Vary header field, it must not use that cached response unless all header fields as nominated by the Vary header match in both the original (cached) request and the new request.\n\n>The Vary header leads cache to use more HTTP headers as key for the cache.\n\n>This can be useful for serving content dynamically, for example. When using the Vary: User-Agent header, caching servers should consider the user agent when deciding whether to serve the page from cache. If you are serving different content to mobile users, it can help you to avoid that a cache may mistakenly serve a desktop version of your site to your mobile users. In addition, it can help Google and other search engines to discover the mobile version of a page, and might also tell them that no Cloaking is intended.\n\n>Because the User-Agent header value is different (\"varies\") for mobile and desktop clients, caches will not be used to serve mobile content mistakenly to desktop users or vice versa.\n\n### Freshness\n新鲜度:资源被存储到缓存后，必须要有回收机制（cache eviction）以释放占用的存储空间；另外因为Web资源可能会不停地更新，缓存也需要过期机制（expiration time），也就是缓存副本有效期。\n\n#### Cache eviction  \n1. 缓存项过期：缓存资源往往会被设置有效时长，过期自动清理或失效\n2. 缓存空间用尽：缓存空间用尽时，会根据LRU（最近最小使用）算法清理缓存\n3. 清理策略设置过长过短都不好，过长数据容易陈旧，过短起不到缓存效果\n\n#### Lifetime\nShow how a proxy cache acts when a doc is not cache, in the cache and fresh, in the cache and stale. Here is an example of this process with a shared cache proxy:\n\n{% img  HTTPStaleness /2018/04/10/web-cache-basic-kb/HTTPStaleness.png %}\n\n\nflow as follows:\n{% img FreshnessLifetime /2018/04/10/web-cache-basic-kb/FreshnessLifetime.png %}\n\n1. 是否过期（expeired）通过\"**Cache-control: max-age=N**\" header 或者 **Expires** header 判断。**max-age**根据**Date**header和**N**判读是否expired；**Expires**则会直接记录expiration time.\n2. **Etag** header记录的是resource文件的MD5值，通过MD5判断server上该文件是否有改动。\n3. **Last-Modified**记录resource文件最后update时间，精确到秒。  \n\n\n**Cache-Control与Expires**\nCache-Control与Expires的作用一致，都是指明当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。只不过Cache-Control的选择更多，设置更细致，如果同时设置的话，其优先级高于Expires。\n\n**Last-Modified/ETag与Cache-Control/Expires**\n配置Last-Modified/ETag的情况下，浏览器再次访问统一URI的资源，还是会发送请求到服务器询问文件是否已经修改，如果没有，服务器会只发送一个304回给浏览器，告诉浏览器直接从自己本地的缓存取数据；如果修改过那就整个数据重新发给浏览器；\n\nCache-Control/Expires则不同，如果检测到本地的缓存还是有效的时间范围内，浏览器直接使用本地副本，不会发送任何请求。两者一起使用时，Cache-Control/Expires的优先级要高于Last-Modified/ETag。即当本地副本根据Cache-Control/Expires发现还在有效期内时，则不会再次发送请求去服务器询问修改时间（Last-Modified）或实体标识（Etag）了。\n\n一般情况下，使用Cache-Control/Expires会配合Last-Modified/ETag一起使用，因为即使服务器设置缓存时间, 当用户点击“刷新”按钮时，浏览器会忽略缓存继续向服务器发送请求，这时Last-Modified/ETag将能够很好利用304，从而减少响应开销。\n\n**Last-Modified与ETag**\n你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag（实体标识）呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：\n\n* Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的新鲜度,属于弱检验（weak validator）\n* 如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存\n* 有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形\n* Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。属于强检验（strong validator）\n* Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。\n* Etag的服务器生成规则和强弱Etag的相关内容可以参考[《HTTP Header definition》](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html)，\t\n\n\n### Reused resources\n并非所有的数据被缓存或需要缓存，缓存是为了解决20%数据被80%的人频繁访问的问题而生。所有我们必须要考虑缓存的复用率。\n\n#### The data we cache\n数据如希望被缓存往往具备变化缓慢的特征。被缓存的数据往往具备如下特性：\n\n**时间局部性**\n缓存的数据往往被打有时间缀，具有定期失效的特征，过期后会从源服务器检验请求验证是否需要重新拉取数据。 \n某数据被访问后，该数据往往会再次在短时间内被访问到。\n\n**空间局部性**\n被访问数据的周边数据被访问的概率会比其它常规数据访问大很多，所以这些访问数据和其它周边有可能被访问的数据通过某种方式集中在一起，以提高数据的被访问速度，减少数据查找时长。 \n完成这类功能的工具往往称为Cache。\n\n**热（区）数据**\n所谓热（区）数据就是指经常被访问到的数据，这类数据被缓存最有价值，缓存命中率高\n\n#### The data we do not cache\n用户账号密码信息等数据，该类数据不仅不应该被缓存，反而要被着重保护，这些年发生的撞库，密码破解等恶性事件，往往都是因为用户个人不当心或企业安全意味不足，导致用户敏感信息流失。\n\n#### Cache hit\n缓存命中率=hit/(hit+mixx) \nhit表示缓存被命中，miss表示没有命中，也就是缓存项中没有对应的资源 \n文档命中率：从文档命中的个数进行衡量 \n字节命中率：从内容命中的大小(字节)进行衡量\n\n This is very important when web sites have CSS stylesheets or JS scripts that have mutual dependencies, i.e., they depend on each other because they refer to the same HTML elements.\n\n{% img HTTPRevved /2018/04/10/web-cache-basic-kb/HTTPRevved.png %}\n\n\n\n### Can NOT Caches\nHTTP信息头中包含Cache-Control:no-cache，pragma:no-cache，或Cache-Control:max-age=0等告诉浏览器不用缓存的请求\n需要根据Cookie，认证信息等决定输入内容的动态请求是不能被缓存的\n经过HTTPS安全加密的请求（有人也经过测试发现，ie其实在头部加入Cache-Control：max-age信息，firefox在头部加入Cache-Control:Public之后，能够对HTTPS的资源进行缓存，参考《HTTPS的七个误解》）\nPOST请求无法被缓存\nHTTP响应头中不包含Last-Modified/Etag，也不包含Cache-Control/Expires的请求无法被缓存","source":"_posts/web-cache-basic-kb.md","raw":"---\ntitle: web缓存之：基础知识\ndate: 2018-04-10 17:52:49\ntags:\n\t- web\n\t- cache\n\t- HTTP\ncategory:\n\t- web\n---\n>Caching is a technique that stores a copy of a given resource and serves it back when requested. When a web cache has a requested resource in its store, it intercepts the request and returns its copy instead of re-downloading from the originating server.\n \n*Web缓存是指一个Web资源（如html页面，图片，js，数据等）存在于Web服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。*\n\n### Advantagement of Web Cache\n* Improving the performance by reusing previously fetched resources. \n* Reducing latency and network traffic.\n* Web sites become more responsive.\n\n### Different kinds of caches\nCache从作用和部署位置来说有好几种类型：gateway caches, CDN, reverse proxy caches and load balancers 。这些有利于Web Server提高可用性，提升性能和横向扩展* \n{% img CacheCategory /2018/04/10/web-cache-basic-kb/CacheCategory.png %}  \n\n#### Reverse Proxy Cache\n代理服务器是浏览器和源服务器之间的中间服务器，浏览器先向这个中间服务器发起Web请求，经过处理后（比如权限验证，缓存匹配等），再将请求转发到源服务器。代理服务器缓存的运作原理跟浏览器的运作原理差不多，只是规模更大。可以把它理解为一个共享缓存，不只为一个用户服务，一般为大量用户提供服务，因此在减少相应时间和带宽使用方面很有效，同一个副本会被重用多次。常见代理服务器缓存解决方案有Squid等，这里不再详述。\n\n#### CDN\nCDN（Content delivery networks）缓存，也叫网关缓存、反向代理缓存。CDN缓存一般是由网站管理员自己部署，为了让他们的网站更容易扩展并获得更好的性能。浏览器先向CDN网关发起Web请求，网关服务器后面对应着一台或多台负载均衡源服务器，会根据它们的负载请求，动态将请求转发到合适的源服务器上。虽然这种架构负载均衡源服务器之间的缓存没法共享，但却拥有更好的处扩展性。从浏览器角度来看，整个CDN就是一个源服务器，从这个层面来说，本文讨论浏览器和服务器之间的缓存机制，在这种架构下同样适用。\n\n#### Web应用层缓存\n应用层缓存指的是从代码层面上，通过代码逻辑和缓存策略，实现对数据，页面，图片等资源的缓存，可以根据实际情况选择将数据存在文件系统或者内存中，减少数据库查询或者读写瓶颈，提高响应效率。\n\n#### 浏览器端缓存\n浏览器缓存根据一套与服务器约定的规则进行工作，在同一个会话过程中会检查一次并确定缓存的副本足够新。如果你浏览过程中，比如前进或后退，访问到同一个图片，这些图片可以从浏览器缓存中调出而即时显现。\n\n#### SQL Cache\nWeb应用，特别是SNS类型的应用，往往关系比较复杂，数据库表繁多，如果频繁进行数据库查询，很容易导致数据库不堪重荷。为了提供查询的性能，会将查询后的数据放到内存中进行缓存，下次查询时，直接从内存缓存直接返回，提供响应效率。比如常用的缓存方案有memcached等。\n\n\n### Controlling caching\nThe header: **Cache-control** \n>The Cache-Control HTTP/1.1 general-header field is used to specify directives for caching mechanisms in both requests and responses. Use this header to define your caching policies with the variety of directives it provides.\n  \n*HTTP1.1版本才添加的缓存控制机制，其在请求报文或响应报文首部添加一个cache-control的首部，用于定义资源的缓存最大时长，是相对于响应报文首部中的date首部定义的时间。一般响应报文首部会同时有Expires首部和Cache-control首部*\n\n#### No cache storage at all\n>The cache should not store anything about the client request or server response. A request is sent to the server and a full response is downloaded each and every time.  \n*完全不缓存*\n\n\tCache-Control: no-store\n\tCache-Control: no-cache, no-store, must-revalidate\n\n#### No caching\n>A cache will send the request to the origin server for validation before releasing a cached copy.  \n*会缓存，但是每次请求都会确认*\n\n\tCache-Control: no-cache\n\n#### Private and public caches\nPrivate Cache 只能被单个用户使用。Public Cache可以被多个用户复用。\n\n\tCache-Control: private\n\tCache-Control: public\n\n#### Expiration\nThe most important directive here is \"max-age=<seconds\\>\" which is the maximum amount of time a resource will be considered fresh. Contrary to Expires, this directive is relative to the time of the request. For the files in the application that will not change, you can usually add aggressive caching. This includes static files such as images, CSS files and JavaScript files, for example.\n\nFor more details, see also the **Freshness** section below.\n\n\tCache-Control: max-age=31536000\n\n#### Validation\nWhen using the \"must-revalidate\" directive, the cache must verify the status of the stale resources before using it and expired ones should not be used. For more details, see the **Validation** section below.\n\n\tCache-Control: must-revalidate\n\n\n对Cache-Control头不同的值归纳 \n\n\t\tcache-request-directive=no-cache 不接受缓存响应\n                                no-store 不缓存在本地\n                                max-age  缓存最大有效时长       \n                                min-fresh \n        \n\t\tcache-response-directive=public\n                                 private\n                                 no-cache \n                                 no-store\n                                 must-revalidate\n                                 max-age\n        \n\t\t// no-cache：可缓存，但用户每次请求都需要先到上游服务器做缓存检验\n\n#### The Pragma header\nPragma 是一个 HTTP/1.0 header，在HTTP/1.1中并没有定义它为一个HTTP response头，因为我们已经有了 Cache-Control header。这个只是为了兼容HTTP/1.0的客户端。\n\n\t<META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\">\n\n上述代码的作用是告诉浏览器当前页面不被缓存，每次访问都需要去服务器拉取。使用上很简单，但只有部分浏览器可以支持，而且所有缓存代理服务器都不支持，因为代理不解析HTML内容本身。\n\n可以通过这个页面测试你的浏览器是否支持：[Pragma No-Cache Test](http://www.procata.com/cachetest/tests/pragma/index.php)\n\n\n#### Varying responses\n**Vary** response header从在Client上多个不同的cache副本筛选合适的版本\n>The Vary HTTP response header determines how to match future request headers to decide whether a cached response can be used rather than requesting a fresh one from the origin server.\n\n>When a cache receives a request that can be satisfied by a cached response that has a Vary header field, it must not use that cached response unless all header fields as nominated by the Vary header match in both the original (cached) request and the new request.\n\n>The Vary header leads cache to use more HTTP headers as key for the cache.\n\n>This can be useful for serving content dynamically, for example. When using the Vary: User-Agent header, caching servers should consider the user agent when deciding whether to serve the page from cache. If you are serving different content to mobile users, it can help you to avoid that a cache may mistakenly serve a desktop version of your site to your mobile users. In addition, it can help Google and other search engines to discover the mobile version of a page, and might also tell them that no Cloaking is intended.\n\n>Because the User-Agent header value is different (\"varies\") for mobile and desktop clients, caches will not be used to serve mobile content mistakenly to desktop users or vice versa.\n\n### Freshness\n新鲜度:资源被存储到缓存后，必须要有回收机制（cache eviction）以释放占用的存储空间；另外因为Web资源可能会不停地更新，缓存也需要过期机制（expiration time），也就是缓存副本有效期。\n\n#### Cache eviction  \n1. 缓存项过期：缓存资源往往会被设置有效时长，过期自动清理或失效\n2. 缓存空间用尽：缓存空间用尽时，会根据LRU（最近最小使用）算法清理缓存\n3. 清理策略设置过长过短都不好，过长数据容易陈旧，过短起不到缓存效果\n\n#### Lifetime\nShow how a proxy cache acts when a doc is not cache, in the cache and fresh, in the cache and stale. Here is an example of this process with a shared cache proxy:\n\n{% img  HTTPStaleness /2018/04/10/web-cache-basic-kb/HTTPStaleness.png %}\n\n\nflow as follows:\n{% img FreshnessLifetime /2018/04/10/web-cache-basic-kb/FreshnessLifetime.png %}\n\n1. 是否过期（expeired）通过\"**Cache-control: max-age=N**\" header 或者 **Expires** header 判断。**max-age**根据**Date**header和**N**判读是否expired；**Expires**则会直接记录expiration time.\n2. **Etag** header记录的是resource文件的MD5值，通过MD5判断server上该文件是否有改动。\n3. **Last-Modified**记录resource文件最后update时间，精确到秒。  \n\n\n**Cache-Control与Expires**\nCache-Control与Expires的作用一致，都是指明当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。只不过Cache-Control的选择更多，设置更细致，如果同时设置的话，其优先级高于Expires。\n\n**Last-Modified/ETag与Cache-Control/Expires**\n配置Last-Modified/ETag的情况下，浏览器再次访问统一URI的资源，还是会发送请求到服务器询问文件是否已经修改，如果没有，服务器会只发送一个304回给浏览器，告诉浏览器直接从自己本地的缓存取数据；如果修改过那就整个数据重新发给浏览器；\n\nCache-Control/Expires则不同，如果检测到本地的缓存还是有效的时间范围内，浏览器直接使用本地副本，不会发送任何请求。两者一起使用时，Cache-Control/Expires的优先级要高于Last-Modified/ETag。即当本地副本根据Cache-Control/Expires发现还在有效期内时，则不会再次发送请求去服务器询问修改时间（Last-Modified）或实体标识（Etag）了。\n\n一般情况下，使用Cache-Control/Expires会配合Last-Modified/ETag一起使用，因为即使服务器设置缓存时间, 当用户点击“刷新”按钮时，浏览器会忽略缓存继续向服务器发送请求，这时Last-Modified/ETag将能够很好利用304，从而减少响应开销。\n\n**Last-Modified与ETag**\n你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag（实体标识）呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：\n\n* Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的新鲜度,属于弱检验（weak validator）\n* 如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存\n* 有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形\n* Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。属于强检验（strong validator）\n* Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。\n* Etag的服务器生成规则和强弱Etag的相关内容可以参考[《HTTP Header definition》](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html)，\t\n\n\n### Reused resources\n并非所有的数据被缓存或需要缓存，缓存是为了解决20%数据被80%的人频繁访问的问题而生。所有我们必须要考虑缓存的复用率。\n\n#### The data we cache\n数据如希望被缓存往往具备变化缓慢的特征。被缓存的数据往往具备如下特性：\n\n**时间局部性**\n缓存的数据往往被打有时间缀，具有定期失效的特征，过期后会从源服务器检验请求验证是否需要重新拉取数据。 \n某数据被访问后，该数据往往会再次在短时间内被访问到。\n\n**空间局部性**\n被访问数据的周边数据被访问的概率会比其它常规数据访问大很多，所以这些访问数据和其它周边有可能被访问的数据通过某种方式集中在一起，以提高数据的被访问速度，减少数据查找时长。 \n完成这类功能的工具往往称为Cache。\n\n**热（区）数据**\n所谓热（区）数据就是指经常被访问到的数据，这类数据被缓存最有价值，缓存命中率高\n\n#### The data we do not cache\n用户账号密码信息等数据，该类数据不仅不应该被缓存，反而要被着重保护，这些年发生的撞库，密码破解等恶性事件，往往都是因为用户个人不当心或企业安全意味不足，导致用户敏感信息流失。\n\n#### Cache hit\n缓存命中率=hit/(hit+mixx) \nhit表示缓存被命中，miss表示没有命中，也就是缓存项中没有对应的资源 \n文档命中率：从文档命中的个数进行衡量 \n字节命中率：从内容命中的大小(字节)进行衡量\n\n This is very important when web sites have CSS stylesheets or JS scripts that have mutual dependencies, i.e., they depend on each other because they refer to the same HTML elements.\n\n{% img HTTPRevved /2018/04/10/web-cache-basic-kb/HTTPRevved.png %}\n\n\n\n### Can NOT Caches\nHTTP信息头中包含Cache-Control:no-cache，pragma:no-cache，或Cache-Control:max-age=0等告诉浏览器不用缓存的请求\n需要根据Cookie，认证信息等决定输入内容的动态请求是不能被缓存的\n经过HTTPS安全加密的请求（有人也经过测试发现，ie其实在头部加入Cache-Control：max-age信息，firefox在头部加入Cache-Control:Public之后，能够对HTTPS的资源进行缓存，参考《HTTPS的七个误解》）\nPOST请求无法被缓存\nHTTP响应头中不包含Last-Modified/Etag，也不包含Cache-Control/Expires的请求无法被缓存","slug":"web-cache-basic-kb","published":1,"updated":"2018-04-11T05:06:55.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwonu00011wgl12a30o8b6","content":"<blockquote>\n<p>Caching is a technique that stores a copy of a given resource and serves it back when requested. When a web cache has a requested resource in its store, it intercepts the request and returns its copy instead of re-downloading from the originating server.</p>\n</blockquote>\n<p><em>Web缓存是指一个Web资源（如html页面，图片，js，数据等）存在于Web服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。</em></p>\n<h3 id=\"Advantagement-of-Web-Cache\"><a href=\"#Advantagement-of-Web-Cache\" class=\"headerlink\" title=\"Advantagement of Web Cache\"></a>Advantagement of Web Cache</h3><ul>\n<li>Improving the performance by reusing previously fetched resources. </li>\n<li>Reducing latency and network traffic.</li>\n<li>Web sites become more responsive.</li>\n</ul>\n<h3 id=\"Different-kinds-of-caches\"><a href=\"#Different-kinds-of-caches\" class=\"headerlink\" title=\"Different kinds of caches\"></a>Different kinds of caches</h3><p>Cache从作用和部署位置来说有好几种类型：gateway caches, CDN, reverse proxy caches and load balancers 。这些有利于Web Server提高可用性，提升性能和横向扩展*<br><img src=\"/2018/04/10/web-cache-basic-kb/CacheCategory.png\" class=\"CacheCategory\">  </p>\n<h4 id=\"Reverse-Proxy-Cache\"><a href=\"#Reverse-Proxy-Cache\" class=\"headerlink\" title=\"Reverse Proxy Cache\"></a>Reverse Proxy Cache</h4><p>代理服务器是浏览器和源服务器之间的中间服务器，浏览器先向这个中间服务器发起Web请求，经过处理后（比如权限验证，缓存匹配等），再将请求转发到源服务器。代理服务器缓存的运作原理跟浏览器的运作原理差不多，只是规模更大。可以把它理解为一个共享缓存，不只为一个用户服务，一般为大量用户提供服务，因此在减少相应时间和带宽使用方面很有效，同一个副本会被重用多次。常见代理服务器缓存解决方案有Squid等，这里不再详述。</p>\n<h4 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h4><p>CDN（Content delivery networks）缓存，也叫网关缓存、反向代理缓存。CDN缓存一般是由网站管理员自己部署，为了让他们的网站更容易扩展并获得更好的性能。浏览器先向CDN网关发起Web请求，网关服务器后面对应着一台或多台负载均衡源服务器，会根据它们的负载请求，动态将请求转发到合适的源服务器上。虽然这种架构负载均衡源服务器之间的缓存没法共享，但却拥有更好的处扩展性。从浏览器角度来看，整个CDN就是一个源服务器，从这个层面来说，本文讨论浏览器和服务器之间的缓存机制，在这种架构下同样适用。</p>\n<h4 id=\"Web应用层缓存\"><a href=\"#Web应用层缓存\" class=\"headerlink\" title=\"Web应用层缓存\"></a>Web应用层缓存</h4><p>应用层缓存指的是从代码层面上，通过代码逻辑和缓存策略，实现对数据，页面，图片等资源的缓存，可以根据实际情况选择将数据存在文件系统或者内存中，减少数据库查询或者读写瓶颈，提高响应效率。</p>\n<h4 id=\"浏览器端缓存\"><a href=\"#浏览器端缓存\" class=\"headerlink\" title=\"浏览器端缓存\"></a>浏览器端缓存</h4><p>浏览器缓存根据一套与服务器约定的规则进行工作，在同一个会话过程中会检查一次并确定缓存的副本足够新。如果你浏览过程中，比如前进或后退，访问到同一个图片，这些图片可以从浏览器缓存中调出而即时显现。</p>\n<h4 id=\"SQL-Cache\"><a href=\"#SQL-Cache\" class=\"headerlink\" title=\"SQL Cache\"></a>SQL Cache</h4><p>Web应用，特别是SNS类型的应用，往往关系比较复杂，数据库表繁多，如果频繁进行数据库查询，很容易导致数据库不堪重荷。为了提供查询的性能，会将查询后的数据放到内存中进行缓存，下次查询时，直接从内存缓存直接返回，提供响应效率。比如常用的缓存方案有memcached等。</p>\n<h3 id=\"Controlling-caching\"><a href=\"#Controlling-caching\" class=\"headerlink\" title=\"Controlling caching\"></a>Controlling caching</h3><p>The header: <strong>Cache-control</strong> </p>\n<blockquote>\n<p>The Cache-Control HTTP/1.1 general-header field is used to specify directives for caching mechanisms in both requests and responses. Use this header to define your caching policies with the variety of directives it provides.</p>\n</blockquote>\n<p><em>HTTP1.1版本才添加的缓存控制机制，其在请求报文或响应报文首部添加一个cache-control的首部，用于定义资源的缓存最大时长，是相对于响应报文首部中的date首部定义的时间。一般响应报文首部会同时有Expires首部和Cache-control首部</em></p>\n<h4 id=\"No-cache-storage-at-all\"><a href=\"#No-cache-storage-at-all\" class=\"headerlink\" title=\"No cache storage at all\"></a>No cache storage at all</h4><blockquote>\n<p>The cache should not store anything about the client request or server response. A request is sent to the server and a full response is downloaded each and every time.<br><em>完全不缓存</em></p>\n</blockquote>\n<pre><code>Cache-Control: no-store\nCache-Control: no-cache, no-store, must-revalidate\n</code></pre><h4 id=\"No-caching\"><a href=\"#No-caching\" class=\"headerlink\" title=\"No caching\"></a>No caching</h4><blockquote>\n<p>A cache will send the request to the origin server for validation before releasing a cached copy.<br><em>会缓存，但是每次请求都会确认</em></p>\n</blockquote>\n<pre><code>Cache-Control: no-cache\n</code></pre><h4 id=\"Private-and-public-caches\"><a href=\"#Private-and-public-caches\" class=\"headerlink\" title=\"Private and public caches\"></a>Private and public caches</h4><p>Private Cache 只能被单个用户使用。Public Cache可以被多个用户复用。</p>\n<pre><code>Cache-Control: private\nCache-Control: public\n</code></pre><h4 id=\"Expiration\"><a href=\"#Expiration\" class=\"headerlink\" title=\"Expiration\"></a>Expiration</h4><p>The most important directive here is “max-age=&lt;seconds>“ which is the maximum amount of time a resource will be considered fresh. Contrary to Expires, this directive is relative to the time of the request. For the files in the application that will not change, you can usually add aggressive caching. This includes static files such as images, CSS files and JavaScript files, for example.</p>\n<p>For more details, see also the <strong>Freshness</strong> section below.</p>\n<pre><code>Cache-Control: max-age=31536000\n</code></pre><h4 id=\"Validation\"><a href=\"#Validation\" class=\"headerlink\" title=\"Validation\"></a>Validation</h4><p>When using the “must-revalidate” directive, the cache must verify the status of the stale resources before using it and expired ones should not be used. For more details, see the <strong>Validation</strong> section below.</p>\n<pre><code>Cache-Control: must-revalidate\n</code></pre><p>对Cache-Control头不同的值归纳 </p>\n<pre><code>    cache-request-directive=no-cache 不接受缓存响应\n                            no-store 不缓存在本地\n                            max-age  缓存最大有效时长       \n                            min-fresh \n\n    cache-response-directive=public\n                             private\n                             no-cache \n                             no-store\n                             must-revalidate\n                             max-age\n\n    // no-cache：可缓存，但用户每次请求都需要先到上游服务器做缓存检验\n</code></pre><h4 id=\"The-Pragma-header\"><a href=\"#The-Pragma-header\" class=\"headerlink\" title=\"The Pragma header\"></a>The Pragma header</h4><p>Pragma 是一个 HTTP/1.0 header，在HTTP/1.1中并没有定义它为一个HTTP response头，因为我们已经有了 Cache-Control header。这个只是为了兼容HTTP/1.0的客户端。</p>\n<pre><code>&lt;META HTTP-EQUIV=&quot;Pragma&quot; CONTENT=&quot;no-cache&quot;&gt;\n</code></pre><p>上述代码的作用是告诉浏览器当前页面不被缓存，每次访问都需要去服务器拉取。使用上很简单，但只有部分浏览器可以支持，而且所有缓存代理服务器都不支持，因为代理不解析HTML内容本身。</p>\n<p>可以通过这个页面测试你的浏览器是否支持：<a href=\"http://www.procata.com/cachetest/tests/pragma/index.php\" target=\"_blank\" rel=\"noopener\">Pragma No-Cache Test</a></p>\n<h4 id=\"Varying-responses\"><a href=\"#Varying-responses\" class=\"headerlink\" title=\"Varying responses\"></a>Varying responses</h4><p><strong>Vary</strong> response header从在Client上多个不同的cache副本筛选合适的版本</p>\n<blockquote>\n<p>The Vary HTTP response header determines how to match future request headers to decide whether a cached response can be used rather than requesting a fresh one from the origin server.</p>\n</blockquote>\n<blockquote>\n<p>When a cache receives a request that can be satisfied by a cached response that has a Vary header field, it must not use that cached response unless all header fields as nominated by the Vary header match in both the original (cached) request and the new request.</p>\n</blockquote>\n<blockquote>\n<p>The Vary header leads cache to use more HTTP headers as key for the cache.</p>\n</blockquote>\n<blockquote>\n<p>This can be useful for serving content dynamically, for example. When using the Vary: User-Agent header, caching servers should consider the user agent when deciding whether to serve the page from cache. If you are serving different content to mobile users, it can help you to avoid that a cache may mistakenly serve a desktop version of your site to your mobile users. In addition, it can help Google and other search engines to discover the mobile version of a page, and might also tell them that no Cloaking is intended.</p>\n</blockquote>\n<blockquote>\n<p>Because the User-Agent header value is different (“varies”) for mobile and desktop clients, caches will not be used to serve mobile content mistakenly to desktop users or vice versa.</p>\n</blockquote>\n<h3 id=\"Freshness\"><a href=\"#Freshness\" class=\"headerlink\" title=\"Freshness\"></a>Freshness</h3><p>新鲜度:资源被存储到缓存后，必须要有回收机制（cache eviction）以释放占用的存储空间；另外因为Web资源可能会不停地更新，缓存也需要过期机制（expiration time），也就是缓存副本有效期。</p>\n<h4 id=\"Cache-eviction\"><a href=\"#Cache-eviction\" class=\"headerlink\" title=\"Cache eviction\"></a>Cache eviction</h4><ol>\n<li>缓存项过期：缓存资源往往会被设置有效时长，过期自动清理或失效</li>\n<li>缓存空间用尽：缓存空间用尽时，会根据LRU（最近最小使用）算法清理缓存</li>\n<li>清理策略设置过长过短都不好，过长数据容易陈旧，过短起不到缓存效果</li>\n</ol>\n<h4 id=\"Lifetime\"><a href=\"#Lifetime\" class=\"headerlink\" title=\"Lifetime\"></a>Lifetime</h4><p>Show how a proxy cache acts when a doc is not cache, in the cache and fresh, in the cache and stale. Here is an example of this process with a shared cache proxy:</p>\n<img src=\"/2018/04/10/web-cache-basic-kb/HTTPStaleness.png\" class=\"HTTPStaleness\">\n<p>flow as follows:<br><img src=\"/2018/04/10/web-cache-basic-kb/FreshnessLifetime.png\" class=\"FreshnessLifetime\"></p>\n<ol>\n<li>是否过期（expeired）通过”<strong>Cache-control: max-age=N</strong>“ header 或者 <strong>Expires</strong> header 判断。<strong>max-age</strong>根据<strong>Date</strong>header和<strong>N</strong>判读是否expired；<strong>Expires</strong>则会直接记录expiration time.</li>\n<li><strong>Etag</strong> header记录的是resource文件的MD5值，通过MD5判断server上该文件是否有改动。</li>\n<li><strong>Last-Modified</strong>记录resource文件最后update时间，精确到秒。  </li>\n</ol>\n<p><strong>Cache-Control与Expires</strong><br>Cache-Control与Expires的作用一致，都是指明当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。只不过Cache-Control的选择更多，设置更细致，如果同时设置的话，其优先级高于Expires。</p>\n<p><strong>Last-Modified/ETag与Cache-Control/Expires</strong><br>配置Last-Modified/ETag的情况下，浏览器再次访问统一URI的资源，还是会发送请求到服务器询问文件是否已经修改，如果没有，服务器会只发送一个304回给浏览器，告诉浏览器直接从自己本地的缓存取数据；如果修改过那就整个数据重新发给浏览器；</p>\n<p>Cache-Control/Expires则不同，如果检测到本地的缓存还是有效的时间范围内，浏览器直接使用本地副本，不会发送任何请求。两者一起使用时，Cache-Control/Expires的优先级要高于Last-Modified/ETag。即当本地副本根据Cache-Control/Expires发现还在有效期内时，则不会再次发送请求去服务器询问修改时间（Last-Modified）或实体标识（Etag）了。</p>\n<p>一般情况下，使用Cache-Control/Expires会配合Last-Modified/ETag一起使用，因为即使服务器设置缓存时间, 当用户点击“刷新”按钮时，浏览器会忽略缓存继续向服务器发送请求，这时Last-Modified/ETag将能够很好利用304，从而减少响应开销。</p>\n<p><strong>Last-Modified与ETag</strong><br>你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag（实体标识）呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：</p>\n<ul>\n<li>Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的新鲜度,属于弱检验（weak validator）</li>\n<li>如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存</li>\n<li>有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形</li>\n<li>Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。属于强检验（strong validator）</li>\n<li>Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。</li>\n<li>Etag的服务器生成规则和强弱Etag的相关内容可以参考<a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\" target=\"_blank\" rel=\"noopener\">《HTTP Header definition》</a>，    </li>\n</ul>\n<h3 id=\"Reused-resources\"><a href=\"#Reused-resources\" class=\"headerlink\" title=\"Reused resources\"></a>Reused resources</h3><p>并非所有的数据被缓存或需要缓存，缓存是为了解决20%数据被80%的人频繁访问的问题而生。所有我们必须要考虑缓存的复用率。</p>\n<h4 id=\"The-data-we-cache\"><a href=\"#The-data-we-cache\" class=\"headerlink\" title=\"The data we cache\"></a>The data we cache</h4><p>数据如希望被缓存往往具备变化缓慢的特征。被缓存的数据往往具备如下特性：</p>\n<p><strong>时间局部性</strong><br>缓存的数据往往被打有时间缀，具有定期失效的特征，过期后会从源服务器检验请求验证是否需要重新拉取数据。<br>某数据被访问后，该数据往往会再次在短时间内被访问到。</p>\n<p><strong>空间局部性</strong><br>被访问数据的周边数据被访问的概率会比其它常规数据访问大很多，所以这些访问数据和其它周边有可能被访问的数据通过某种方式集中在一起，以提高数据的被访问速度，减少数据查找时长。<br>完成这类功能的工具往往称为Cache。</p>\n<p><strong>热（区）数据</strong><br>所谓热（区）数据就是指经常被访问到的数据，这类数据被缓存最有价值，缓存命中率高</p>\n<h4 id=\"The-data-we-do-not-cache\"><a href=\"#The-data-we-do-not-cache\" class=\"headerlink\" title=\"The data we do not cache\"></a>The data we do not cache</h4><p>用户账号密码信息等数据，该类数据不仅不应该被缓存，反而要被着重保护，这些年发生的撞库，密码破解等恶性事件，往往都是因为用户个人不当心或企业安全意味不足，导致用户敏感信息流失。</p>\n<h4 id=\"Cache-hit\"><a href=\"#Cache-hit\" class=\"headerlink\" title=\"Cache hit\"></a>Cache hit</h4><p>缓存命中率=hit/(hit+mixx)<br>hit表示缓存被命中，miss表示没有命中，也就是缓存项中没有对应的资源<br>文档命中率：从文档命中的个数进行衡量<br>字节命中率：从内容命中的大小(字节)进行衡量</p>\n<p> This is very important when web sites have CSS stylesheets or JS scripts that have mutual dependencies, i.e., they depend on each other because they refer to the same HTML elements.</p>\n<img src=\"/2018/04/10/web-cache-basic-kb/HTTPRevved.png\" class=\"HTTPRevved\">\n<h3 id=\"Can-NOT-Caches\"><a href=\"#Can-NOT-Caches\" class=\"headerlink\" title=\"Can NOT Caches\"></a>Can NOT Caches</h3><p>HTTP信息头中包含Cache-Control:no-cache，pragma:no-cache，或Cache-Control:max-age=0等告诉浏览器不用缓存的请求<br>需要根据Cookie，认证信息等决定输入内容的动态请求是不能被缓存的<br>经过HTTPS安全加密的请求（有人也经过测试发现，ie其实在头部加入Cache-Control：max-age信息，firefox在头部加入Cache-Control:Public之后，能够对HTTPS的资源进行缓存，参考《HTTPS的七个误解》）<br>POST请求无法被缓存<br>HTTP响应头中不包含Last-Modified/Etag，也不包含Cache-Control/Expires的请求无法被缓存</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Caching is a technique that stores a copy of a given resource and serves it back when requested. When a web cache has a requested resource in its store, it intercepts the request and returns its copy instead of re-downloading from the originating server.</p>\n</blockquote>\n<p><em>Web缓存是指一个Web资源（如html页面，图片，js，数据等）存在于Web服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。</em></p>\n<h3 id=\"Advantagement-of-Web-Cache\"><a href=\"#Advantagement-of-Web-Cache\" class=\"headerlink\" title=\"Advantagement of Web Cache\"></a>Advantagement of Web Cache</h3><ul>\n<li>Improving the performance by reusing previously fetched resources. </li>\n<li>Reducing latency and network traffic.</li>\n<li>Web sites become more responsive.</li>\n</ul>\n<h3 id=\"Different-kinds-of-caches\"><a href=\"#Different-kinds-of-caches\" class=\"headerlink\" title=\"Different kinds of caches\"></a>Different kinds of caches</h3><p>Cache从作用和部署位置来说有好几种类型：gateway caches, CDN, reverse proxy caches and load balancers 。这些有利于Web Server提高可用性，提升性能和横向扩展*<br><img src=\"/2018/04/10/web-cache-basic-kb/CacheCategory.png\" class=\"CacheCategory\">  </p>\n<h4 id=\"Reverse-Proxy-Cache\"><a href=\"#Reverse-Proxy-Cache\" class=\"headerlink\" title=\"Reverse Proxy Cache\"></a>Reverse Proxy Cache</h4><p>代理服务器是浏览器和源服务器之间的中间服务器，浏览器先向这个中间服务器发起Web请求，经过处理后（比如权限验证，缓存匹配等），再将请求转发到源服务器。代理服务器缓存的运作原理跟浏览器的运作原理差不多，只是规模更大。可以把它理解为一个共享缓存，不只为一个用户服务，一般为大量用户提供服务，因此在减少相应时间和带宽使用方面很有效，同一个副本会被重用多次。常见代理服务器缓存解决方案有Squid等，这里不再详述。</p>\n<h4 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h4><p>CDN（Content delivery networks）缓存，也叫网关缓存、反向代理缓存。CDN缓存一般是由网站管理员自己部署，为了让他们的网站更容易扩展并获得更好的性能。浏览器先向CDN网关发起Web请求，网关服务器后面对应着一台或多台负载均衡源服务器，会根据它们的负载请求，动态将请求转发到合适的源服务器上。虽然这种架构负载均衡源服务器之间的缓存没法共享，但却拥有更好的处扩展性。从浏览器角度来看，整个CDN就是一个源服务器，从这个层面来说，本文讨论浏览器和服务器之间的缓存机制，在这种架构下同样适用。</p>\n<h4 id=\"Web应用层缓存\"><a href=\"#Web应用层缓存\" class=\"headerlink\" title=\"Web应用层缓存\"></a>Web应用层缓存</h4><p>应用层缓存指的是从代码层面上，通过代码逻辑和缓存策略，实现对数据，页面，图片等资源的缓存，可以根据实际情况选择将数据存在文件系统或者内存中，减少数据库查询或者读写瓶颈，提高响应效率。</p>\n<h4 id=\"浏览器端缓存\"><a href=\"#浏览器端缓存\" class=\"headerlink\" title=\"浏览器端缓存\"></a>浏览器端缓存</h4><p>浏览器缓存根据一套与服务器约定的规则进行工作，在同一个会话过程中会检查一次并确定缓存的副本足够新。如果你浏览过程中，比如前进或后退，访问到同一个图片，这些图片可以从浏览器缓存中调出而即时显现。</p>\n<h4 id=\"SQL-Cache\"><a href=\"#SQL-Cache\" class=\"headerlink\" title=\"SQL Cache\"></a>SQL Cache</h4><p>Web应用，特别是SNS类型的应用，往往关系比较复杂，数据库表繁多，如果频繁进行数据库查询，很容易导致数据库不堪重荷。为了提供查询的性能，会将查询后的数据放到内存中进行缓存，下次查询时，直接从内存缓存直接返回，提供响应效率。比如常用的缓存方案有memcached等。</p>\n<h3 id=\"Controlling-caching\"><a href=\"#Controlling-caching\" class=\"headerlink\" title=\"Controlling caching\"></a>Controlling caching</h3><p>The header: <strong>Cache-control</strong> </p>\n<blockquote>\n<p>The Cache-Control HTTP/1.1 general-header field is used to specify directives for caching mechanisms in both requests and responses. Use this header to define your caching policies with the variety of directives it provides.</p>\n</blockquote>\n<p><em>HTTP1.1版本才添加的缓存控制机制，其在请求报文或响应报文首部添加一个cache-control的首部，用于定义资源的缓存最大时长，是相对于响应报文首部中的date首部定义的时间。一般响应报文首部会同时有Expires首部和Cache-control首部</em></p>\n<h4 id=\"No-cache-storage-at-all\"><a href=\"#No-cache-storage-at-all\" class=\"headerlink\" title=\"No cache storage at all\"></a>No cache storage at all</h4><blockquote>\n<p>The cache should not store anything about the client request or server response. A request is sent to the server and a full response is downloaded each and every time.<br><em>完全不缓存</em></p>\n</blockquote>\n<pre><code>Cache-Control: no-store\nCache-Control: no-cache, no-store, must-revalidate\n</code></pre><h4 id=\"No-caching\"><a href=\"#No-caching\" class=\"headerlink\" title=\"No caching\"></a>No caching</h4><blockquote>\n<p>A cache will send the request to the origin server for validation before releasing a cached copy.<br><em>会缓存，但是每次请求都会确认</em></p>\n</blockquote>\n<pre><code>Cache-Control: no-cache\n</code></pre><h4 id=\"Private-and-public-caches\"><a href=\"#Private-and-public-caches\" class=\"headerlink\" title=\"Private and public caches\"></a>Private and public caches</h4><p>Private Cache 只能被单个用户使用。Public Cache可以被多个用户复用。</p>\n<pre><code>Cache-Control: private\nCache-Control: public\n</code></pre><h4 id=\"Expiration\"><a href=\"#Expiration\" class=\"headerlink\" title=\"Expiration\"></a>Expiration</h4><p>The most important directive here is “max-age=&lt;seconds>“ which is the maximum amount of time a resource will be considered fresh. Contrary to Expires, this directive is relative to the time of the request. For the files in the application that will not change, you can usually add aggressive caching. This includes static files such as images, CSS files and JavaScript files, for example.</p>\n<p>For more details, see also the <strong>Freshness</strong> section below.</p>\n<pre><code>Cache-Control: max-age=31536000\n</code></pre><h4 id=\"Validation\"><a href=\"#Validation\" class=\"headerlink\" title=\"Validation\"></a>Validation</h4><p>When using the “must-revalidate” directive, the cache must verify the status of the stale resources before using it and expired ones should not be used. For more details, see the <strong>Validation</strong> section below.</p>\n<pre><code>Cache-Control: must-revalidate\n</code></pre><p>对Cache-Control头不同的值归纳 </p>\n<pre><code>    cache-request-directive=no-cache 不接受缓存响应\n                            no-store 不缓存在本地\n                            max-age  缓存最大有效时长       \n                            min-fresh \n\n    cache-response-directive=public\n                             private\n                             no-cache \n                             no-store\n                             must-revalidate\n                             max-age\n\n    // no-cache：可缓存，但用户每次请求都需要先到上游服务器做缓存检验\n</code></pre><h4 id=\"The-Pragma-header\"><a href=\"#The-Pragma-header\" class=\"headerlink\" title=\"The Pragma header\"></a>The Pragma header</h4><p>Pragma 是一个 HTTP/1.0 header，在HTTP/1.1中并没有定义它为一个HTTP response头，因为我们已经有了 Cache-Control header。这个只是为了兼容HTTP/1.0的客户端。</p>\n<pre><code>&lt;META HTTP-EQUIV=&quot;Pragma&quot; CONTENT=&quot;no-cache&quot;&gt;\n</code></pre><p>上述代码的作用是告诉浏览器当前页面不被缓存，每次访问都需要去服务器拉取。使用上很简单，但只有部分浏览器可以支持，而且所有缓存代理服务器都不支持，因为代理不解析HTML内容本身。</p>\n<p>可以通过这个页面测试你的浏览器是否支持：<a href=\"http://www.procata.com/cachetest/tests/pragma/index.php\" target=\"_blank\" rel=\"noopener\">Pragma No-Cache Test</a></p>\n<h4 id=\"Varying-responses\"><a href=\"#Varying-responses\" class=\"headerlink\" title=\"Varying responses\"></a>Varying responses</h4><p><strong>Vary</strong> response header从在Client上多个不同的cache副本筛选合适的版本</p>\n<blockquote>\n<p>The Vary HTTP response header determines how to match future request headers to decide whether a cached response can be used rather than requesting a fresh one from the origin server.</p>\n</blockquote>\n<blockquote>\n<p>When a cache receives a request that can be satisfied by a cached response that has a Vary header field, it must not use that cached response unless all header fields as nominated by the Vary header match in both the original (cached) request and the new request.</p>\n</blockquote>\n<blockquote>\n<p>The Vary header leads cache to use more HTTP headers as key for the cache.</p>\n</blockquote>\n<blockquote>\n<p>This can be useful for serving content dynamically, for example. When using the Vary: User-Agent header, caching servers should consider the user agent when deciding whether to serve the page from cache. If you are serving different content to mobile users, it can help you to avoid that a cache may mistakenly serve a desktop version of your site to your mobile users. In addition, it can help Google and other search engines to discover the mobile version of a page, and might also tell them that no Cloaking is intended.</p>\n</blockquote>\n<blockquote>\n<p>Because the User-Agent header value is different (“varies”) for mobile and desktop clients, caches will not be used to serve mobile content mistakenly to desktop users or vice versa.</p>\n</blockquote>\n<h3 id=\"Freshness\"><a href=\"#Freshness\" class=\"headerlink\" title=\"Freshness\"></a>Freshness</h3><p>新鲜度:资源被存储到缓存后，必须要有回收机制（cache eviction）以释放占用的存储空间；另外因为Web资源可能会不停地更新，缓存也需要过期机制（expiration time），也就是缓存副本有效期。</p>\n<h4 id=\"Cache-eviction\"><a href=\"#Cache-eviction\" class=\"headerlink\" title=\"Cache eviction\"></a>Cache eviction</h4><ol>\n<li>缓存项过期：缓存资源往往会被设置有效时长，过期自动清理或失效</li>\n<li>缓存空间用尽：缓存空间用尽时，会根据LRU（最近最小使用）算法清理缓存</li>\n<li>清理策略设置过长过短都不好，过长数据容易陈旧，过短起不到缓存效果</li>\n</ol>\n<h4 id=\"Lifetime\"><a href=\"#Lifetime\" class=\"headerlink\" title=\"Lifetime\"></a>Lifetime</h4><p>Show how a proxy cache acts when a doc is not cache, in the cache and fresh, in the cache and stale. Here is an example of this process with a shared cache proxy:</p>\n<img src=\"/2018/04/10/web-cache-basic-kb/HTTPStaleness.png\" class=\"HTTPStaleness\">\n<p>flow as follows:<br><img src=\"/2018/04/10/web-cache-basic-kb/FreshnessLifetime.png\" class=\"FreshnessLifetime\"></p>\n<ol>\n<li>是否过期（expeired）通过”<strong>Cache-control: max-age=N</strong>“ header 或者 <strong>Expires</strong> header 判断。<strong>max-age</strong>根据<strong>Date</strong>header和<strong>N</strong>判读是否expired；<strong>Expires</strong>则会直接记录expiration time.</li>\n<li><strong>Etag</strong> header记录的是resource文件的MD5值，通过MD5判断server上该文件是否有改动。</li>\n<li><strong>Last-Modified</strong>记录resource文件最后update时间，精确到秒。  </li>\n</ol>\n<p><strong>Cache-Control与Expires</strong><br>Cache-Control与Expires的作用一致，都是指明当前资源的有效期，控制浏览器是否直接从浏览器缓存取数据还是重新发请求到服务器取数据。只不过Cache-Control的选择更多，设置更细致，如果同时设置的话，其优先级高于Expires。</p>\n<p><strong>Last-Modified/ETag与Cache-Control/Expires</strong><br>配置Last-Modified/ETag的情况下，浏览器再次访问统一URI的资源，还是会发送请求到服务器询问文件是否已经修改，如果没有，服务器会只发送一个304回给浏览器，告诉浏览器直接从自己本地的缓存取数据；如果修改过那就整个数据重新发给浏览器；</p>\n<p>Cache-Control/Expires则不同，如果检测到本地的缓存还是有效的时间范围内，浏览器直接使用本地副本，不会发送任何请求。两者一起使用时，Cache-Control/Expires的优先级要高于Last-Modified/ETag。即当本地副本根据Cache-Control/Expires发现还在有效期内时，则不会再次发送请求去服务器询问修改时间（Last-Modified）或实体标识（Etag）了。</p>\n<p>一般情况下，使用Cache-Control/Expires会配合Last-Modified/ETag一起使用，因为即使服务器设置缓存时间, 当用户点击“刷新”按钮时，浏览器会忽略缓存继续向服务器发送请求，这时Last-Modified/ETag将能够很好利用304，从而减少响应开销。</p>\n<p><strong>Last-Modified与ETag</strong><br>你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag（实体标识）呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：</p>\n<ul>\n<li>Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的新鲜度,属于弱检验（weak validator）</li>\n<li>如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存</li>\n<li>有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形</li>\n<li>Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。属于强检验（strong validator）</li>\n<li>Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。</li>\n<li>Etag的服务器生成规则和强弱Etag的相关内容可以参考<a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\" target=\"_blank\" rel=\"noopener\">《HTTP Header definition》</a>，    </li>\n</ul>\n<h3 id=\"Reused-resources\"><a href=\"#Reused-resources\" class=\"headerlink\" title=\"Reused resources\"></a>Reused resources</h3><p>并非所有的数据被缓存或需要缓存，缓存是为了解决20%数据被80%的人频繁访问的问题而生。所有我们必须要考虑缓存的复用率。</p>\n<h4 id=\"The-data-we-cache\"><a href=\"#The-data-we-cache\" class=\"headerlink\" title=\"The data we cache\"></a>The data we cache</h4><p>数据如希望被缓存往往具备变化缓慢的特征。被缓存的数据往往具备如下特性：</p>\n<p><strong>时间局部性</strong><br>缓存的数据往往被打有时间缀，具有定期失效的特征，过期后会从源服务器检验请求验证是否需要重新拉取数据。<br>某数据被访问后，该数据往往会再次在短时间内被访问到。</p>\n<p><strong>空间局部性</strong><br>被访问数据的周边数据被访问的概率会比其它常规数据访问大很多，所以这些访问数据和其它周边有可能被访问的数据通过某种方式集中在一起，以提高数据的被访问速度，减少数据查找时长。<br>完成这类功能的工具往往称为Cache。</p>\n<p><strong>热（区）数据</strong><br>所谓热（区）数据就是指经常被访问到的数据，这类数据被缓存最有价值，缓存命中率高</p>\n<h4 id=\"The-data-we-do-not-cache\"><a href=\"#The-data-we-do-not-cache\" class=\"headerlink\" title=\"The data we do not cache\"></a>The data we do not cache</h4><p>用户账号密码信息等数据，该类数据不仅不应该被缓存，反而要被着重保护，这些年发生的撞库，密码破解等恶性事件，往往都是因为用户个人不当心或企业安全意味不足，导致用户敏感信息流失。</p>\n<h4 id=\"Cache-hit\"><a href=\"#Cache-hit\" class=\"headerlink\" title=\"Cache hit\"></a>Cache hit</h4><p>缓存命中率=hit/(hit+mixx)<br>hit表示缓存被命中，miss表示没有命中，也就是缓存项中没有对应的资源<br>文档命中率：从文档命中的个数进行衡量<br>字节命中率：从内容命中的大小(字节)进行衡量</p>\n<p> This is very important when web sites have CSS stylesheets or JS scripts that have mutual dependencies, i.e., they depend on each other because they refer to the same HTML elements.</p>\n<img src=\"/2018/04/10/web-cache-basic-kb/HTTPRevved.png\" class=\"HTTPRevved\">\n<h3 id=\"Can-NOT-Caches\"><a href=\"#Can-NOT-Caches\" class=\"headerlink\" title=\"Can NOT Caches\"></a>Can NOT Caches</h3><p>HTTP信息头中包含Cache-Control:no-cache，pragma:no-cache，或Cache-Control:max-age=0等告诉浏览器不用缓存的请求<br>需要根据Cookie，认证信息等决定输入内容的动态请求是不能被缓存的<br>经过HTTPS安全加密的请求（有人也经过测试发现，ie其实在头部加入Cache-Control：max-age信息，firefox在头部加入Cache-Control:Public之后，能够对HTTPS的资源进行缓存，参考《HTTPS的七个误解》）<br>POST请求无法被缓存<br>HTTP响应头中不包含Last-Modified/Etag，也不包含Cache-Control/Expires的请求无法被缓存</p>\n"},{"title":"《朝花夕拾》","_content":">  我常想在纷扰中寻出一点闲静来，然而委实不容易。目前是这么离奇，心里是这么芜杂。一个人做到只剩了回忆的时候，生涯大概总要算是无聊了罢，但有时竟会连回忆也没有。\n\n>前天，已将《野草》编定了；这回便轮到陆续载在《莽原》上的《旧事重提》，我还替他改了一个名称：《朝花夕拾》。带露折花，色香自然要好得多，但是我不能够。便是现在心目中的离奇和芜杂，我也还不能使他即刻幻化，转成离奇和芜杂的文章。或者，他日仰看流云时，会在我的眼前一闪烁罢。\n\n>我有一时，曾经屡次忆起儿时在故乡所吃的蔬果：菱角、罗汉豆、茭白、香瓜。凡这些，都是极其鲜美可口的；都曾是使我思乡的蛊惑。后来，我在久别之后尝到了，也不过如此；惟独在记忆上，还有旧来的意味留存。他们也许要哄骗我一生，使我时时反顾。\n\n\n_<p align=\"right\">——《朝花夕拾》小引</p>_\n正如鲁迅先生给文集取名《朝花夕拾》一样，当我第一次感觉到每天忙于各种凌杂的琐碎，无暇去思考和记录做过的一些工作，而当再次拿起这些工作时，记忆是那么的空白，没有一点线索可以现成的找寻。想想在这些年的工作中，有做过不少研究和探索，零散的记录在不同的地方，或是在纸质的笔记本上，在不同的文件夹中，在在线软件文档中，有些干脆没有记录，只是在大脑中保存一点记忆。 \n取名《朝花夕拾》这个寓意很好，这些年来工作中，重新整理那些有意义的资料文档，即可归纳总结多年来工作的成绩，也保存有价值的历史资料或记忆。\n\n>回忆，我发现，可能是不可靠的东西，尝尝被你回忆时的环境所大大的扭曲。\n\n_<p align=\"right\">——《远山淡影》石黑一雄</p>_\n\n当石黑一雄获得诺贝尔文学奖时，当我我看《远山淡影》这本书时，没忍住买了一本但是没怎么看懂。后来一次去一家书店阅读时，看到上面这段书评，心中瞬间被这就句话触动了。回想阅读这本书时的情节突然就想通了。 \n\n记忆，可不就是这样吗？曾经很熟悉的知识内容，在时间的冲淡下，常常只有一个模糊印象，更糟糕的是将几个不相关的片段串在一起。对于技术这个来说，太要糟糕了，当再去想用过的东西还需要不停的调试和排错，这对效率来说是巨大的损失，对精力是巨大的折磨。我们太需要这种实实在在东西将我们印象的东西记录下来。\n\n>Without you,who would I admire all the beautiful things with.   \n>“没有你 良辰美景可与何人说。”  \n\n_<p align=\"right\">——《天使爱美丽》台词</p>_\n\n最后，我要说的是，对于关于Share这件事，我想这也是Github的核心精神，将自己的贡献上传到公共的平台上，不仅是一个免费展示自己的平台，而且让那些需要的人可以浏览和下载。在Share中获得快乐，同时又可以帮助他人，这或许也是一种自我实现。\n\n这大概就是我记录博客的初衷吧。","source":"_posts/hello-world.md","raw":"---\ntitle: 《朝花夕拾》 \n---\n>  我常想在纷扰中寻出一点闲静来，然而委实不容易。目前是这么离奇，心里是这么芜杂。一个人做到只剩了回忆的时候，生涯大概总要算是无聊了罢，但有时竟会连回忆也没有。\n\n>前天，已将《野草》编定了；这回便轮到陆续载在《莽原》上的《旧事重提》，我还替他改了一个名称：《朝花夕拾》。带露折花，色香自然要好得多，但是我不能够。便是现在心目中的离奇和芜杂，我也还不能使他即刻幻化，转成离奇和芜杂的文章。或者，他日仰看流云时，会在我的眼前一闪烁罢。\n\n>我有一时，曾经屡次忆起儿时在故乡所吃的蔬果：菱角、罗汉豆、茭白、香瓜。凡这些，都是极其鲜美可口的；都曾是使我思乡的蛊惑。后来，我在久别之后尝到了，也不过如此；惟独在记忆上，还有旧来的意味留存。他们也许要哄骗我一生，使我时时反顾。\n\n\n_<p align=\"right\">——《朝花夕拾》小引</p>_\n正如鲁迅先生给文集取名《朝花夕拾》一样，当我第一次感觉到每天忙于各种凌杂的琐碎，无暇去思考和记录做过的一些工作，而当再次拿起这些工作时，记忆是那么的空白，没有一点线索可以现成的找寻。想想在这些年的工作中，有做过不少研究和探索，零散的记录在不同的地方，或是在纸质的笔记本上，在不同的文件夹中，在在线软件文档中，有些干脆没有记录，只是在大脑中保存一点记忆。 \n取名《朝花夕拾》这个寓意很好，这些年来工作中，重新整理那些有意义的资料文档，即可归纳总结多年来工作的成绩，也保存有价值的历史资料或记忆。\n\n>回忆，我发现，可能是不可靠的东西，尝尝被你回忆时的环境所大大的扭曲。\n\n_<p align=\"right\">——《远山淡影》石黑一雄</p>_\n\n当石黑一雄获得诺贝尔文学奖时，当我我看《远山淡影》这本书时，没忍住买了一本但是没怎么看懂。后来一次去一家书店阅读时，看到上面这段书评，心中瞬间被这就句话触动了。回想阅读这本书时的情节突然就想通了。 \n\n记忆，可不就是这样吗？曾经很熟悉的知识内容，在时间的冲淡下，常常只有一个模糊印象，更糟糕的是将几个不相关的片段串在一起。对于技术这个来说，太要糟糕了，当再去想用过的东西还需要不停的调试和排错，这对效率来说是巨大的损失，对精力是巨大的折磨。我们太需要这种实实在在东西将我们印象的东西记录下来。\n\n>Without you,who would I admire all the beautiful things with.   \n>“没有你 良辰美景可与何人说。”  \n\n_<p align=\"right\">——《天使爱美丽》台词</p>_\n\n最后，我要说的是，对于关于Share这件事，我想这也是Github的核心精神，将自己的贡献上传到公共的平台上，不仅是一个免费展示自己的平台，而且让那些需要的人可以浏览和下载。在Share中获得快乐，同时又可以帮助他人，这或许也是一种自我实现。\n\n这大概就是我记录博客的初衷吧。","slug":"hello-world","published":1,"date":"2018-03-15T07:24:29.847Z","updated":"2018-04-05T10:36:04.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjhtwonu30014wgl18msmvyl9","content":"<blockquote>\n<p> 我常想在纷扰中寻出一点闲静来，然而委实不容易。目前是这么离奇，心里是这么芜杂。一个人做到只剩了回忆的时候，生涯大概总要算是无聊了罢，但有时竟会连回忆也没有。</p>\n</blockquote>\n<blockquote>\n<p>前天，已将《野草》编定了；这回便轮到陆续载在《莽原》上的《旧事重提》，我还替他改了一个名称：《朝花夕拾》。带露折花，色香自然要好得多，但是我不能够。便是现在心目中的离奇和芜杂，我也还不能使他即刻幻化，转成离奇和芜杂的文章。或者，他日仰看流云时，会在我的眼前一闪烁罢。</p>\n</blockquote>\n<blockquote>\n<p>我有一时，曾经屡次忆起儿时在故乡所吃的蔬果：菱角、罗汉豆、茭白、香瓜。凡这些，都是极其鲜美可口的；都曾是使我思乡的蛊惑。后来，我在久别之后尝到了，也不过如此；惟独在记忆上，还有旧来的意味留存。他们也许要哄骗我一生，使我时时反顾。</p>\n</blockquote>\n<p><em><p align=\"right\">——《朝花夕拾》小引</p></em><br>正如鲁迅先生给文集取名《朝花夕拾》一样，当我第一次感觉到每天忙于各种凌杂的琐碎，无暇去思考和记录做过的一些工作，而当再次拿起这些工作时，记忆是那么的空白，没有一点线索可以现成的找寻。想想在这些年的工作中，有做过不少研究和探索，零散的记录在不同的地方，或是在纸质的笔记本上，在不同的文件夹中，在在线软件文档中，有些干脆没有记录，只是在大脑中保存一点记忆。<br>取名《朝花夕拾》这个寓意很好，这些年来工作中，重新整理那些有意义的资料文档，即可归纳总结多年来工作的成绩，也保存有价值的历史资料或记忆。</p>\n<blockquote>\n<p>回忆，我发现，可能是不可靠的东西，尝尝被你回忆时的环境所大大的扭曲。</p>\n</blockquote>\n<p><em><p align=\"right\">——《远山淡影》石黑一雄</p></em></p>\n<p>当石黑一雄获得诺贝尔文学奖时，当我我看《远山淡影》这本书时，没忍住买了一本但是没怎么看懂。后来一次去一家书店阅读时，看到上面这段书评，心中瞬间被这就句话触动了。回想阅读这本书时的情节突然就想通了。 </p>\n<p>记忆，可不就是这样吗？曾经很熟悉的知识内容，在时间的冲淡下，常常只有一个模糊印象，更糟糕的是将几个不相关的片段串在一起。对于技术这个来说，太要糟糕了，当再去想用过的东西还需要不停的调试和排错，这对效率来说是巨大的损失，对精力是巨大的折磨。我们太需要这种实实在在东西将我们印象的东西记录下来。</p>\n<blockquote>\n<p>Without you,who would I admire all the beautiful things with.<br>“没有你 良辰美景可与何人说。”  </p>\n</blockquote>\n<p><em><p align=\"right\">——《天使爱美丽》台词</p></em></p>\n<p>最后，我要说的是，对于关于Share这件事，我想这也是Github的核心精神，将自己的贡献上传到公共的平台上，不仅是一个免费展示自己的平台，而且让那些需要的人可以浏览和下载。在Share中获得快乐，同时又可以帮助他人，这或许也是一种自我实现。</p>\n<p>这大概就是我记录博客的初衷吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p> 我常想在纷扰中寻出一点闲静来，然而委实不容易。目前是这么离奇，心里是这么芜杂。一个人做到只剩了回忆的时候，生涯大概总要算是无聊了罢，但有时竟会连回忆也没有。</p>\n</blockquote>\n<blockquote>\n<p>前天，已将《野草》编定了；这回便轮到陆续载在《莽原》上的《旧事重提》，我还替他改了一个名称：《朝花夕拾》。带露折花，色香自然要好得多，但是我不能够。便是现在心目中的离奇和芜杂，我也还不能使他即刻幻化，转成离奇和芜杂的文章。或者，他日仰看流云时，会在我的眼前一闪烁罢。</p>\n</blockquote>\n<blockquote>\n<p>我有一时，曾经屡次忆起儿时在故乡所吃的蔬果：菱角、罗汉豆、茭白、香瓜。凡这些，都是极其鲜美可口的；都曾是使我思乡的蛊惑。后来，我在久别之后尝到了，也不过如此；惟独在记忆上，还有旧来的意味留存。他们也许要哄骗我一生，使我时时反顾。</p>\n</blockquote>\n<p><em><p align=\"right\">——《朝花夕拾》小引</p></em><br>正如鲁迅先生给文集取名《朝花夕拾》一样，当我第一次感觉到每天忙于各种凌杂的琐碎，无暇去思考和记录做过的一些工作，而当再次拿起这些工作时，记忆是那么的空白，没有一点线索可以现成的找寻。想想在这些年的工作中，有做过不少研究和探索，零散的记录在不同的地方，或是在纸质的笔记本上，在不同的文件夹中，在在线软件文档中，有些干脆没有记录，只是在大脑中保存一点记忆。<br>取名《朝花夕拾》这个寓意很好，这些年来工作中，重新整理那些有意义的资料文档，即可归纳总结多年来工作的成绩，也保存有价值的历史资料或记忆。</p>\n<blockquote>\n<p>回忆，我发现，可能是不可靠的东西，尝尝被你回忆时的环境所大大的扭曲。</p>\n</blockquote>\n<p><em><p align=\"right\">——《远山淡影》石黑一雄</p></em></p>\n<p>当石黑一雄获得诺贝尔文学奖时，当我我看《远山淡影》这本书时，没忍住买了一本但是没怎么看懂。后来一次去一家书店阅读时，看到上面这段书评，心中瞬间被这就句话触动了。回想阅读这本书时的情节突然就想通了。 </p>\n<p>记忆，可不就是这样吗？曾经很熟悉的知识内容，在时间的冲淡下，常常只有一个模糊印象，更糟糕的是将几个不相关的片段串在一起。对于技术这个来说，太要糟糕了，当再去想用过的东西还需要不停的调试和排错，这对效率来说是巨大的损失，对精力是巨大的折磨。我们太需要这种实实在在东西将我们印象的东西记录下来。</p>\n<blockquote>\n<p>Without you,who would I admire all the beautiful things with.<br>“没有你 良辰美景可与何人说。”  </p>\n</blockquote>\n<p><em><p align=\"right\">——《天使爱美丽》台词</p></em></p>\n<p>最后，我要说的是，对于关于Share这件事，我想这也是Github的核心精神，将自己的贡献上传到公共的平台上，不仅是一个免费展示自己的平台，而且让那些需要的人可以浏览和下载。在Share中获得快乐，同时又可以帮助他人，这或许也是一种自我实现。</p>\n<p>这大概就是我记录博客的初衷吧。</p>\n"},{"title":"tranning skill","date":"2018-05-22T06:39:44.000Z","_content":"_因为工作的关系，可能会需要做一些产品，技术和知识的培训计划或课程。通过一个从事于培训行业的朋友探讨后，她有些相当不错的建议，我根据她的建议做了一个简单的脑图(mind mapping)，方便以后做一个Check List。_\n\n{% img training /2018/05/31/training-skill/training-skill.png %}\n\nMind mapping[源文件](/2018/05/31/training-skill/training-skill.km)，可以通过百度脑图导入进行编辑。","source":"_posts/training-skill.md","raw":"---\ntitle: tranning skill\ndate: 2018-05-22 14:39:44\ntags:\n\t- training\ncategory:\n\t- training\n---\n_因为工作的关系，可能会需要做一些产品，技术和知识的培训计划或课程。通过一个从事于培训行业的朋友探讨后，她有些相当不错的建议，我根据她的建议做了一个简单的脑图(mind mapping)，方便以后做一个Check List。_\n\n{% img training /2018/05/31/training-skill/training-skill.png %}\n\nMind mapping[源文件](/2018/05/31/training-skill/training-skill.km)，可以通过百度脑图导入进行编辑。","slug":"training-skill","published":1,"updated":"2018-05-31T02:18:14.788Z","_id":"cjhtwonu60017wgl1l13f2dhv","comments":1,"layout":"post","photos":[],"link":"","content":"<p><em>因为工作的关系，可能会需要做一些产品，技术和知识的培训计划或课程。通过一个从事于培训行业的朋友探讨后，她有些相当不错的建议，我根据她的建议做了一个简单的脑图(mind mapping)，方便以后做一个Check List。</em></p>\n<img src=\"/2018/05/31/training-skill/training-skill.png\" class=\"training\">\n<p>Mind mapping<a href=\"/2018/05/31/training-skill/training-skill.km\">源文件</a>，可以通过百度脑图导入进行编辑。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>因为工作的关系，可能会需要做一些产品，技术和知识的培训计划或课程。通过一个从事于培训行业的朋友探讨后，她有些相当不错的建议，我根据她的建议做了一个简单的脑图(mind mapping)，方便以后做一个Check List。</em></p>\n<img src=\"/2018/05/31/training-skill/training-skill.png\" class=\"training\">\n<p>Mind mapping<a href=\"/2018/05/31/training-skill/training-skill.km\">源文件</a>，可以通过百度脑图导入进行编辑。</p>\n"}],"PostAsset":[{"_id":"source/_posts/web-cache-basic-kb/HTTPStaleness.png","slug":"HTTPStaleness.png","post":"cjhtwonu00011wgl12a30o8b6","modified":0,"renderable":0},{"_id":"source/_posts/web-cache-basic-kb/CacheCategory.png","slug":"CacheCategory.png","post":"cjhtwonu00011wgl12a30o8b6","modified":0,"renderable":0},{"_id":"source/_posts/web-cache-basic-kb/HTTPCachtType.png","slug":"HTTPCachtType.png","post":"cjhtwonu00011wgl12a30o8b6","modified":0,"renderable":0},{"_id":"source/_posts/web-cache-basic-kb/HTTPVary.png","slug":"HTTPVary.png","post":"cjhtwonu00011wgl12a30o8b6","modified":0,"renderable":0},{"_id":"source/_posts/web-cache-basic-kb/RequestCacheFlow.png","slug":"RequestCacheFlow.png","post":"cjhtwonu00011wgl12a30o8b6","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjhtwons10001wgl1yzojyaz1","category_id":"cjhtwonsg0004wgl1edc553kx","_id":"cjhtwonsz000dwgl1jkxrg9vp"},{"post_id":"cjhtwonsk0006wgl1424ug0mw","category_id":"cjhtwonsg0004wgl1edc553kx","_id":"cjhtwontn000owgl1qh2oowcf"},{"post_id":"cjhtwontm000nwgl1mjrzhmua","category_id":"cjhtwonsg0004wgl1edc553kx","_id":"cjhtwontv000vwgl1lscxb6zp"},{"post_id":"cjhtwontu000uwgl1awxrqmiy","category_id":"cjhtwonsg0004wgl1edc553kx","_id":"cjhtwonu50015wgl16ctayk2n"},{"post_id":"cjhtwonst000bwgl1843j12jt","category_id":"cjhtwontt000twgl19t9uju3h","_id":"cjhtwonu70018wgl17in86o53"},{"post_id":"cjhtwontx000ywgl1cg2e8pzx","category_id":"cjhtwonsr0009wgl1ysffuq3y","_id":"cjhtwonu9001bwgl17sokc4c4"},{"post_id":"cjhtwonsa0003wgl1m8rlet82","category_id":"cjhtwonsr0009wgl1ysffuq3y","_id":"cjhtwonuf001dwgl1n8bqr1ve"},{"post_id":"cjhtwonsa0003wgl1m8rlet82","category_id":"cjhtwonu0000zwgl1n016owhm","_id":"cjhtwonuh001hwgl1fps30p8i"},{"post_id":"cjhtwonsw000cwgl196bfe929","category_id":"cjhtwonu80019wgl1n43hgj9f","_id":"cjhtwonui001iwgl1ese0a6ti"},{"post_id":"cjhtwont3000gwgl15m11eln7","category_id":"cjhtwonuf001fwgl1lhqef33j","_id":"cjhtwonul001owgl1ukc6wngg"},{"post_id":"cjhtwontb000iwgl1liluyzgp","category_id":"cjhtwonsr0009wgl1ysffuq3y","_id":"cjhtwonun001rwgl1zwarupcz"},{"post_id":"cjhtwontb000iwgl1liluyzgp","category_id":"cjhtwonui001kwgl1ezqlfi8m","_id":"cjhtwonuo001uwgl1eikapijw"},{"post_id":"cjhtwontj000mwgl1h5u0kn1j","category_id":"cjhtwonul001pwgl1sgqe5gsw","_id":"cjhtwonup001xwgl11fi49mkx"},{"post_id":"cjhtwonsn0007wgl1ktkwrfjc","category_id":"cjhtwonte000kwgl12woeatnc","_id":"cjhtwonus0022wgl1ymyina6w"},{"post_id":"cjhtwonsn0007wgl1ktkwrfjc","category_id":"cjhtwonun001swgl1gfmqcqyb","_id":"cjhtwonut0024wgl18osng61n"},{"post_id":"cjhtwontp000rwgl17vohixe1","category_id":"cjhtwonuf001fwgl1lhqef33j","_id":"cjhtwonuu0025wgl1hqnk6gkn"},{"post_id":"cjhtwonsp0008wgl1t48d58q2","category_id":"cjhtwonsr0009wgl1ysffuq3y","_id":"cjhtwonux002bwgl1s2j4b2zw"},{"post_id":"cjhtwonsp0008wgl1t48d58q2","category_id":"cjhtwonus0021wgl1v2ldyxx2","_id":"cjhtwonuy002cwgl1vsdhfpto"},{"post_id":"cjhtwontr000swgl1cipy69n4","category_id":"cjhtwonul001pwgl1sgqe5gsw","_id":"cjhtwonuz002ewgl1np84ob25"},{"post_id":"cjhtwonu00011wgl12a30o8b6","category_id":"cjhtwonuw002awgl1iivsw12d","_id":"cjhtwonv0002gwgl1vxbl3z6u"},{"post_id":"cjhtwonu60017wgl1l13f2dhv","category_id":"cjhtx0wbt000060l1rnbjxdu2","_id":"cjhtx0wc7000360l182cg7idn"}],"PostTag":[{"post_id":"cjhtwons10001wgl1yzojyaz1","tag_id":"cjhtwonsj0005wgl1wuh339zj","_id":"cjhtwont6000hwgl10abycqbp"},{"post_id":"cjhtwons10001wgl1yzojyaz1","tag_id":"cjhtwonsr000awgl144peu99a","_id":"cjhtwontd000jwgl1pl2c5i7w"},{"post_id":"cjhtwonsa0003wgl1m8rlet82","tag_id":"cjhtwonsz000fwgl1qg2f0f4k","_id":"cjhtwontx000xwgl1o4h4z1mf"},{"post_id":"cjhtwonsa0003wgl1m8rlet82","tag_id":"cjhtwontj000lwgl1eoo336nq","_id":"cjhtwonu00010wgl1xnl4awu3"},{"post_id":"cjhtwonsa0003wgl1m8rlet82","tag_id":"cjhtwontp000qwgl1sr0opzvm","_id":"cjhtwonu30013wgl1khi5vlpx"},{"post_id":"cjhtwontx000ywgl1cg2e8pzx","tag_id":"cjhtwontp000qwgl1sr0opzvm","_id":"cjhtwonu60016wgl1ir78y6e2"},{"post_id":"cjhtwonsk0006wgl1424ug0mw","tag_id":"cjhtwonsj0005wgl1wuh339zj","_id":"cjhtwonua001cwgl1drh9vqhx"},{"post_id":"cjhtwonsk0006wgl1424ug0mw","tag_id":"cjhtwonu20012wgl1q361aer6","_id":"cjhtwonuf001ewgl1v0fz4yh6"},{"post_id":"cjhtwonsn0007wgl1ktkwrfjc","tag_id":"cjhtwonsz000fwgl1qg2f0f4k","_id":"cjhtwonuj001lwgl19oqwbmh1"},{"post_id":"cjhtwonsn0007wgl1ktkwrfjc","tag_id":"cjhtwontj000lwgl1eoo336nq","_id":"cjhtwonuk001mwgl17pyc1aql"},{"post_id":"cjhtwonsp0008wgl1t48d58q2","tag_id":"cjhtwontp000qwgl1sr0opzvm","_id":"cjhtwonun001twgl134manh7b"},{"post_id":"cjhtwonsp0008wgl1t48d58q2","tag_id":"cjhtwonuk001nwgl1uq8p18yo","_id":"cjhtwonuo001vwgl1gcaee6ig"},{"post_id":"cjhtwonst000bwgl1843j12jt","tag_id":"cjhtwonum001qwgl1zj18u69w","_id":"cjhtwonuq001zwgl1aexrz6k5"},{"post_id":"cjhtwonsw000cwgl196bfe929","tag_id":"cjhtwonup001wwgl13j5jjn5b","_id":"cjhtwonut0023wgl1vxj6g7rl"},{"post_id":"cjhtwont3000gwgl15m11eln7","tag_id":"cjhtwonur0020wgl1zhkke3bo","_id":"cjhtwonuv0028wgl1vvmi9muz"},{"post_id":"cjhtwontb000iwgl1liluyzgp","tag_id":"cjhtwonup001wwgl13j5jjn5b","_id":"cjhtwonv1002hwgl1z2pyopxh"},{"post_id":"cjhtwontb000iwgl1liluyzgp","tag_id":"cjhtwontp000qwgl1sr0opzvm","_id":"cjhtwonv1002iwgl1g8tkl7dq"},{"post_id":"cjhtwontb000iwgl1liluyzgp","tag_id":"cjhtwonuy002dwgl1uf7ny6dn","_id":"cjhtwonv2002kwgl1ob4x9w38"},{"post_id":"cjhtwontj000mwgl1h5u0kn1j","tag_id":"cjhtwonv0002fwgl1ni3yd3si","_id":"cjhtwonv2002lwgl1yu3xelx6"},{"post_id":"cjhtwontm000nwgl1mjrzhmua","tag_id":"cjhtwonsj0005wgl1wuh339zj","_id":"cjhtwonv5002owgl1na9aeg1v"},{"post_id":"cjhtwontm000nwgl1mjrzhmua","tag_id":"cjhtwonv2002jwgl13jkf3391","_id":"cjhtwonv5002pwgl17noi4rgy"},{"post_id":"cjhtwontm000nwgl1mjrzhmua","tag_id":"cjhtwonv3002mwgl1czf8ctam","_id":"cjhtwonv7002rwgl1ce1lzpln"},{"post_id":"cjhtwontp000rwgl17vohixe1","tag_id":"cjhtwonur0020wgl1zhkke3bo","_id":"cjhtwonv7002swgl1ugsispni"},{"post_id":"cjhtwontr000swgl1cipy69n4","tag_id":"cjhtwonv0002fwgl1ni3yd3si","_id":"cjhtwonv8002uwgl13ku9v7pd"},{"post_id":"cjhtwontu000uwgl1awxrqmiy","tag_id":"cjhtwonsj0005wgl1wuh339zj","_id":"cjhtwonva002xwgl12o70rcyq"},{"post_id":"cjhtwontu000uwgl1awxrqmiy","tag_id":"cjhtwonsr000awgl144peu99a","_id":"cjhtwonva002ywgl1gyh4itjr"},{"post_id":"cjhtwontu000uwgl1awxrqmiy","tag_id":"cjhtwonu20012wgl1q361aer6","_id":"cjhtwonvb0030wgl13bulw3p6"},{"post_id":"cjhtwontu000uwgl1awxrqmiy","tag_id":"cjhtwonv8002vwgl1odudkjn0","_id":"cjhtwonvc0031wgl1b8skdmo7"},{"post_id":"cjhtwonu00011wgl12a30o8b6","tag_id":"cjhtwonv9002wwgl1wh4mf0wm","_id":"cjhtwonvd0033wgl1rwtw8sfo"},{"post_id":"cjhtwonu00011wgl12a30o8b6","tag_id":"cjhtwonvb002zwgl1ty0bagwk","_id":"cjhtwonvd0034wgl12e3vbafr"},{"post_id":"cjhtwonu00011wgl12a30o8b6","tag_id":"cjhtwonvc0032wgl1b3n02qzr","_id":"cjhtwonvd0035wgl1a17vqwl3"},{"post_id":"cjhtwonu60017wgl1l13f2dhv","tag_id":"cjhtx0wc2000160l13e3upo10","_id":"cjhtx0wc5000260l1gn2f9r0e"}],"Tag":[{"name":"blog","_id":"cjhtwonsj0005wgl1wuh339zj"},{"name":"git","_id":"cjhtwonsr000awgl144peu99a"},{"name":"linux","_id":"cjhtwonsz000fwgl1qg2f0f4k"},{"name":"route","_id":"cjhtwontj000lwgl1eoo336nq"},{"name":"security","_id":"cjhtwontp000qwgl1sr0opzvm"},{"name":"hexo","_id":"cjhtwonu20012wgl1q361aer6"},{"name":"vmware","_id":"cjhtwonuk001nwgl1uq8p18yo"},{"name":"tool","_id":"cjhtwonum001qwgl1zj18u69w"},{"name":"network","_id":"cjhtwonup001wwgl13j5jjn5b"},{"name":"encode","_id":"cjhtwonur0020wgl1zhkke3bo"},{"name":"dns","_id":"cjhtwonuy002dwgl1uf7ny6dn"},{"name":"film","_id":"cjhtwonv0002fwgl1ni3yd3si"},{"name":"HTML","_id":"cjhtwonv2002jwgl13jkf3391"},{"name":"markdown","_id":"cjhtwonv3002mwgl1czf8ctam"},{"name":"github","_id":"cjhtwonv8002vwgl1odudkjn0"},{"name":"web","_id":"cjhtwonv9002wwgl1wh4mf0wm"},{"name":"cache","_id":"cjhtwonvb002zwgl1ty0bagwk"},{"name":"HTTP","_id":"cjhtwonvc0032wgl1b3n02qzr"},{"name":"training","_id":"cjhtx0wc2000160l13e3upo10"}]}}